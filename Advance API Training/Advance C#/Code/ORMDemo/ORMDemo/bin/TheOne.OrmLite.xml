<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TheOne.OrmLite</name>
    </assembly>
    <members>
        <member name="M:TheOne.OrmLite.Core.OrmLiteReadApi.Select``1(System.Data.IDbConnection)">
            <summary>
                Returns results from the active connection.
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteReadApi.Select``1(System.Data.IDbConnection,System.String)">
            <summary>
                Returns results from using sql. E.g:
                <para>db.Select&lt;Person&gt;("Age &gt; 40")</para>
                <para>db.Select&lt;Person&gt;("SELECT * FROM Person WHERE Age &gt; 40")</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteReadApi.Select``1(System.Data.IDbConnection,System.String,System.Collections.Generic.IEnumerable{System.Data.IDbDataParameter})">
            <summary>
                Returns results from using sql. E.g:
                <para>db.Select&lt;Person&gt;("SELECT * FROM Person WHERE Age &gt; @age", new[] { db.CreateParam("age", 40) })</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteReadApi.Select``1(System.Data.IDbConnection,System.String,System.Object)">
            <summary>
                Returns results from using a parameterized query. E.g:
                <para>db.Select&lt;Person&gt;("Age &gt; @age", new { age = 40})</para>
                <para>db.Select&lt;Person&gt;("SELECT * FROM Person WHERE Age &gt; @age", new { age = 40})</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteReadApi.Select``1(System.Data.IDbConnection,System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
                Returns results from using a parameterized query. E.g:
                <para>db.Select&lt;Person&gt;("Age &gt; @age", new Dictionary&lt;string, object&gt; { { "age", 40 } })</para>
                <para>db.Select&lt;Person&gt;("SELECT * FROM Person WHERE Age &gt; @age", new Dictionary&lt;string, object&gt; { { "age", 40 } })</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteReadApi.Select``1(System.Data.IDbConnection,System.Type,System.String,System.Object)">
            <summary>
                Returns a partial subset of results from the specified tableType. E.g:
                <para>db.Select&lt;EntityWithId&gt;(typeof(Person))</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteReadApi.Select``1(System.Data.IDbConnection,System.Type)">
            <summary>
                Returns a partial subset of results from the specified tableType. E.g:
                <para>db.Select&lt;EntityWithId&gt;(typeof(Person))</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteReadApi.Where``1(System.Data.IDbConnection,System.String,System.Object)">
            <summary>
                Returns results from using a single name, value filter. E.g:
                <para>db.Where&lt;Person&gt;("Age", 27)</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteReadApi.Where``1(System.Data.IDbConnection,System.Object)">
            <summary>
                Returns results from using an anonymous type filter. E.g:
                <para>db.Where&lt;Person&gt;(new { Age = 27 })</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteReadApi.SelectByIds``1(System.Data.IDbConnection,System.Collections.IEnumerable)">
            <summary>
                Returns results using the supplied primary key ids. E.g:
                <para>db.SelectByIds&lt;Person&gt;(new[] { 1, 2, 3 })</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteReadApi.SelectNonDefaults``1(System.Data.IDbConnection,``0)">
            <summary>
                Query results using the non-default values in the supplied partially populated POCO example. E.g:
                <para>db.SelectNonDefaults(new Person { Id = 1 })</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteReadApi.SelectNonDefaults``1(System.Data.IDbConnection,System.String,``0)">
            <summary>
                Query results using the non-default values in the supplied partially populated POCO example. E.g:
                <para>db.SelectNonDefaults("Age &gt; @Age", new Person { Age = 42 })</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteReadApi.SelectLazy``1(System.Data.IDbConnection)">
            <summary>
                Returns a lazily loaded stream of results. E.g:
                <para>db.SelectLazy&lt;Person&gt;()</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteReadApi.SelectLazy``1(System.Data.IDbConnection,System.String,System.Object)">
            <summary>
                Returns a lazily loaded stream of results using a parameterized query. E.g:
                <para>db.SelectLazy&lt;Person&gt;("Age &gt; @age", new { age = 40 })</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteReadApi.SelectLazy``1(System.Data.IDbConnection,TheOne.OrmLite.Core.Expressions.OrmLiteSqlExpression{``0})">
            <summary>
                Returns a lazily loaded stream of results using a parameterized query. E.g:
                <para>db.SelectLazy(db.From&lt;Person&gt;().Where(x =&gt; x == 40))</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteReadApi.WhereLazy``1(System.Data.IDbConnection,System.Object)">
            <summary>
                Returns a stream of results that are lazily loaded using a parameterized query. E.g:
                <para>db.WhereLazy&lt;Person&gt;(new { Age = 27 })</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteReadApi.Single``1(System.Data.IDbConnection,System.Object)">
            <summary>
                Returns the first result using a parameterized query. E.g:
                <para>db.Single&lt;Person&gt;(new { Age = 42 })</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteReadApi.Single``1(System.Data.IDbConnection,System.String,System.Collections.Generic.IEnumerable{System.Data.IDbDataParameter})">
            <summary>
                Returns results from using a single name, value filter. E.g:
                <para>db.Single&lt;Person&gt;("Age = @age", new[] { db.CreateParam("age",40) })</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteReadApi.Single``1(System.Data.IDbConnection,System.String,System.Object)">
            <summary>
                Returns results from using a single name, value filter. E.g:
                <para>db.Single&lt;Person&gt;("Age = @age", new { age = 42 })</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteReadApi.SingleById``1(System.Data.IDbConnection,System.Object)">
            <summary>
                Returns the first result using a primary key id. E.g:
                <para>db.SingleById&lt;Person&gt;(1)</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteReadApi.SingleWhere``1(System.Data.IDbConnection,System.String,System.Object)">
            <summary>
                Returns the first result using a name, value filter. E.g:
                <para>db.SingleWhere&lt;Person&gt;("Age", 42)</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteReadApi.Scalar``1(System.Data.IDbConnection,TheOne.OrmLite.Core.Expressions.IOrmLiteSqlExpression)">
            <summary>
                Returns a single scalar value using an SqlExpression. E.g:
                <para>db.Column&lt;int&gt;(db.From&lt;Person&gt;().Select(x => Sql.Count("*")).Where(q => q.Age > 40))</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteReadApi.Scalar``1(System.Data.IDbConnection,System.String,System.Collections.Generic.IEnumerable{System.Data.IDbDataParameter})">
            <summary>
                Returns a single scalar value using a parameterized query. E.g:
                <para>db.Scalar&lt;int&gt;("SELECT COUNT(*) FROM Person WHERE Age &gt; @age", new[] { db.CreateParam("age",40) })</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteReadApi.Scalar``1(System.Data.IDbConnection,System.String,System.Object)">
            <summary>
                Returns a single scalar value using a parameterized query. E.g:
                <para>db.Scalar&lt;int&gt;("SELECT COUNT(*) FROM Person WHERE Age &gt; @age", new { age = 40 })</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteReadApi.Column``1(System.Data.IDbConnection,TheOne.OrmLite.Core.Expressions.IOrmLiteSqlExpression)">
            <summary>
                Returns the distinct first column values in a HashSet using an SqlExpression. E.g:
                <para>db.Column&lt;int&gt;(db.From&lt;Person&gt;().Select(x => x.LastName).Where(q => q.Age == 27))</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteReadApi.Column``1(System.Data.IDbConnection,System.String,System.Collections.Generic.IEnumerable{System.Data.IDbDataParameter})">
            <summary>
                Returns the first column in a List using a SqlFormat query. E.g:
                <para>db.Column&lt;string&gt;("SELECT LastName FROM Person WHERE Age = @age", new[] { db.CreateParam("age",27) })</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteReadApi.ColumnLazy``1(System.Data.IDbConnection,TheOne.OrmLite.Core.Expressions.IOrmLiteSqlExpression)">
            <summary>
                Returns the distinct first column values in a HashSet using an SqlExpression. E.g:
                <para>db.ColumnLazy&lt;int&gt;(db.From&lt;Person&gt;().Select(x => x.LastName).Where(q => q.Age == 27))</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteReadApi.ColumnLazy``1(System.Data.IDbConnection,System.String,System.Collections.Generic.IEnumerable{System.Data.IDbDataParameter})">
            <summary>
                Returns the first column in a List using a SqlFormat query. E.g:
                <para>db.ColumnLazy&lt;string&gt;("SELECT LastName FROM Person WHERE Age = @age", new[] { db.CreateParam("age",27) })</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteReadApi.ColumnLazy``1(System.Data.IDbConnection,System.String,System.Object)">
            <summary>
                Returns the first column in a List using a SqlFormat query. E.g:
                <para>db.ColumnLazy&lt;string&gt;("SELECT LastName FROM Person WHERE Age = @age", new { age = 27 })</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteReadApi.Column``1(System.Data.IDbConnection,System.String,System.Object)">
            <summary>
                Returns the first column in a List using a SqlFormat query. E.g:
                <para>db.Column&lt;string&gt;("SELECT LastName FROM Person WHERE Age = @age", new { age = 27 })</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteReadApi.ColumnDistinct``1(System.Data.IDbConnection,TheOne.OrmLite.Core.Expressions.IOrmLiteSqlExpression)">
            <summary>
                Returns the distinct first column values in a HashSet using an SqlExpression. E.g:
                <para>db.ColumnDistinct&lt;int&gt;(db.From&lt;Person&gt;().Select(x => x.Age).Where(q => q.Age &lt; 50))</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteReadApi.ColumnDistinct``1(System.Data.IDbConnection,System.String,System.Object)">
            <summary>
                Returns the distinct first column values in a HashSet using an SqlFormat query. E.g:
                <para>db.ColumnDistinct&lt;int&gt;("SELECT Age FROM Person WHERE Age &lt; @age", new { age = 50 })</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteReadApi.ColumnDistinct``1(System.Data.IDbConnection,System.String,System.Collections.Generic.IEnumerable{System.Data.IDbDataParameter})">
            <summary>
                Returns the distinct first column values in a HashSet using an SqlFormat query. E.g:
                <para>db.ColumnDistinct&lt;int&gt;("SELECT Age FROM Person WHERE Age &lt; @age", new[] { db.CreateParam("age",50) })</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteReadApi.Lookup``2(System.Data.IDbConnection,TheOne.OrmLite.Core.Expressions.IOrmLiteSqlExpression)">
            <summary>
                Returns an Dictionary&lt;K, List&lt;V&gt;&gt; grouping made from the first two columns using an Sql Expression. E.g:
                <para>db.Lookup&lt;int, string&gt;(db.From&lt;Person&gt;().Select(x => new { x.Age, x.LastName }).Where(q => q.Age &lt; 50))</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteReadApi.Lookup``2(System.Data.IDbConnection,System.String,System.Collections.Generic.IEnumerable{System.Data.IDbDataParameter})">
            <summary>
                Returns an Dictionary&lt;K, List&lt;V&gt;&gt; grouping made from the first two columns using an parameterized query. E.g:
                <para>db.Lookup&lt;int, string&gt;("SELECT Age, LastName FROM Person WHERE Age &lt; @age", new[] { db.CreateParam("age",50) })</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteReadApi.Lookup``2(System.Data.IDbConnection,System.String,System.Object)">
            <summary>
                Returns an Dictionary&lt;K, List&lt;V&gt;&gt; grouping made from the first two columns using an parameterized query. E.g:
                <para>db.Lookup&lt;int, string&gt;("SELECT Age, LastName FROM Person WHERE Age &lt; @age", new { age = 50 })</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteReadApi.Dictionary``2(System.Data.IDbConnection,TheOne.OrmLite.Core.Expressions.IOrmLiteSqlExpression)">
            <summary>
                Returns a Dictionary from the first 2 columns: Column 1 (Keys), Column 2 (Values) using an SqlExpression. E.g:
                <para>db.Dictionary&lt;int, string&gt;(db.From&lt;Person&gt;().Select(x => new { x.Id, x.LastName }).Where(x => x.Age &lt; 50))</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteReadApi.Dictionary``2(System.Data.IDbConnection,System.String,System.Object)">
            <summary>
                Returns a Dictionary from the first 2 columns: Column 1 (Keys), Column 2 (Values) using sql. E.g:
                <para>db.Dictionary&lt;int, string&gt;("SELECT Id, LastName FROM Person WHERE Age &lt; @age", new { age = 50 })</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteReadApi.KeyValuePairs``2(System.Data.IDbConnection,TheOne.OrmLite.Core.Expressions.IOrmLiteSqlExpression)">
            <summary>
                Returns a list KeyValuePairs from the first 2 columns: Column 1 (Keys), Column 2 (Values) using an SqlExpression. E.g:
                <para>db.KeyValuePairs&lt;int, string&gt;(db.From&lt;Person&gt;().Select(x => new { x.Id, x.LastName }).Where(x => x.Age &lt; 50))</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteReadApi.KeyValuePairs``2(System.Data.IDbConnection,System.String,System.Object)">
            <summary>
                Returns a list of KeyValuePairs from the first 2 columns: Column 1 (Keys), Column 2 (Values) using sql. E.g:
                <para>db.KeyValuePairs&lt;int, string&gt;("SELECT Id, LastName FROM Person WHERE Age &lt; @age", new { age = 50 })</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteReadApi.Exists``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
                Returns true if the Query returns any records that match the LINQ expression, E.g:
                <para>db.Exists&lt;Person&gt;(x =&gt; x.Age &lt; 50)</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteReadApi.Exists``1(System.Data.IDbConnection,TheOne.OrmLite.Core.Expressions.OrmLiteSqlExpression{``0})">
            <summary>
                Returns true if the Query returns any records that match the supplied SqlExpression, E.g:
                <para>db.Exists(db.From&lt;Person&gt;().Where(x =&gt; x.Age &lt; 50))</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteReadApi.Exists``1(System.Data.IDbConnection,System.Object)">
            <summary>
                Returns true if the Query returns any records, using an SqlFormat query. E.g:
                <para>db.Exists&lt;Person&gt;(new { Age = 42 })</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteReadApi.Exists``1(System.Data.IDbConnection,System.String,System.Object)">
            <summary>
                Returns true if the Query returns any records, using a parameterized query. E.g:
                <para>db.Exists&lt;Person&gt;("Age = @age", new { age = 42 })</para>
                <para>db.Exists&lt;Person&gt;("SELECT * FROM Person WHERE Age = @age", new { age = 42 })</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteReadApi.SqlList``1(System.Data.IDbConnection,TheOne.OrmLite.Core.Expressions.IOrmLiteSqlExpression)">
            <summary>
                Returns results from an arbitrary SqlExpression. E.g:
                <para>db.SqlList&lt;Person&gt;(db.From&lt;Person&gt;().Select("*").Where(q => q.Age &lt; 50))</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteReadApi.SqlList``1(System.Data.IDbConnection,System.String,System.Collections.Generic.IEnumerable{System.Data.IDbDataParameter})">
            <summary>
                Returns results from an arbitrary parameterized raw sql query. E.g:
                <para>db.SqlList&lt;Person&gt;("EXEC GetRockStarsAged @age", new[] { db.CreateParam("age",50) })</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteReadApi.SqlList``1(System.Data.IDbConnection,System.String,System.Object)">
            <summary>
                Returns results from an arbitrary parameterized raw sql query. E.g:
                <para>db.SqlList&lt;Person&gt;("EXEC GetRockStarsAged @age", new { age = 50 })</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteReadApi.SqlList``1(System.Data.IDbConnection,System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
                Returns results from an arbitrary parameterized raw sql query. E.g:
                <para>db.SqlList&lt;Person&gt;("EXEC GetRockStarsAged @age", new Dictionary&lt;string, object&gt; { { "age", 42 } })</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteReadApi.SqlList``1(System.Data.IDbConnection,System.String,System.Action{System.Data.IDbCommand})">
            <summary>
                Returns results from an arbitrary parameterized raw sql query with a dbCmd filter. E.g:
                <para>db.SqlList&lt;Person&gt;("EXEC GetRockStarsAged @age", dbCmd => ...)</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteReadApi.SqlProc(System.Data.IDbConnection,System.String,System.Object,System.Boolean)">
            <summary>
                Prepare Stored Procedure with Input parameters, optionally populated with Input Params. E.g:
                <para>var cmd = db.SqlProc("GetRockStarsAged", new { age = 42 })</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteReadApi.SqlColumn``1(System.Data.IDbConnection,TheOne.OrmLite.Core.Expressions.IOrmLiteSqlExpression)">
            <summary>
                Returns the first column in a List using an SqlExpression. E.g:
                <para>db.SqlColumn&lt;string&gt;(db.From&lt;Person&gt;().Select(x => x.LastName).Where(q => q.Age &lt; 50))</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteReadApi.SqlColumn``1(System.Data.IDbConnection,System.String,System.Collections.Generic.IEnumerable{System.Data.IDbDataParameter})">
            <summary>
                Returns the first column in a List using a parameterized query. E.g:
                <para>db.SqlColumn&lt;string&gt;("SELECT LastName FROM Person WHERE Age &lt; @age", new[] { db.CreateParam("age",50) })</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteReadApi.SqlColumn``1(System.Data.IDbConnection,System.String,System.Object)">
            <summary>
                Returns the first column in a List using a parameterized query. E.g:
                <para>db.SqlColumn&lt;string&gt;("SELECT LastName FROM Person WHERE Age &lt; @age", new { age = 50 })</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteReadApi.SqlColumn``1(System.Data.IDbConnection,System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
                Returns the first column in a List using a parameterized query. E.g:
                <para>
                    db.SqlColumn&lt;string&gt;(
                    "SELECT LastName FROM Person WHERE Age &lt; @age",
                    new Dictionary&lt;string, object&gt;{ { "age", 50 } })
                </para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteReadApi.SqlScalar``1(System.Data.IDbConnection,TheOne.OrmLite.Core.Expressions.IOrmLiteSqlExpression)">
            <summary>
                Returns a single Scalar value using an SqlExpression. E.g:
                <para>db.SqlScalar&lt;int&gt;(db.From&lt;Person&gt;().Select(Sql.Count("*")).Where(q => q.Age &lt; 50))</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteReadApi.SqlScalar``1(System.Data.IDbConnection,System.String,System.Collections.Generic.IEnumerable{System.Data.IDbDataParameter})">
            <summary>
                Returns a single Scalar value using a parameterized query. E.g:
                <para>db.SqlScalar&lt;int&gt;("SELECT COUNT(*) FROM Person WHERE Age &lt; @age", new[]{ db.CreateParam("age",50) })</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteReadApi.SqlScalar``1(System.Data.IDbConnection,System.String,System.Object)">
            <summary>
                Returns a single Scalar value using a parameterized query. E.g:
                <para>db.SqlScalar&lt;int&gt;("SELECT COUNT(*) FROM Person WHERE Age &lt; @age", new { age = 50 })</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteReadApi.SqlScalar``1(System.Data.IDbConnection,System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
                Returns a single Scalar value using a parameterized query. E.g:
                <para>
                    db.SqlScalar&lt;int&gt;("SELECT COUNT(*) FROM Person WHERE Age &lt; @age", new Dictionary&lt;string, object&gt;{ { "age", 50 } })
                </para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteReadApi.ExecuteNonQuery(System.Data.IDbConnection,System.String)">
            <summary>
                Executes a raw sql non-query using sql. E.g:
                <para>var rowsAffected = db.ExecuteNonQuery("UPDATE Person SET LastName={0} WHERE Id={1}".SqlFormat("WaterHouse", 7))</para>
            </summary>
            <returns>number of rows affected</returns>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteReadApi.ExecuteNonQuery(System.Data.IDbConnection,System.String,System.Object)">
            <summary>
                Executes a raw sql non-query using a parameterized query. E.g:
                <para>var rowsAffected = db.ExecuteNonQuery("UPDATE Person SET LastName=@name WHERE Id=@id", new { name = "WaterHouse", id = 7 })</para>
            </summary>
            <returns>number of rows affected</returns>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteReadApi.ExecuteNonQuery(System.Data.IDbConnection,System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
                Executes a raw sql non-query using a parameterized query.
            </summary>
            <returns>number of rows affected</returns>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteReadApi.ExecuteNonQuery(System.Data.IDbConnection,System.String,System.Action{System.Data.IDbCommand})">
            <summary>
                Executes a raw sql non-query using a parameterized query with a dbCmd filter. E.g:
            </summary>
            <returns>number of rows affected</returns>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteReadApi.SqlProcedure``1(System.Data.IDbConnection,System.Object)">
            <summary>
                Returns results from a Stored Procedure, using a parameterized query.
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteReadApi.SqlProcedure``1(System.Data.IDbConnection,System.Object,System.String,System.Object[])">
            <summary>
                Returns results from a Stored Procedure using an SqlFormat query. E.g:
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteReadApi.LongScalar(System.Data.IDbConnection)">
            <summary>
                Returns the scalar result as a long.
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteReadApi.LoadSingleById``1(System.Data.IDbConnection,System.Object,System.String[])">
            <summary>
                Returns the first result with all its references loaded, using a primary key id. E.g:
                <para>db.LoadSingleById&lt;Person&gt;(1, include = new[]{ "Address" })</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteReadApi.LoadSingleById``1(System.Data.IDbConnection,System.Object,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
                Returns the first result with all its references loaded, using a primary key id. E.g:
                <para>db.LoadSingleById&lt;Person&gt;(1, include = x => new{ x.Address })</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteReadApi.LoadReferences``1(System.Data.IDbConnection,``0)">
            <summary>
                Loads all the related references onto the instance. E.g:
                <para>db.LoadReferences(customer)</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteReadApiAsync.SelectAsync``1(System.Data.IDbConnection,System.Threading.CancellationToken)">
            <summary>
                Returns results from the active connection, E.g:
                <para>db.SelectAsync&lt;Person&gt;()</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteReadApiAsync.SelectAsync``1(System.Data.IDbConnection,System.String,System.Threading.CancellationToken)">
            <summary>
                Returns results from using sql. E.g:
                <para>db.SelectAsync&lt;Person&gt;("Age &gt; 40")</para>
                <para>db.SelectAsync&lt;Person&gt;("SELECT * FROM Person WHERE Age &gt; 40")</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteReadApiAsync.SelectAsync``1(System.Data.IDbConnection,System.String,System.Collections.Generic.IEnumerable{System.Data.IDbDataParameter},System.Threading.CancellationToken)">
            <summary>
                Returns results from using a parameterized query. E.g:
                <para>db.SelectAsync&lt;Person&gt;("Age &gt; @age", new { age = 40})</para>
                <para>db.SelectAsync&lt;Person&gt;("SELECT * FROM Person WHERE Age &gt; @age", new[] { db.CreateParam("age",40) })</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteReadApiAsync.SelectAsync``1(System.Data.IDbConnection,System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
                Returns results from using a parameterized query. E.g:
                <para>db.SelectAsync&lt;Person&gt;("Age &gt; @age", new { age = 40})</para>
                <para>db.SelectAsync&lt;Person&gt;("SELECT * FROM Person WHERE Age &gt; @age", new { age = 40})</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteReadApiAsync.SelectAsync``1(System.Data.IDbConnection,System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
                Returns results from using a parameterized query. E.g:
                <para>db.SelectAsync&lt;Person&gt;("Age &gt; @age", new Dictionary&lt;string, object&gt; { { "age", 40 } })</para>
                <para>db.SelectAsync&lt;Person&gt;("SELECT * FROM Person WHERE Age &gt; @age", new Dictionary&lt;string, object&gt; { { "age", 40 } })</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteReadApiAsync.SelectAsync``1(System.Data.IDbConnection,System.Type,System.Threading.CancellationToken)">
            <summary>
                Returns a partial subset of results from the specified tableType. E.g:
                <para>db.SelectAsync&lt;EntityWithId&gt;(typeof(Person))</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteReadApiAsync.SelectAsync``1(System.Data.IDbConnection,System.Type,System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
                Returns a partial subset of results from the specified tableType. E.g:
                <para>db.SelectAsync&lt;EntityWithId&gt;(typeof(Person), "Age = @age", new { age = 27 })</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteReadApiAsync.WhereAsync``1(System.Data.IDbConnection,System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
                Returns results from using a single name, value filter. E.g:
                <para>db.WhereAsync&lt;Person&gt;("Age", 27)</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteReadApiAsync.WhereAsync``1(System.Data.IDbConnection,System.Object,System.Threading.CancellationToken)">
            <summary>
                Returns results from using an anonymous type filter. E.g:
                <para>db.WhereAsync&lt;Person&gt;(new { Age = 27 })</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteReadApiAsync.SelectByIdsAsync``1(System.Data.IDbConnection,System.Collections.IEnumerable,System.Threading.CancellationToken)">
            <summary>
                Returns results using the supplied primary key ids. E.g:
                <para>db.SelectByIdsAsync&lt;Person&gt;(new[] { 1, 2, 3 })</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteReadApiAsync.SelectNonDefaultsAsync``1(System.Data.IDbConnection,``0,System.Threading.CancellationToken)">
            <summary>
                Query results using the non-default values in the supplied partially populated POCO example. E.g:
                <para>db.SelectNonDefaultsAsync(new Person { Id = 1 })</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteReadApiAsync.SelectNonDefaultsAsync``1(System.Data.IDbConnection,System.String,``0,System.Threading.CancellationToken)">
            <summary>
                Query results using the non-default values in the supplied partially populated POCO example. E.g:
                <para>db.SelectNonDefaultsAsync("Age &gt; @Age", new Person { Age = 42 })</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteReadApiAsync.SingleAsync``1(System.Data.IDbConnection,System.Object,System.Threading.CancellationToken)">
            <summary>
                Returns the first result using a parameterized query. E.g:
                <para>db.SingleAsync&lt;Person&gt;(new { Age = 42 })</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteReadApiAsync.SingleAsync``1(System.Data.IDbConnection,System.String,System.Collections.Generic.IEnumerable{System.Data.IDbDataParameter},System.Threading.CancellationToken)">
            <summary>
                Returns results from using a single name, value filter. E.g:
                <para>db.SingleAsync&lt;Person&gt;("Age = @age", new[] { db.CreateParam("age",42) })</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteReadApiAsync.SingleAsync``1(System.Data.IDbConnection,System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
                Returns results from using a single name, value filter. E.g:
                <para>db.SingleAsync&lt;Person&gt;("Age = @age", new { age = 42 })</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteReadApiAsync.SingleByIdAsync``1(System.Data.IDbConnection,System.Object,System.Threading.CancellationToken)">
            <summary>
                Returns the first result using a primary key id. E.g:
                <para>db.SingleByIdAsync&lt;Person&gt;(1)</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteReadApiAsync.SingleWhereAsync``1(System.Data.IDbConnection,System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
                Returns the first result using a name, value filter. E.g:
                <para>db.SingleWhereAsync&lt;Person&gt;("Age", 42)</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteReadApiAsync.ScalarAsync``1(System.Data.IDbConnection,TheOne.OrmLite.Core.Expressions.IOrmLiteSqlExpression,System.Threading.CancellationToken)">
            <summary>
                Returns a single scalar value using an SqlExpression. E.g:
                <para>db.ScalarAsync&lt;int&gt;(db.From&lt;Person&gt;().Select(x => Sql.Count("*")).Where(q => q.Age > 40))</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteReadApiAsync.ScalarAsync``1(System.Data.IDbConnection,System.String,System.Collections.Generic.IEnumerable{System.Data.IDbDataParameter},System.Threading.CancellationToken)">
            <summary>
                Returns a single scalar value using a parameterized query. E.g:
                <para>db.ScalarAsync&lt;int&gt;("SELECT COUNT(*) FROM Person WHERE Age &gt; @age", new[] { db.CreateParam("age",40) })</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteReadApiAsync.ScalarAsync``1(System.Data.IDbConnection,System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
                Returns a single scalar value using a parameterized query. E.g:
                <para>db.ScalarAsync&lt;int&gt;("SELECT COUNT(*) FROM Person WHERE Age &gt; @age", new { age = 40 })</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteReadApiAsync.ColumnAsync``1(System.Data.IDbConnection,TheOne.OrmLite.Core.Expressions.IOrmLiteSqlExpression,System.Threading.CancellationToken)">
            <summary>
                Returns the distinct first column values in a HashSet using an SqlExpression. E.g:
                <para>db.ColumnAsync&lt;int&gt;(db.From&lt;Person&gt;().Select(x => x.LastName).Where(q => q.Age == 27))</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteReadApiAsync.ColumnAsync``1(System.Data.IDbConnection,System.String,System.Collections.Generic.IEnumerable{System.Data.IDbDataParameter},System.Threading.CancellationToken)">
            <summary>
                Returns the first column in a List using a SqlFormat query. E.g:
                <para>db.ColumnAsync&lt;string&gt;("SELECT LastName FROM Person WHERE Age = @age", new[] { db.CreateParam("age",27) })</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteReadApiAsync.ColumnAsync``1(System.Data.IDbConnection,System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
                Returns the first column in a List using a SqlFormat query. E.g:
                <para>db.ColumnAsync&lt;string&gt;("SELECT LastName FROM Person WHERE Age = @age", new { age = 27 })</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteReadApiAsync.ColumnDistinctAsync``1(System.Data.IDbConnection,TheOne.OrmLite.Core.Expressions.IOrmLiteSqlExpression,System.Threading.CancellationToken)">
            <summary>
                Returns the distinct first column values in a HashSet using an SqlExpression. E.g:
                <para>db.ColumnDistinctAsync&lt;int&gt;(db.From&lt;Person&gt;().Select(x => x.Age).Where(q => q.Age &lt; 50))</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteReadApiAsync.ColumnDistinctAsync``1(System.Data.IDbConnection,System.String,System.Collections.Generic.IEnumerable{System.Data.IDbDataParameter},System.Threading.CancellationToken)">
            <summary>
                Returns the distinct first column values in a HashSet using an SqlFormat query. E.g:
                <para>db.ColumnDistinctAsync&lt;int&gt;("SELECT Age FROM Person WHERE Age &lt; @age", new[] { db.CreateParam("age",50) })</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteReadApiAsync.ColumnDistinctAsync``1(System.Data.IDbConnection,System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
                Returns the distinct first column values in a HashSet using an SqlFormat query. E.g:
                <para>db.ColumnDistinctAsync&lt;int&gt;("SELECT Age FROM Person WHERE Age &lt; @age", new { age = 50 })</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteReadApiAsync.LookupAsync``2(System.Data.IDbConnection,TheOne.OrmLite.Core.Expressions.IOrmLiteSqlExpression,System.Threading.CancellationToken)">
            <summary>
                Returns an Dictionary&lt;K, List&lt;V&gt;&gt; grouping made from the first two columns using an Sql Expression. E.g:
                <para>db.LookupAsync&lt;int, string&gt;(db.From&lt;Person&gt;().Select(x => new { x.Age, x.LastName }).Where(q => q.Age &lt; 50))</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteReadApiAsync.LookupAsync``2(System.Data.IDbConnection,System.String,System.Collections.Generic.IEnumerable{System.Data.IDbDataParameter},System.Threading.CancellationToken)">
            <summary>
                Returns an Dictionary&lt;K, List&lt;V&gt;&gt; grouping made from the first two columns using an parameterized query. E.g:
                <para>db.LookupAsync&lt;int, string&gt;("SELECT Age, LastName FROM Person WHERE Age &lt; @age", new[] { db.CreateParam("age",50) })</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteReadApiAsync.LookupAsync``2(System.Data.IDbConnection,System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
                Returns an Dictionary&lt;K, List&lt;V&gt;&gt; grouping made from the first two columns using an parameterized query. E.g:
                <para>db.LookupAsync&lt;int, string&gt;("SELECT Age, LastName FROM Person WHERE Age &lt; @age", new { age = 50 })</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteReadApiAsync.DictionaryAsync``2(System.Data.IDbConnection,TheOne.OrmLite.Core.Expressions.IOrmLiteSqlExpression,System.Threading.CancellationToken)">
            <summary>
                Returns a Dictionary from the first 2 columns: Column 1 (Keys), Column 2 (Values) using an SqlExpression. E.g:
                <para>db.DictionaryAsync&lt;int, string&gt;(db.From&lt;Person&gt;().Select(x => new { x.Id, x.LastName }).Where(x => x.Age &lt; 50))</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteReadApiAsync.DictionaryAsync``2(System.Data.IDbConnection,System.String,System.Collections.Generic.IEnumerable{System.Data.IDbDataParameter},System.Threading.CancellationToken)">
            <summary>
                Returns a Dictionary from the first 2 columns: Column 1 (Keys), Column 2 (Values) using sql. E.g:
                <para>db.DictionaryAsync&lt;int, string&gt;("SELECT Id, LastName FROM Person WHERE Age &lt; @age", new[] { db.CreateParam("age",50) })</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteReadApiAsync.KeyValuePairsAsync``2(System.Data.IDbConnection,TheOne.OrmLite.Core.Expressions.IOrmLiteSqlExpression,System.Threading.CancellationToken)">
            <summary>
                Returns a list of KeyValuePairs from the first 2 columns: Column 1 (Keys), Column 2 (Values) using an SqlExpression. E.g:
                <para>db.KeyValuePairsAsync&lt;int, string&gt;(db.From&lt;Person&gt;().Select(x => new { x.Id, x.LastName }).Where(x => x.Age &lt; 50))</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteReadApiAsync.KeyValuePairsAsync``2(System.Data.IDbConnection,System.String,System.Collections.Generic.IEnumerable{System.Data.IDbDataParameter},System.Threading.CancellationToken)">
            <summary>
                Returns a list of KeyValuePairs from the first 2 columns: Column 1 (Keys), Column 2 (Values) using sql. E.g:
                <para>
                    db.KeyValuePairsAsync&lt;int, string&gt;("SELECT Id, LastName FROM Person WHERE Age &lt; @age", new[] { db.CreateParam("age",50)})
                </para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteReadApiAsync.KeyValuePairsAsync``2(System.Data.IDbConnection,System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
                Returns a list of KeyValuePairs from the first 2 columns: Column 1 (Keys), Column 2 (Values) using sql. E.g:
                <para>db.KeyValuePairsAsync&lt;int, string&gt;("SELECT Id, LastName FROM Person WHERE Age &lt; @age", new { age = 50 })</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteReadApiAsync.DictionaryAsync``2(System.Data.IDbConnection,System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
                Returns a Dictionary from the first 2 columns: Column 1 (Keys), Column 2 (Values) using sql. E.g:
                <para>db.DictionaryAsync&lt;int, string&gt;("SELECT Id, LastName FROM Person WHERE Age &lt; @age", new { age = 50 })</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteReadApiAsync.ExistsAsync``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
                Returns true if the Query returns any records that match the LINQ expression, E.g:
                <para>db.ExistsAsync&lt;Person&gt;(x =&gt; x.Age &lt; 50)</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteReadApiAsync.ExistsAsync``1(System.Data.IDbConnection,TheOne.OrmLite.Core.Expressions.OrmLiteSqlExpression{``0},System.Threading.CancellationToken)">
            <summary>
                Returns true if the Query returns any records that match the supplied SqlExpression, E.g:
                <para>db.ExistsAsync(db.From&lt;Person&gt;().Where(x =&gt; x.Age &lt; 50))</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteReadApiAsync.ExistsAsync``1(System.Data.IDbConnection,System.Object,System.Threading.CancellationToken)">
            <summary>
                Returns true if the Query returns any records, using an SqlFormat query. E.g:
                <para>db.ExistsAsync&lt;Person&gt;(new { Age = 42 })</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteReadApiAsync.ExistsAsync``1(System.Data.IDbConnection,System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
                Returns true if the Query returns any records, using a parameterized query. E.g:
                <para>db.ExistsAsync&lt;Person&gt;("Age = @age", new { age = 42 })</para>
                <para>db.ExistsAsync&lt;Person&gt;("SELECT * FROM Person WHERE Age = @age", new { age = 42 })</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteReadApiAsync.SqlListAsync``1(System.Data.IDbConnection,TheOne.OrmLite.Core.Expressions.IOrmLiteSqlExpression,System.Threading.CancellationToken)">
            <summary>
                Returns results from an arbitrary SqlExpression. E.g:
                <para>db.SqlListAsync&lt;Person&gt;(db.From&lt;Person&gt;().Select("*").Where(q => q.Age &lt; 50))</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteReadApiAsync.SqlListAsync``1(System.Data.IDbConnection,System.String,System.Collections.Generic.IEnumerable{System.Data.IDbDataParameter},System.Threading.CancellationToken)">
            <summary>
                Returns results from an arbitrary parameterized raw sql query. E.g:
                <para>db.SqlListAsync&lt;Person&gt;("EXEC GetRockStarsAged @age", new { age = 50 })</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteReadApiAsync.SqlListAsync``1(System.Data.IDbConnection,System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
                Returns results from an arbitrary parameterized raw sql query. E.g:
                <para>db.SqlListAsync&lt;Person&gt;("EXEC GetRockStarsAged @age", new { age = 50 })</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteReadApiAsync.SqlListAsync``1(System.Data.IDbConnection,System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
                Returns results from an arbitrary parameterized raw sql query. E.g:
                <para>db.SqlListAsync&lt;Person&gt;("EXEC GetRockStarsAged @age", new Dictionary&lt;string, object&gt; { { "age", 42 } })</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteReadApiAsync.SqlListAsync``1(System.Data.IDbConnection,System.String,System.Action{System.Data.IDbCommand},System.Threading.CancellationToken)">
            <summary>
                Returns results from an arbitrary parameterized raw sql query with a dbCmd filter. E.g:
                <para>db.SqlListAsync&lt;Person&gt;("EXEC GetRockStarsAged @age", dbCmd => ...)</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteReadApiAsync.SqlColumnAsync``1(System.Data.IDbConnection,TheOne.OrmLite.Core.Expressions.IOrmLiteSqlExpression,System.Threading.CancellationToken)">
            <summary>
                Returns the first column in a List using an SqlExpression. E.g:
                <para>db.SqlColumnAsync&lt;string&gt;(db.From&lt;Person&gt;().Select(x => x.LastName).Where(q => q.Age &lt; 50))</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteReadApiAsync.SqlColumnAsync``1(System.Data.IDbConnection,System.String,System.Collections.Generic.IEnumerable{System.Data.IDbDataParameter},System.Threading.CancellationToken)">
            <summary>
                Returns the first column in a List using a parameterized query. E.g:
                <para>db.SqlColumnAsync&lt;string&gt;("SELECT LastName FROM Person WHERE Age &lt; @age", new[] { db.CreateParam("age",50) })</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteReadApiAsync.SqlColumnAsync``1(System.Data.IDbConnection,System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
                Returns the first column in a List using a parameterized query. E.g:
                <para>db.SqlColumnAsync&lt;string&gt;("SELECT LastName FROM Person WHERE Age &lt; @age", new { age = 50 })</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteReadApiAsync.SqlColumnAsync``1(System.Data.IDbConnection,System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
                Returns the first column in a List using a parameterized query. E.g:
                <para>
                    db.SqlColumnAsync&lt;string&gt;(
                    "SELECT LastName FROM Person WHERE Age &lt; @age",
                    new Dictionary&lt;string, object&gt;{ { "age", 50 } })
                </para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteReadApiAsync.SqlScalarAsync``1(System.Data.IDbConnection,TheOne.OrmLite.Core.Expressions.IOrmLiteSqlExpression,System.Threading.CancellationToken)">
            <summary>
                Returns a single Scalar value using an SqlExpression. E.g:
                <para>db.SqlScalar&lt;int&gt;(db.From&lt;Person&gt;().Select(Sql.Count("*")).Where(q => q.Age &lt; 50))</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteReadApiAsync.SqlScalarAsync``1(System.Data.IDbConnection,System.String,System.Collections.Generic.IEnumerable{System.Data.IDbDataParameter},System.Threading.CancellationToken)">
            <summary>
                Returns a single Scalar value using a parameterized query. E.g:
                <para>db.SqlScalarAsync&lt;int&gt;("SELECT COUNT(*) FROM Person WHERE Age &lt; @age", new[] { db.CreateParam("age",50) })</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteReadApiAsync.SqlScalarAsync``1(System.Data.IDbConnection,System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
                Returns a single Scalar value using a parameterized query. E.g:
                <para>db.SqlScalarAsync&lt;int&gt;("SELECT COUNT(*) FROM Person WHERE Age &lt; @age", new { age = 50 })</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteReadApiAsync.SqlScalarAsync``1(System.Data.IDbConnection,System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
                Returns a single Scalar value using a parameterized query. E.g:
                <para>
                    db.SqlScalarAsync&lt;int&gt;("SELECT COUNT(*) FROM Person WHERE Age &lt; @age", new Dictionary&lt;string, object&gt;{ { "age", 50
                    } })
                </para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteReadApiAsync.ExecuteNonQueryAsync(System.Data.IDbConnection,System.String,System.Threading.CancellationToken)">
            <summary>
                Executes a raw sql non-query using sql. E.g:
                <para>var rowsAffected = db.ExecuteNonQueryAsync("UPDATE Person SET LastName={0} WHERE Id={1}".SqlFormat("WaterHouse", 7))</para>
            </summary>
            <returns>number of rows affected</returns>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteReadApiAsync.ExecuteNonQueryAsync(System.Data.IDbConnection,System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
                Executes a raw sql non-query using a parameterized query. E.g:
                <para>var rowsAffected = db.ExecuteNonQueryAsync("UPDATE Person SET LastName=@name WHERE Id=@id", new { name = "WaterHouse", id = 7 })</para>
            </summary>
            <returns>number of rows affected</returns>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteReadApiAsync.ExecuteNonQueryAsync(System.Data.IDbConnection,System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
                Executes a raw sql non-query using a parameterized query.
            </summary>
            <returns>number of rows affected</returns>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteReadApiAsync.SqlProcedureAsync``1(System.Data.IDbConnection,System.Object,System.Threading.CancellationToken)">
            <summary>
                Returns results from a Stored Procedure, using a parameterized query.
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteReadApiAsync.LongScalarAsync(System.Data.IDbConnection,System.Threading.CancellationToken)">
            <summary>
                Returns the scalar result as a <see langword="long" />.
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteReadApiAsync.LoadSingleByIdAsync``1(System.Data.IDbConnection,System.Object,System.String[],System.Threading.CancellationToken)">
            <summary>
                Returns the first result with all its references loaded, using a primary key id. E.g:
                <para>db.LoadSingleByIdAsync&lt;Person&gt;(1)</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteReadApiAsync.LoadSingleByIdAsync``1(System.Data.IDbConnection,System.Object,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Threading.CancellationToken)">
            <summary>
                Returns the first result with all its references loaded, using a primary key id. E.g:
                <para>db.LoadSingleByIdAsync&lt;Person&gt;(1, include = x => new { x.Address })</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteReadApiAsync.LoadReferencesAsync``1(System.Data.IDbConnection,``0,System.String[],System.Threading.CancellationToken)">
            <summary>
                Loads all the related references onto the instance. E.g:
                <para>db.LoadReferencesAsync(customer)</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteReadExpressionsApi.From``1(System.Data.IDbConnection)">
            <summary>
                Creates a new SqlExpression builder allowing typed LINQ-like queries.
                Alias for SqlExpression.
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteReadExpressionsApi.From``1(System.Data.IDbConnection,System.String)">
            <summary>
                Creates a new SqlExpression builder for the specified type using a user-defined FROM sql expression.
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteReadExpressionsApi.OpenTransaction(System.Data.IDbConnection)">
            <summary>
                Open a Transaction in OrmLite
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteReadExpressionsApi.OpenTransaction(System.Data.IDbConnection,System.Data.IsolationLevel)">
            <summary>
                Open a Transaction in OrmLite
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteReadExpressionsApi.OpenCommand(System.Data.IDbConnection)">
            <summary>
                Create a managed OrmLite IDbCommand
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteReadExpressionsApi.Select``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
                Returns results from using a LINQ Expression. E.g:
                <para>db.Select&lt;Person&gt;(x =&gt; x.Age &gt; 40)</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteReadExpressionsApi.Select``1(System.Data.IDbConnection,TheOne.OrmLite.Core.Expressions.OrmLiteSqlExpression{``0})">
            <summary>
                Returns results from using an SqlExpression lambda. E.g:
                <para>db.Select(db.From&lt;Person&gt;().Where(x =&gt; x.Age &gt; 40))</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteReadExpressionsApi.Select``1(System.Data.IDbConnection,TheOne.OrmLite.Core.Expressions.IOrmLiteSqlExpression,System.Object)">
            <summary>
                Returns results from using an SqlExpression lambda. E.g:
                <para>db.Select(db.From&lt;Person&gt;().Where(x =&gt; x.Age &gt; 40))</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteReadExpressionsApi.Single``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
                Returns a single result from using a LINQ Expression. E.g:
                <para>db.Single&lt;Person&gt;(x =&gt; x.Age == 42)</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteReadExpressionsApi.Single``1(System.Data.IDbConnection,TheOne.OrmLite.Core.Expressions.OrmLiteSqlExpression{``0})">
            <summary>
                Returns results from using an SqlExpression lambda. E.g:
                <para>db.Select&lt;Person&gt;(x =&gt; x.Age &gt; 40)</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteReadExpressionsApi.Single``1(System.Data.IDbConnection,TheOne.OrmLite.Core.Expressions.IOrmLiteSqlExpression)">
            <summary>
                Returns results from using an SqlExpression lambda. E.g:
                <para>db.Single(db.From&lt;Person&gt;().Where(x =&gt; x.Age &gt; 40))</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteReadExpressionsApi.Scalar``2(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
                Returns a scalar result from using an SqlExpression lambda. E.g:
                <para>db.Scalar&lt;Person, int&gt;(x =&gt; Sql.Max(x.Age))</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteReadExpressionsApi.Scalar``2(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
                Returns a scalar result from using an SqlExpression lambda. E.g:
                <para>db.Scalar&lt;Person, int&gt;(x =&gt; Sql.Max(x.Age), , x =&gt; x.Age &lt; 50)</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteReadExpressionsApi.Count``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
                Returns the count of rows that match the LINQ expression, E.g:
                <para>db.Count&lt;Person&gt;(x =&gt; x.Age &lt; 50)</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteReadExpressionsApi.Count``1(System.Data.IDbConnection,TheOne.OrmLite.Core.Expressions.OrmLiteSqlExpression{``0})">
            <summary>
                Returns the count of rows that match the supplied SqlExpression, E.g:
                <para>db.Count(db.From&lt;Person&gt;().Where(x =&gt; x.Age &lt; 50))</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteReadExpressionsApi.RowCount``1(System.Data.IDbConnection,TheOne.OrmLite.Core.Expressions.OrmLiteSqlExpression{``0})">
            <summary>
                Return the number of rows returned by the supplied expression
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteReadExpressionsApi.RowCount(System.Data.IDbConnection,System.String,System.Object)">
            <summary>
                Return the number of rows returned by the supplied sql
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteReadExpressionsApi.RowCount(System.Data.IDbConnection,System.String,System.Collections.Generic.IEnumerable{System.Data.IDbDataParameter})">
            <summary>
                Return the number of rows returned by the supplied sql and db params
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteReadExpressionsApi.LoadSelect``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String[])">
            <summary>
                Returns results with references from using a LINQ Expression. E.g:
                <para>db.LoadSelect&lt;Person&gt;(x =&gt; x.Age &gt; 40)</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteReadExpressionsApi.LoadSelect``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
                Returns results with references from using a LINQ Expression. E.g:
                <para>db.LoadSelect&lt;Person&gt;(x =&gt; x.Age &gt; 40, include: x => new { x.PrimaryAddress })</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteReadExpressionsApi.LoadSelect``1(System.Data.IDbConnection,TheOne.OrmLite.Core.Expressions.OrmLiteSqlExpression{``0},System.String[])">
            <summary>
                Returns results with references from using an SqlExpression lambda. E.g:
                <para>db.LoadSelect(db.From&lt;Person&gt;().Where(x =&gt; x.Age &gt; 40))</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteReadExpressionsApi.LoadSelect``1(System.Data.IDbConnection,TheOne.OrmLite.Core.Expressions.OrmLiteSqlExpression{``0},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
                Returns results with references from using an SqlExpression lambda. E.g:
                <para>db.LoadSelect(db.From&lt;Person&gt;().Where(x =&gt; x.Age &gt; 40), include:q.OnlyFields)</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteReadExpressionsApi.LoadSelect``1(System.Data.IDbConnection,TheOne.OrmLite.Core.Expressions.OrmLiteSqlExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
                Returns results with references from using an SqlExpression lambda. E.g:
                <para>db.LoadSelect(db.From&lt;Person&gt;().Where(x =&gt; x.Age &gt; 40), include: x => new { x.PrimaryAddress })</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteReadExpressionsApi.LoadSelect``2(System.Data.IDbConnection,TheOne.OrmLite.Core.Expressions.OrmLiteSqlExpression{``1},System.String[])">
            <summary>
                Project results with references from a number of joined tables into a different model
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteReadExpressionsApi.LoadSelect``2(System.Data.IDbConnection,TheOne.OrmLite.Core.Expressions.OrmLiteSqlExpression{``1},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
                Project results with references from a number of joined tables into a different model
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteReadExpressionsApi.LoadSelect``2(System.Data.IDbConnection,TheOne.OrmLite.Core.Expressions.OrmLiteSqlExpression{``1},System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
                Project results with references from a number of joined tables into a different model
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteReadExpressionsApiAsync.SelectAsync``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
                Returns results from using a LINQ Expression. E.g:
                <para>db.Select&lt;Person&gt;(x =&gt; x.Age &gt; 40)</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteReadExpressionsApiAsync.SelectAsync``1(System.Data.IDbConnection,TheOne.OrmLite.Core.Expressions.OrmLiteSqlExpression{``0},System.Threading.CancellationToken)">
            <summary>
                Returns results from using an SqlExpression lambda. E.g:
                <para>db.Select(db.From&lt;Person&gt;().Where(x =&gt; x.Age &gt; 40))</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteReadExpressionsApiAsync.SelectAsync``2(System.Data.IDbConnection,TheOne.OrmLite.Core.Expressions.OrmLiteSqlExpression{``1},System.Threading.CancellationToken)">
            <summary>
                Project results from a number of joined tables into a different model
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteReadExpressionsApiAsync.SelectAsync``1(System.Data.IDbConnection,TheOne.OrmLite.Core.Expressions.IOrmLiteSqlExpression,System.Threading.CancellationToken)">
            <summary>
                Returns results from using an SqlExpression lambda. E.g:
                <para>db.SelectAsync(db.From&lt;Person&gt;().Where(x =&gt; x.Age &gt; 40))</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteReadExpressionsApiAsync.SingleAsync``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
                Returns a single result from using a LINQ Expression. E.g:
                <para>db.Single&lt;Person&gt;(x =&gt; x.Age == 42)</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteReadExpressionsApiAsync.SingleAsync``1(System.Data.IDbConnection,TheOne.OrmLite.Core.Expressions.OrmLiteSqlExpression{``0},System.Threading.CancellationToken)">
            <summary>
                Returns results from using an SqlExpression lambda. E.g:
                <para>db.SingleAsync&lt;Person&gt;(x =&gt; x.Age &gt; 40)</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteReadExpressionsApiAsync.SingleAsync``1(System.Data.IDbConnection,TheOne.OrmLite.Core.Expressions.IOrmLiteSqlExpression,System.Threading.CancellationToken)">
            <summary>
                Returns results from using an SqlExpression lambda. E.g:
                <para>db.SingleAsync(db.From&lt;Person&gt;().Where(x =&gt; x.Age &gt; 40))</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteReadExpressionsApiAsync.ScalarAsync``2(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Threading.CancellationToken)">
            <summary>
                Returns a scalar result from using an SqlExpression lambda. E.g:
                <para>db.Scalar&lt;Person, int&gt;(x =&gt; Sql.Max(x.Age))</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteReadExpressionsApiAsync.ScalarAsync``2(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
                Returns a scalar result from using an SqlExpression lambda. E.g:
                <para>db.Scalar&lt;Person, int&gt;(x =&gt; Sql.Max(x.Age), , x =&gt; x.Age &lt; 50)</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteReadExpressionsApiAsync.CountAsync``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
                Returns the count of rows that match the LINQ expression, E.g:
                <para>db.Count&lt;Person&gt;(x =&gt; x.Age &lt; 50)</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteReadExpressionsApiAsync.CountAsync``1(System.Data.IDbConnection,TheOne.OrmLite.Core.Expressions.OrmLiteSqlExpression{``0},System.Threading.CancellationToken)">
            <summary>
                Returns the count of rows that match the supplied SqlExpression, E.g:
                <para>db.Count(db.From&lt;Person&gt;().Where(x =&gt; x.Age &lt; 50))</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteReadExpressionsApiAsync.RowCountAsync``1(System.Data.IDbConnection,TheOne.OrmLite.Core.Expressions.OrmLiteSqlExpression{``0},System.Threading.CancellationToken)">
            <summary>
                Return the number of rows returned by the supplied expression
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteReadExpressionsApiAsync.RowCountAsync(System.Data.IDbConnection,System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
                Return the number of rows returned by the supplied sql
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteReadExpressionsApiAsync.LoadSelectAsync``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String[],System.Threading.CancellationToken)">
            <summary>
                Returns results with references from using a LINQ Expression. E.g:
                <para>db.LoadSelectAsync&lt;Person&gt;(x =&gt; x.Age &gt; 40)</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteReadExpressionsApiAsync.LoadSelectAsync``1(System.Data.IDbConnection,TheOne.OrmLite.Core.Expressions.OrmLiteSqlExpression{``0},System.String[],System.Threading.CancellationToken)">
            <summary>
                Returns results with references from using an SqlExpression lambda. E.g:
                <para>db.LoadSelectAsync(db.From&lt;Person&gt;().Where(x =&gt; x.Age &gt; 40))</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteReadExpressionsApiAsync.LoadSelectAsync``2(System.Data.IDbConnection,TheOne.OrmLite.Core.Expressions.OrmLiteSqlExpression{``1},System.String[],System.Threading.CancellationToken)">
            <summary>
                Project results with references from a number of joined tables into a different model
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteSchemaApi.TableExists(System.Data.IDbConnection,System.String,System.String)">
            <summary>
                Checks whether a Table Exists. E.g:
                <para>db.TableExists("Person")</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteSchemaApi.TableExists``1(System.Data.IDbConnection)">
            <summary>
                Checks whether a Table Exists. E.g:
                <para>db.TableExists&lt;Person&gt;()</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteSchemaApi.CreateTables(System.Data.IDbConnection,System.Boolean,System.Type[])">
            <summary>
                Create DB Tables from the schemas of runtime types. E.g:
                <para>db.CreateTables(typeof(Table1), typeof(Table2))</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteSchemaApi.CreateTable(System.Data.IDbConnection,System.Boolean,System.Type)">
            <summary>
                Create DB Table from the schema of the runtime type. Use overwrite to drop existing Table. E.g:
                <para>db.CreateTable(true, typeof(Table))</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteSchemaApi.CreateSchema``1(System.Data.IDbConnection)">
            <summary>
                Create a DB Schema from the Schema attribute on the generic type. E.g:
                <para>db.CreateSchema&lt;Person&gt;() //default</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteSchemaApi.CreateSchema(System.Data.IDbConnection,System.String)">
            <summary>
                Create a DB Schema. E.g:
                <para>db.CreateSchema("schemaName")</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteSchemaApi.DropAndCreateTables(System.Data.IDbConnection,System.Type[])">
            <summary>
                Drop existing DB Tables and re-create them from the schemas of runtime types. E.g:
                <para>db.DropAndCreateTables(typeof(Table1), typeof(Table2))</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteSchemaApi.CreateTable``1(System.Data.IDbConnection,System.Boolean)">
            <summary>
                Create a DB Table from the generic type. Use overwrite to drop the existing table or not. E.g:
                <para>db.CreateTable&lt;Person&gt;(overwrite=false) //default</para>
                <para>db.CreateTable&lt;Person&gt;(overwrite=true)</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteSchemaApi.CreateTableIfNotExists``1(System.Data.IDbConnection)">
            <summary>
                Only create a DB Table from the generic type if it doesn't already exist. E.g:
                <para>db.CreateTableIfNotExists&lt;Person&gt;()</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteSchemaApi.DropAndCreateTable``1(System.Data.IDbConnection)">
            <summary>
                Drop existing table if exists and re-create a DB Table from the generic type. E.g:
                <para>db.DropAndCreateTable&lt;Person&gt;()</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteSchemaApi.DropAndCreateTable(System.Data.IDbConnection,System.Type)">
            <summary>
                Drop existing table if exists and re-create a DB Table from the runtime type. E.g:
                <para>db.DropAndCreateTable(typeof(Person))</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteSchemaApi.DropTables(System.Data.IDbConnection,System.Type[])">
            <summary>
                Drop any existing tables from their runtime types. E.g:
                <para>db.DropTables(typeof(Table1),typeof(Table2))</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteSchemaApi.DropTable(System.Data.IDbConnection,System.Type)">
            <summary>
                Drop any existing tables from the runtime type. E.g:
                <para>db.DropTable(typeof(Person))</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteSchemaApi.DropTable``1(System.Data.IDbConnection)">
            <summary>
                Drop any existing tables from the generic type. E.g:
                <para>db.DropTable&lt;Person&gt;()</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteWriteApi.GetLastSql(System.Data.IDbConnection)">
            <summary>
                Get the last SQL statement that was executed.
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteWriteApi.ExecuteSql(System.Data.IDbConnection,System.String)">
            <summary>
                Execute any arbitrary raw SQL.
            </summary>
            <returns>number of rows affected</returns>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteWriteApi.ExecuteSql(System.Data.IDbConnection,System.String,System.Object)">
            <summary>
                Execute any arbitrary raw SQL with db params.
            </summary>
            <returns>number of rows affected</returns>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteWriteApi.ExecuteSql(System.Data.IDbConnection,System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
                Execute any arbitrary raw SQL with db params.
            </summary>
            <returns>number of rows affected</returns>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteWriteApi.Insert``1(System.Data.IDbConnection,``0,System.Boolean)">
            <summary>
                Insert 1 POCO, use selectIdentity to retrieve the last insert AutoIncrement id (if any). E.g:
                <para>var id = db.Insert(new Person { Id = 1, FirstName = "Jimi }, selectIdentity:true)</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteWriteApi.Insert``1(System.Data.IDbConnection,``0,System.Action{System.Data.IDbCommand},System.Boolean)">
            <summary>
                Insert 1 POCO and modify populated IDbCommand with a commandFilter. E.g:
                <para>var id = db.Insert(new Person { Id = 1, FirstName = "Jimi }, dbCmd => applyFilter(dbCmd))</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteWriteApi.InsertUsingDefaults``1(System.Data.IDbConnection,``0[])">
            <summary>
                Insert 1 or more POCOs in a transaction using Table default values when defined. E.g:
                <para>db.InsertUsingDefaults(new Person { FirstName = "Tupac", LastName = "Shakur" },</para>
                <para>                       new Person { FirstName = "Biggie", LastName = "Smalls" })</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteWriteApi.InsertAll``1(System.Data.IDbConnection,System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Insert a collection of POCOs in a transaction. E.g:
                <para>db.InsertAll(new[] { new Person { Id = 9, FirstName = "Biggie", LastName = "Smalls", Age = 24 } })</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteWriteApi.InsertAll``1(System.Data.IDbConnection,System.Collections.Generic.IEnumerable{``0},System.Action{System.Data.IDbCommand})">
            <summary>
                Insert a collection of POCOs in a transaction and modify populated IDbCommand with a commandFilter. E.g:
                <para>db.InsertAll(new[] { new Person { Id = 9, FirstName = "Biggie", LastName = "Smalls", Age = 24 } },</para>
                <para>             dbCmd => applyFilter(dbCmd))</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteWriteApi.Insert``1(System.Data.IDbConnection,``0[])">
            <summary>
                Insert 1 or more POCOs in a transaction. E.g:
                <para>db.Insert(new Person { Id = 1, FirstName = "Tupac", LastName = "Shakur", Age = 25 },</para>
                <para>          new Person { Id = 2, FirstName = "Biggie", LastName = "Smalls", Age = 24 })</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteWriteApi.Insert``1(System.Data.IDbConnection,System.Action{System.Data.IDbCommand},``0[])">
            <summary>
                Insert 1 or more POCOs in a transaction and modify populated IDbCommand with a commandFilter. E.g:
                <para>db.Insert(dbCmd => applyFilter(dbCmd),</para>
                <para>          new Person { Id = 1, FirstName = "Tupac", LastName = "Shakur", Age = 25 },</para>
                <para>          new Person { Id = 2, FirstName = "Biggie", LastName = "Smalls", Age = 24 })</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteWriteApi.Update``1(System.Data.IDbConnection,``0,System.Action{System.Data.IDbCommand})">
            <summary>
                Updates 1 POCO. All fields are updated except for the PrimaryKey which is used as the identity selector. E.g:
                <para>db.Update(new Person { Id = 1, FirstName = "Jimi", LastName = "Hendrix", Age = 27 })</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteWriteApi.Update``1(System.Data.IDbConnection,``0[])">
            <summary>
                Updates 1 or more POCOs in a transaction. E.g:
                <para>db.Update(new Person { Id = 1, FirstName = "Tupac", LastName = "Shakur", Age = 25 },</para>
                <para>new Person { Id = 2, FirstName = "Biggie", LastName = "Smalls", Age = 24 })</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteWriteApi.UpdateAll``1(System.Data.IDbConnection,System.Collections.Generic.IEnumerable{``0},System.Action{System.Data.IDbCommand})">
            <summary>
                Updates 1 or more POCOs in a transaction. E.g:
                <para>db.UpdateAll(new[] { new Person { Id = 1, FirstName = "Jimi", LastName = "Hendrix", Age = 27 } })</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteWriteApi.Delete``1(System.Data.IDbConnection,System.Object)">
            <summary>
                Delete rows using an anonymous type filter. E.g:
                <para>db.Delete&lt;Person&gt;(new { FirstName = "Jimi", Age = 27 })</para>
            </summary>
            <returns>number of rows deleted</returns>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteWriteApi.Delete``1(System.Data.IDbConnection,``0)">
            <summary>
                Delete 1 row using all fields in the filter. E.g:
                <para>db.Delete(new Person { Id = 1, FirstName = "Jimi", LastName = "Hendrix", Age = 27 })</para>
            </summary>
            <returns>number of rows deleted</returns>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteWriteApi.Delete``1(System.Data.IDbConnection,``0[])">
            <summary>
                Delete 1 or more rows in a transaction using all fields in the filter. E.g:
                <para>db.Delete(new Person { Id = 1, FirstName = "Jimi", LastName = "Hendrix", Age = 27 })</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteWriteApi.DeleteNonDefaults``1(System.Data.IDbConnection,``0)">
            <summary>
                Delete 1 or more rows using only field with non-default values in the filter. E.g:
                <para>db.DeleteNonDefaults(new Person { FirstName = "Jimi", Age = 27 })</para>
            </summary>
            <returns>number of rows deleted</returns>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteWriteApi.DeleteNonDefaults``1(System.Data.IDbConnection,``0[])">
            <summary>
                Delete 1 or more rows in a transaction using only field with non-default values in the filter. E.g:
                <para>
                    db.DeleteNonDefaults(new Person { FirstName = "Jimi", Age = 27 },
                    new Person { FirstName = "Janis", Age = 27 })
                </para>
            </summary>
            <returns>number of rows deleted</returns>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteWriteApi.DeleteById``1(System.Data.IDbConnection,System.Object)">
            <summary>
                Delete 1 row by the PrimaryKey. E.g:
                <para>db.DeleteById&lt;Person&gt;(1)</para>
            </summary>
            <returns>number of rows deleted</returns>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteWriteApi.DeleteById``1(System.Data.IDbConnection,System.Object,System.UInt64)">
            <summary>
                Delete 1 row by the PrimaryKey where the rowVersion matches the optimistic concurrency field. E.g:
                <para>db.DeleteById&lt;Person&gt;(1)</para>
            </summary>
            <exception cref="T:TheOne.OrmLite.Core.OptimisticConcurrencyException" >if the row does not exist or has a different row version.</exception>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteWriteApi.DeleteByIds``1(System.Data.IDbConnection,System.Collections.IEnumerable)">
            <summary>
                Delete all rows identified by the PrimaryKeys. E.g:
                <para>db.DeleteById&lt;Person&gt;(new[] { 1, 2, 3 })</para>
            </summary>
            <returns>number of rows deleted</returns>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteWriteApi.DeleteAll``1(System.Data.IDbConnection)">
            <summary>
                Delete all rows in the generic table type. E.g:
                <para>db.DeleteAll&lt;Person&gt;()</para>
            </summary>
            <returns>number of rows deleted</returns>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteWriteApi.DeleteAll``1(System.Data.IDbConnection,System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Delete all rows provided. E.g:
                <para>db.DeleteAll&lt;Person&gt;(people)</para>
            </summary>
            <returns>number of rows deleted</returns>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteWriteApi.DeleteAll(System.Data.IDbConnection,System.Type)">
            <summary>
                Delete all rows in the runtime table type. E.g:
                <para>db.DeleteAll(typeof(Person))</para>
            </summary>
            <returns>number of rows deleted</returns>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteWriteApi.Delete``1(System.Data.IDbConnection,System.String,System.Object)">
            <summary>
                Delete rows using a SqlFormat filter. E.g:
                <para>db.Delete&lt;Person&gt;("Age > @age", new { age = 42 })</para>
            </summary>
            <returns>number of rows deleted</returns>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteWriteApi.Delete(System.Data.IDbConnection,System.Type,System.String,System.Object)">
            <summary>
                Delete rows using a SqlFormat filter. E.g:
                <para>db.Delete(typeof(Person), "Age > @age", new { age = 42 })</para>
            </summary>
            <returns>number of rows deleted</returns>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteWriteApi.Save``1(System.Data.IDbConnection,``0,System.Boolean)">
            <summary>
                Insert a new row or update existing row. Returns true if a new row was inserted.
                Optional references param decides whether to save all related references as well. E.g:
                <para>db.Save(customer, <paramref name="references" />: <see langword="true" />)</para>
            </summary>
            <returns>true if a row was inserted; false if it was updated</returns>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteWriteApi.Save``1(System.Data.IDbConnection,``0[])">
            <summary>
                Insert new rows or update existing rows. Return number of rows added E.g:
                <para>db.Save(new Person { Id = 10, FirstName = "Amy", LastName = "Winehouse", Age = 27 })</para>
            </summary>
            <returns>number of rows added</returns>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteWriteApi.SaveAll``1(System.Data.IDbConnection,System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Insert new rows or update existing rows. Return number of rows added E.g:
                <para>db.SaveAll(new [] { new Person { Id = 10, FirstName = "Amy", LastName = "Winehouse", Age = 27 } })</para>
            </summary>
            <returns>number of rows added</returns>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteWriteApi.SaveAllReferences``1(System.Data.IDbConnection,``0)">
            <summary>
                Populates all related references on the instance with its primary key and saves them. Uses '(T)Id' naming convention. E.g:
                <para>db.SaveAllReferences(customer)</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteWriteApi.SaveReferences``2(System.Data.IDbConnection,``0,``1[])">
            <summary>
                Populates the related references with the instance primary key and saves them. Uses '(T)Id' naming convention. E.g:
                <para>db.SaveReference(customer, customer.Orders)</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteWriteApi.SaveReferences``2(System.Data.IDbConnection,``0,System.Collections.Generic.List{``1})">
            <summary>
                Populates the related references with the instance primary key and saves them. Uses '(T)Id' naming convention. E.g:
                <para>db.SaveReference(customer, customer.Orders)</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteWriteApi.SaveReferences``2(System.Data.IDbConnection,``0,System.Collections.Generic.IEnumerable{``1})">
            <summary>
                Populates the related references with the instance primary key and saves them. Uses '(T)Id' naming convention. E.g:
                <para>db.SaveReferences(customer, customer.Orders)</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteWriteApi.ToUpdateStatement``1(System.Data.IDbConnection,``0,System.Collections.Generic.ICollection{System.String})">
            <summary>
                Generates inline UPDATE SQL Statement
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteWriteApi.ToInsertStatement``1(System.Data.IDbConnection,``0,System.Collections.Generic.ICollection{System.String})">
            <summary>
                Generates inline INSERT SQL Statement
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteWriteApiAsync.ExecuteSqlAsync(System.Data.IDbConnection,System.String,System.Threading.CancellationToken)">
            <summary>
                Execute any arbitrary raw SQL.
            </summary>
            <returns>number of rows affected</returns>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteWriteApiAsync.ExecuteSqlAsync(System.Data.IDbConnection,System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
                Execute any arbitrary raw SQL with db params.
            </summary>
            <returns>number of rows affected</returns>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteWriteApiAsync.InsertAsync``1(System.Data.IDbConnection,``0,System.Boolean,System.Threading.CancellationToken)">
            <summary>
                Insert 1 POCO, use selectIdentity to retrieve the last insert AutoIncrement id (if any). E.g:
                <para>var id = db.Insert(new Person { Id = 1, FirstName = "Jimi }, selectIdentity:true)</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteWriteApiAsync.InsertAsync``1(System.Data.IDbConnection,``0,System.Action{System.Data.IDbCommand},System.Boolean,System.Threading.CancellationToken)">
            <summary>
                Insert 1 POCO, use selectIdentity to retrieve the last insert AutoIncrement id (if any). E.g:
                <para>var id = db.Insert(new Person { Id = 1, FirstName = "Jimi }, selectIdentity:true)</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteWriteApiAsync.InsertAsync``1(System.Data.IDbConnection,System.Threading.CancellationToken,``0[])">
            <summary>
                Insert 1 or more POCOs in a transaction. E.g:
                <para>db.InsertAsync(new Person { Id = 1, FirstName = "Tupac", LastName = "Shakur", Age = 25 },</para>
                <para>               new Person { Id = 2, FirstName = "Biggie", LastName = "Smalls", Age = 24 })</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteWriteApiAsync.InsertAsync``1(System.Data.IDbConnection,System.Action{System.Data.IDbCommand},System.Threading.CancellationToken,``0[])">
            <summary>
                Insert 1 or more POCOs in a transaction and modify populated IDbCommand with a commandFilter. E.g:
                <para>db.InsertAsync(dbCmd => applyFilter(dbCmd), token, </para>
                <para>               new Person { Id = 1, FirstName = "Tupac", LastName = "Shakur", Age = 25 },</para>
                <para>               new Person { Id = 2, FirstName = "Biggie", LastName = "Smalls", Age = 24 })</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteWriteApiAsync.InsertUsingDefaultsAsync``1(System.Data.IDbConnection,``0[],System.Threading.CancellationToken)">
            <summary>
                Insert 1 or more POCOs in a transaction using Table default values when defined. E.g:
                <para>db.InsertUsingDefaultsAsync(new Person { FirstName = "Tupac", LastName = "Shakur" },</para>
                <para>                            new Person { FirstName = "Biggie", LastName = "Smalls" })</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteWriteApiAsync.InsertAllAsync``1(System.Data.IDbConnection,System.Collections.Generic.IEnumerable{``0},System.Threading.CancellationToken)">
            <summary>
                Insert a collection of POCOs in a transaction. E.g:
                <para>db.InsertAllAsync(new[] { new Person { Id = 9, FirstName = "Biggie", LastName = "Smalls", Age = 24 } })</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteWriteApiAsync.InsertAllAsync``1(System.Data.IDbConnection,System.Collections.Generic.IEnumerable{``0},System.Action{System.Data.IDbCommand},System.Threading.CancellationToken)">
            <summary>
                Insert a collection of POCOs in a transaction and modify populated IDbCommand with a commandFilter. E.g:
                <para>db.InsertAllAsync(new[] { new Person { Id = 9, FirstName = "Biggie", LastName = "Smalls", Age = 24 } },</para>
                <para>                  dbCmd => applyFilter(dbCmd))</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteWriteApiAsync.UpdateAsync``1(System.Data.IDbConnection,``0,System.Action{System.Data.IDbCommand},System.Threading.CancellationToken)">
            <summary>
                Updates 1 POCO. All fields are updated except for the PrimaryKey which is used as the identity selector. E.g:
                <para>db.Update(new Person { Id = 1, FirstName = "Jimi", LastName = "Hendrix", Age = 27 })</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteWriteApiAsync.UpdateAsync``1(System.Data.IDbConnection,System.Threading.CancellationToken,``0[])">
            <summary>
                Updates 1 or more POCOs in a transaction. E.g:
                <para>db.Update(new Person { Id = 1, FirstName = "Tupac", LastName = "Shakur", Age = 25 },</para>
                <para>new Person { Id = 2, FirstName = "Biggie", LastName = "Smalls", Age = 24 })</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteWriteApiAsync.UpdateAllAsync``1(System.Data.IDbConnection,System.Collections.Generic.IEnumerable{``0},System.Action{System.Data.IDbCommand},System.Threading.CancellationToken)">
            <summary>
                Updates 1 or more POCOs in a transaction. E.g:
                <para>db.UpdateAll(new[] { new Person { Id = 1, FirstName = "Jimi", LastName = "Hendrix", Age = 27 } })</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteWriteApiAsync.DeleteAsync``1(System.Data.IDbConnection,System.Object,System.Threading.CancellationToken)">
            <summary>
                Delete rows using an anonymous type commandFilter. E.g:
                <para>db.Delete&lt;Person&gt;(new { FirstName = "Jimi", Age = 27 })</para>
            </summary>
            <returns>number of rows deleted</returns>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteWriteApiAsync.DeleteAsync``1(System.Data.IDbConnection,``0,System.Threading.CancellationToken)">
            <summary>
                Delete 1 row using all fields in the commandFilter. E.g:
                <para>db.Delete(new Person { Id = 1, FirstName = "Jimi", LastName = "Hendrix", Age = 27 })</para>
            </summary>
            <returns>number of rows deleted</returns>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteWriteApiAsync.DeleteAsync``1(System.Data.IDbConnection,System.Threading.CancellationToken,``0[])">
            <summary>
                Delete 1 or more rows in a transaction using all fields in the commandFilter. E.g:
                <para>db.Delete(new Person { Id = 1, FirstName = "Jimi", LastName = "Hendrix", Age = 27 })</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteWriteApiAsync.DeleteNonDefaultsAsync``1(System.Data.IDbConnection,``0,System.Threading.CancellationToken)">
            <summary>
                Delete 1 or more rows using only field with non-default values in the commandFilter. E.g:
                <para>db.DeleteNonDefaults(new Person { FirstName = "Jimi", Age = 27 })</para>
            </summary>
            <returns>number of rows deleted</returns>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteWriteApiAsync.DeleteNonDefaultsAsync``1(System.Data.IDbConnection,System.Threading.CancellationToken,``0[])">
            <summary>
                Delete 1 or more rows in a transaction using only field with non-default values in the commandFilter. E.g:
                <para>
                    db.DeleteNonDefaults(new Person { FirstName = "Jimi", Age = 27 },
                    new Person { FirstName = "Janis", Age = 27 })
                </para>
            </summary>
            <returns>number of rows deleted</returns>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteWriteApiAsync.DeleteByIdAsync``1(System.Data.IDbConnection,System.Object,System.Threading.CancellationToken)">
            <summary>
                Delete 1 row by the PrimaryKey. E.g:
                <para>db.DeleteById&lt;Person&gt;(1)</para>
            </summary>
            <returns>number of rows deleted</returns>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteWriteApiAsync.DeleteByIdAsync``1(System.Data.IDbConnection,System.Object,System.UInt64,System.Threading.CancellationToken)">
            <summary>
                Delete 1 row by the PrimaryKey where the rowVersion matches the optimistic concurrency field. E.g:
                <para>db.DeleteById&lt;Person&gt;(1)</para>
            </summary>
            <example cref="T:TheOne.OrmLite.Core.OptimisticConcurrencyException" >if the row does not exist or has a different row version.</example>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteWriteApiAsync.DeleteByIdsAsync``1(System.Data.IDbConnection,System.Collections.IEnumerable,System.Threading.CancellationToken)">
            <summary>
                Delete all rows identified by the PrimaryKeys. E.g:
                <para>db.DeleteById&lt;Person&gt;(new[] { 1, 2, 3 })</para>
            </summary>
            <returns>number of rows deleted</returns>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteWriteApiAsync.DeleteAllAsync``1(System.Data.IDbConnection,System.Threading.CancellationToken)">
            <summary>
                Delete all rows in the generic table type. E.g:
                <para>db.DeleteAll&lt;Person&gt;()</para>
            </summary>
            <returns>number of rows deleted</returns>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteWriteApiAsync.DeleteAll(System.Data.IDbConnection,System.Type,System.Threading.CancellationToken)">
            <summary>
                Delete all rows in the runtime table type. E.g:
                <para>db.DeleteAll(typeof(Person))</para>
            </summary>
            <returns>number of rows deleted</returns>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteWriteApiAsync.SaveAsync``1(System.Data.IDbConnection,``0,System.Boolean,System.Threading.CancellationToken)">
            <summary>
                Insert a new row or update existing row. Optional references param decides whether to save all related references as well. E.g:
                <para>db.SaveAsync(customer, <paramref name="references" />: <see langword="true" />)</para>
            </summary>
            <returns>true if a row was inserted; false if it was updated</returns>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteWriteApiAsync.SaveAsync``1(System.Data.IDbConnection,System.Threading.CancellationToken,``0[])">
            <summary>
                Insert new rows or update existing rows. Return number of rows added E.g:
                <para>db.SaveAsync(new Person { Id = 10, FirstName = "Amy", LastName = "Winehouse", Age = 27 })</para>
            </summary>
            <returns>number of rows added</returns>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteWriteApiAsync.SaveAllAsync``1(System.Data.IDbConnection,System.Collections.Generic.IEnumerable{``0},System.Threading.CancellationToken)">
            <summary>
                Insert new rows or update existing rows. Return number of rows added E.g:
                <para>db.SaveAllAsync(new [] { new Person { Id = 10, FirstName = "Amy", LastName = "Winehouse", Age = 27 } })</para>
            </summary>
            <returns>number of rows added</returns>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteWriteApiAsync.SaveAllReferencesAsync``1(System.Data.IDbConnection,``0,System.Threading.CancellationToken)">
            <summary>
                Populates all related references on the instance with its primary key and saves them. Uses '(T)Id' naming convention. E.g:
                <para>db.SaveAllReferences(customer)</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteWriteApiAsync.SaveReferencesAsync``2(System.Data.IDbConnection,System.Threading.CancellationToken,``0,``1[])">
            <summary>
                Populates the related references with the instance primary key and saves them. Uses '(T)Id' naming convention. E.g:
                <para>db.SaveReference(customer, customer.Orders)</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteWriteApiAsync.SaveReferencesAsync``2(System.Data.IDbConnection,``0,System.Collections.Generic.List{``1},System.Threading.CancellationToken)">
            <summary>
                Populates the related references with the instance primary key and saves them. Uses '(T)Id' naming convention. E.g:
                <para>db.SaveReference(customer, customer.Orders)</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteWriteApiAsync.SaveReferencesAsync``2(System.Data.IDbConnection,``0,System.Collections.Generic.IEnumerable{``1},System.Threading.CancellationToken)">
            <summary>
                Populates the related references with the instance primary key and saves them. Uses '(T)Id' naming convention. E.g:
                <para>db.SaveReferences(customer, customer.Orders)</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteWriteExpressionsApi.UpdateOnly``1(System.Data.IDbConnection,``0,TheOne.OrmLite.Core.Expressions.OrmLiteSqlExpression{``0},System.Action{System.Data.IDbCommand})">
            <summary>
                Use an SqlExpression to select which fields to update and construct the where expression, E.g:
                <para>var q = db.From&gt;Person&lt;()); </para>
                <para>db.UpdateOnly(new Person { FirstName = "JJ" }, q.Update(p => p.FirstName).Where(x => x.FirstName == "Jimi"));</para>
                <para>// UPDATE "Person" SET "FirstName" = 'JJ' WHERE ("FirstName" = 'Jimi')</para>
                <para>What's not in the update expression doesn't get updated. No where expression updates all rows. E.g:</para>
                <para>db.UpdateOnly(new Person { FirstName = "JJ", LastName = "Hendo" }, ev.Update(p => p.FirstName));</para>
                <para>// UPDATE "Person" SET "FirstName" = 'JJ'</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteWriteExpressionsApi.UpdateOnly``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Action{System.Data.IDbCommand})">
            <summary>
                Update only fields in the specified expression that matches the where condition (if any), E.g:
                <para>db.UpdateOnly(() => new Person { FirstName = "JJ" }, where: p => p.LastName == "Hendrix");</para>
                <para>// UPDATE "Person" SET "FirstName" = 'JJ' WHERE ("LastName" = 'Hendrix')</para>
                <para>db.UpdateOnly(() => new Person { FirstName = "JJ" });</para>
                <para>// UPDATE "Person" SET "FirstName" = 'JJ'</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteWriteExpressionsApi.UpdateOnly``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0}},TheOne.OrmLite.Core.Expressions.OrmLiteSqlExpression{``0},System.Action{System.Data.IDbCommand})">
            <summary>
                Update only fields in the specified expression that matches the where condition (if any), E.g:
                <para>db.UpdateOnly(() => new Person { FirstName = "JJ" }, db.From&gt;Person&lt;().Where(p => p.LastName == "Hendrix"));</para>
                <para>// UPDATE "Person" SET "FirstName" = 'JJ' WHERE ("LastName" = 'Hendrix')</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteWriteExpressionsApi.UpdateOnly``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0}},System.String,System.Collections.Generic.IEnumerable{System.Data.IDbDataParameter},System.Action{System.Data.IDbCommand})">
            <summary>
                Update only fields in the specified expression that matches the where condition (if any), E.g:
                <para>var q = db.From&gt;Person&lt;().Where(p => p.LastName == "Hendrix");</para>
                <para>db.UpdateOnly(() => new Person { FirstName = "JJ" }, q.WhereExpression, q.Params);</para>
                <para>UPDATE "Person" SET "FirstName" = 'JJ' WHERE ("LastName" = 'Hendrix')</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteWriteExpressionsApi.UpdateOnly``1(System.Data.IDbConnection,``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Action{System.Data.IDbCommand})">
            <summary>
                Update record, updating only fields specified in updateOnly that matches the where condition (if any), E.g:
                <para>db.UpdateOnly(new Person { FirstName = "JJ" }, p => p.FirstName, p => p.LastName == "Hendrix");</para>
                <para>// UPDATE "Person" SET "FirstName" = 'JJ' WHERE ("LastName" = 'Hendrix')</para>
                <para>db.UpdateOnly(new Person { FirstName = "JJ" }, p => p.FirstName);</para>
                <para>// UPDATE "Person" SET "FirstName" = 'JJ'</para>
                <para>db.UpdateOnly(new Person { FirstName = "JJ", Age = 27 }, p => new { p.FirstName, p.Age );</para>
                <para>// UPDATE "Person" SET "FirstName" = 'JJ', "Age" = 27</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteWriteExpressionsApi.UpdateOnly``1(System.Data.IDbConnection,``0,System.String[],System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Action{System.Data.IDbCommand})">
            <summary>
                Update record, updating only fields specified in updateOnly that matches the where condition (if any), E.g:
                <para>db.UpdateOnly(new Person { FirstName = "JJ" }, new[]{ "FirstName" }, p => p.LastName == "Hendrix");</para>
                <para>// UPDATE "Person" SET "FirstName" = 'JJ' WHERE ("LastName" = 'Hendrix')</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteWriteExpressionsApi.UpdateAdd``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Action{System.Data.IDbCommand})">
            <summary>
                Update record, updating only fields specified in updateOnly that matches the where condition (if any),
                <para>Numeric fields generates an increment sql which is useful to increment counters, avoiding concurrency conflicts, E.g:</para>
                <para>db.UpdateAdd(() => new Person { Age = 5 }, where: p => p.LastName == "Hendrix");</para>
                <para>// UPDATE "Person" SET "Age" = "Age" + 5 WHERE ("LastName" = 'Hendrix')</para>
                <para>db.UpdateAdd(() => new Person { Age = 5 });</para>
                <para>// UPDATE "Person" SET "Age" = "Age" + 5</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteWriteExpressionsApi.UpdateAdd``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0}},TheOne.OrmLite.Core.Expressions.OrmLiteSqlExpression{``0},System.Action{System.Data.IDbCommand})">
            <summary>
                Update record, updating only fields specified in updateOnly that matches the where condition (if any),
                <para>Numeric fields generates an increment sql which is useful to increment counters, avoiding concurrency conflicts, E.g:</para>
                <para>db.UpdateAdd(() => new Person { Age = 5 }, db.From&lt;Person&gt;().Where(p => p.LastName == "Hendrix"));</para>
                <para>// UPDATE "Person" SET "Age" = "Age" + 5 WHERE ("LastName" = 'Hendrix')</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteWriteExpressionsApi.UpdateOnly``1(System.Data.IDbConnection,System.Collections.Generic.Dictionary{System.String,System.Object},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
                Updates all values from Object Dictionary matching the where condition. E.g
                <para>db.UpdateOnly&lt;Person&gt;(new Dictionary&lt;string,object&lt; { {"FirstName", "JJ"} }, where:p => p.FirstName == "Jimi");</para>
                <para>// UPDATE "Person" SET "FirstName" = 'JJ' WHERE ("FirstName" = 'Jimi')</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteWriteExpressionsApi.UpdateNonDefaults``1(System.Data.IDbConnection,``0,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
                Updates all non-default values set on item matching the where condition (if any). E.g
                <para>db.UpdateNonDefaults(new Person { FirstName = "JJ" }, p => p.FirstName == "Jimi");</para>
                <para>// UPDATE "Person" SET "FirstName" = 'JJ' WHERE ("FirstName" = 'Jimi')</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteWriteExpressionsApi.Update``1(System.Data.IDbConnection,``0,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Action{System.Data.IDbCommand})">
            <summary>
                Updates all values set on item matching the where condition (if any). E.g
                <para>db.Update(new Person { Id = 1, FirstName = "JJ" }, p => p.LastName == "Hendrix");</para>
                <para>// UPDATE "Person" SET "Id" = 1,"FirstName" = 'JJ',"LastName" = NULL,"Age" = 0 WHERE ("LastName" = 'Hendrix')</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteWriteExpressionsApi.Update``1(System.Data.IDbConnection,System.Object)">
            <summary>
                Updates the entity using the primary key as the filter
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteWriteExpressionsApi.Update``1(System.Data.IDbConnection,System.Object,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Action{System.Data.IDbCommand})">
            <summary>
                Updates all matching fields populated on anonymousType that matches where condition (if any). E.g:
                <para>db.Update&lt;Person&gt;(new { FirstName = "JJ" }, p => p.LastName == "Hendrix");</para>
                <para>// UPDATE "Person" SET "FirstName" = 'JJ' WHERE ("LastName" = 'Hendrix')</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteWriteExpressionsApi.InsertOnly``1(System.Data.IDbConnection,``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Boolean)">
            <summary>
                Using an SqlExpression to only Insert the fields specified, e.g:
                <para>db.InsertOnly(new Person { FirstName = "Amy" }, p => p.FirstName));</para>
                <para>// INSERT INTO "Person" ("FirstName") VALUES ('Amy');</para>
                <para>db.InsertOnly(new Person { Id =1 , FirstName="Amy" }, p => new { p.Id, p.FirstName }));</para>
                <para>// INSERT INTO "Person" ("Id", "FirstName") VALUES (1, 'Amy');</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteWriteExpressionsApi.InsertOnly``1(System.Data.IDbConnection,``0,System.String[],System.Boolean)">
            <summary>
                Using an SqlExpression to only Insert the fields specified, e.g:
                <para>db.InsertOnly(new Person { FirstName = "Amy" }, new[]{ "FirstName" }));</para>
                <para>// INSERT INTO "Person" ("FirstName") VALUES ('Amy');</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteWriteExpressionsApi.InsertOnly``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0}},System.Boolean)">
            <summary>
                Using an SqlExpression to only Insert the fields specified, e.g:
                <para>db.InsertOnly(() => new Person { FirstName = "Amy" }));</para>
                <para>// INSERT INTO "Person" ("FirstName") VALUES (@FirstName);</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteWriteExpressionsApi.Delete``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
                Delete the rows that matches the where expression, e.g:
                <para>db.Delete&lt;Person&gt;(p => p.Age == 27);</para>
                <para>// DELETE FROM "Person" WHERE ("Age" = 27)</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteWriteExpressionsApi.Delete``1(System.Data.IDbConnection,TheOne.OrmLite.Core.Expressions.OrmLiteSqlExpression{``0})">
            <summary>
                Delete the rows that matches the where expression, e.g:
                <para>var q = db.From&lt;Person&gt;());</para>
                <para>db.Delete&lt;Person&gt;(q.Where(p => p.Age == 27));</para>
                <para>// DELETE FROM "Person" WHERE ("Age" = 27)</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteWriteExpressionsApiAsync.UpdateOnlyAsync``1(System.Data.IDbConnection,``0,TheOne.OrmLite.Core.Expressions.OrmLiteSqlExpression{``0},System.Action{System.Data.IDbCommand},System.Threading.CancellationToken)">
            <summary>
                Use an SqlExpression to select which fields to update and construct the where expression, E.g:
                <para>var q = db.From&gt;Person&lt;());</para>
                <para>db.UpdateOnly(new Person { FirstName = "JJ" }, q.Update(p => p.FirstName).Where(x => x.FirstName == "Jimi"));</para>
                <para>// UPDATE "Person" SET "FirstName" = 'JJ' WHERE ("FirstName" = 'Jimi')</para>
                <para>What's not in the update expression doesn't get updated. No where expression updates all rows. E.g:</para>
                <para>db.UpdateOnly(new Person { FirstName = "JJ", LastName = "Hendo" }, ev.Update(p => p.FirstName));</para>
                <para>// UPDATE "Person" SET "FirstName" = 'JJ'</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteWriteExpressionsApiAsync.UpdateOnlyAsync``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Action{System.Data.IDbCommand},System.Threading.CancellationToken)">
            <summary>
                Update record, updating only fields specified in updateOnly that matches the where condition (if any), E.g:
                <para>db.UpdateOnlyAsync(() => new Person { FirstName = "JJ" }, where: p => p.LastName == "Hendrix");</para>
                <para>// UPDATE "Person" SET "FirstName" = 'JJ' WHERE ("LastName" = 'Hendrix')</para>
                <para>db.UpdateOnlyAsync(() => new Person { FirstName = "JJ" });</para>
                <para>// UPDATE "Person" SET "FirstName" = 'JJ'</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteWriteExpressionsApiAsync.UpdateOnlyAsync``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0}},TheOne.OrmLite.Core.Expressions.OrmLiteSqlExpression{``0},System.Action{System.Data.IDbCommand},System.Threading.CancellationToken)">
            <summary>
                Update record, updating only fields specified in updateOnly that matches the where condition (if any), E.g:
                <para>db.UpdateOnlyAsync(() => new Person { FirstName = "JJ" }, db.From&lt;Person&gt;().Where(p => p.LastName == "Hendrix"));</para>
                <para>// UPDATE "Person" SET "FirstName" = 'JJ' WHERE ("LastName" = 'Hendrix')</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteWriteExpressionsApiAsync.UpdateOnlyAsync``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0}},System.String,System.Collections.Generic.IEnumerable{System.Data.IDbDataParameter},System.Action{System.Data.IDbCommand},System.Threading.CancellationToken)">
            <summary>
                Update record, updating only fields specified in updateOnly that matches the where condition (if any), E.g:
                <para>var q = db.From&gt;Person&lt;().Where(p => p.LastName == "Hendrix");</para>
                <para>db.UpdateOnlyAsync(() => new Person { FirstName = "JJ" }, q.WhereExpression, q.Params);</para>
                <para>// UPDATE "Person" SET "FirstName" = 'JJ' WHERE ("LastName" = 'Hendrix')</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteWriteExpressionsApiAsync.UpdateOnlyAsync``1(System.Data.IDbConnection,``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Action{System.Data.IDbCommand},System.Threading.CancellationToken)">
            <summary>
                Update record, updating only fields specified in updateOnly that matches the where condition (if any), E.g:
                <para>db.UpdateOnly(new Person { FirstName = "JJ" }, p => p.FirstName, p => p.LastName == "Hendrix");</para>
                <para>// UPDATE "Person" SET "FirstName" = 'JJ' WHERE ("LastName" = 'Hendrix')</para>
                <para>db.UpdateOnly(new Person { FirstName = "JJ" }, p => p.FirstName);</para>
                <para>// UPDATE "Person" SET "FirstName" = 'JJ'</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteWriteExpressionsApiAsync.UpdateAddAsync``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Action{System.Data.IDbCommand},System.Threading.CancellationToken)">
            <summary>
                Update record, updating only fields specified in updateOnly that matches the where condition (if any),
                <para>Numeric fields generates an increment sql which is useful to increment counters, avoiding concurrency conflicts, E.g:</para>
                <para>db.UpdateAddAsync(() => new Person { Age = 5 }, where: p => p.LastName == "Hendrix");</para>
                <para>// UPDATE "Person" SET "Age" = "Age" + 5 WHERE ("LastName" = 'Hendrix')</para>
                <para>db.UpdateAddAsync(() => new Person { Age = 5 });</para>
                <para>// UPDATE "Person" SET "Age" = "Age" + 5</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteWriteExpressionsApiAsync.UpdateOnlyAsync``1(System.Data.IDbConnection,``0,System.String[],System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Action{System.Data.IDbCommand},System.Threading.CancellationToken)">
            <summary>
                Update record, updating only fields specified in updateOnly that matches the where condition (if any), E.g:
                <para>db.UpdateOnly(new Person { FirstName = "JJ" }, new[]{ "FirstName" }, p => p.LastName == "Hendrix");</para>
                <para>// UPDATE "Person" SET "FirstName" = 'JJ' WHERE ("LastName" = 'Hendrix')</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteWriteExpressionsApiAsync.UpdateAddAsync``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0}},TheOne.OrmLite.Core.Expressions.OrmLiteSqlExpression{``0},System.Action{System.Data.IDbCommand},System.Threading.CancellationToken)">
            <summary>
                Update record, updating only fields specified in updateOnly that matches the where condition (if any),
                <para>Numeric fields generates an increment sql which is useful to increment counters, avoiding concurrency conflicts, E.g:</para>
                <para>db.UpdateAddAsync(() => new Person { Age = 5 }, db.From&lt;Person&gt;().Where(p => p.LastName == "Hendrix"));</para>
                <para>// UPDATE "Person" SET "Age" = "Age" + 5 WHERE ("LastName" = 'Hendrix')</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteWriteExpressionsApiAsync.UpdateOnlyAsync``1(System.Data.IDbConnection,System.Collections.Generic.Dictionary{System.String,System.Object},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Action{System.Data.IDbCommand},System.Threading.CancellationToken)">
            <summary>
                Updates all values from Object Dictionary matching the where condition. E.g
                <para>db.UpdateOnlyAsync&lt;Person&gt;(new Dictionary&lt;string,object&lt; { {"FirstName", "JJ"} }, where:p => p.FirstName == "Jimi");</para>
                <para>// UPDATE "Person" SET "FirstName" = 'JJ' WHERE ("FirstName" = 'Jimi')</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteWriteExpressionsApiAsync.UpdateNonDefaultsAsync``1(System.Data.IDbConnection,``0,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
                Updates all non-default values set on item matching the where condition (if any). E.g
                <para>db.UpdateNonDefaults(new Person { FirstName = "JJ" }, p => p.FirstName == "Jimi");</para>
                <para>// UPDATE "Person" SET "FirstName" = 'JJ' WHERE ("FirstName" = 'Jimi')</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteWriteExpressionsApiAsync.UpdateAsync``1(System.Data.IDbConnection,``0,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Action{System.Data.IDbCommand},System.Threading.CancellationToken)">
            <summary>
                Updates all values set on item matching the where condition (if any). E.g
                <para>db.Update(new Person { Id = 1, FirstName = "JJ" }, p => p.LastName == "Hendrix");</para>
                <para>// UPDATE "Person" SET "Id" = 1,"FirstName" = 'JJ',"LastName" = NULL,"Age" = 0 WHERE ("LastName" = 'Hendrix')</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteWriteExpressionsApiAsync.UpdateAsync``1(System.Data.IDbConnection,System.Object,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Action{System.Data.IDbCommand},System.Threading.CancellationToken)">
            <summary>
                Updates all matching fields populated on anonymousType that matches where condition (if any). E.g:
                <para>db.Update&lt;Person&gt;(new { FirstName = "JJ" }, p => p.LastName == "Hendrix");</para>
                <para>// UPDATE "Person" SET "FirstName" = 'JJ' WHERE ("LastName" = 'Hendrix')</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteWriteExpressionsApiAsync.InsertOnlyAsync``1(System.Data.IDbConnection,``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Threading.CancellationToken)">
            <summary>
                Using an SqlExpression to only Insert the fields specified, e.g:
                <para>db.InsertOnlyAsync(new Person { FirstName = "Amy" }, p => p.FirstName));</para>
                <para>// INSERT INTO "Person" ("FirstName") VALUES ('Amy');</para>
                <para>db.InsertOnlyAsync(new Person { Id =1 , FirstName="Amy" }, p => new { p.Id, p.FirstName }));</para>
                <para>// INSERT INTO "Person" ("Id", "FirstName") VALUES (1, 'Amy');</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteWriteExpressionsApiAsync.InsertOnlyAsync``1(System.Data.IDbConnection,``0,System.String[],System.Threading.CancellationToken)">
            <summary>
                Using an SqlExpression to only Insert the fields specified, e.g:
                <para>db.InsertOnly(new Person { FirstName = "Amy" }, new[]{ "FirstName" }));</para>
                <para>// INSERT INTO "Person" ("FirstName") VALUES ('Amy');</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteWriteExpressionsApiAsync.InsertOnlyAsync``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0}},System.Threading.CancellationToken)">
            <summary>
                Using an SqlExpression to only Insert the fields specified, e.g:
                <para>db.InsertOnlyAsync(() => new Person { FirstName = "Amy" }));</para>
                <para>// INSERT INTO "Person" ("FirstName") VALUES (@FirstName);</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteWriteExpressionsApiAsync.DeleteAsync``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
                Delete the rows that matches the where expression, e.g:
                <para>db.Delete&lt;Person&gt;(p => p.Age == 27);</para>
                <para>// DELETE FROM "Person" WHERE ("Age" = 27)</para>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteWriteExpressionsApiAsync.DeleteAsync``1(System.Data.IDbConnection,TheOne.OrmLite.Core.Expressions.OrmLiteSqlExpression{``0},System.Threading.CancellationToken)">
            <summary>
                Delete the rows that matches the where expression, e.g:
                <para>var q = db.From&gt;Person&lt;());</para>
                <para>db.Delete&lt;Person&gt;(q.Where(p => p.Age == 27));</para>
                <para>// DELETE FROM "Person" WHERE ("Age" = 27)</para>
            </summary>
        </member>
        <member name="T:TheOne.OrmLite.Core.UntypedApi`1">
            <inheritdoc />
        </member>
        <member name="P:TheOne.OrmLite.Core.UntypedApi`1.Db">
            <inheritdoc />
        </member>
        <member name="P:TheOne.OrmLite.Core.UntypedApi`1.DbCmd">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.UntypedApi`1.SaveAll(System.Collections.IEnumerable)">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.UntypedApi`1.Save(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.UntypedApi`1.SaveAllAsync(System.Collections.IEnumerable,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.UntypedApi`1.SaveAsync(System.Object,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.UntypedApi`1.InsertAll(System.Collections.IEnumerable)">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.UntypedApi`1.InsertAll(System.Collections.IEnumerable,System.Action{System.Data.IDbCommand})">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.UntypedApi`1.Insert(System.Object,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.UntypedApi`1.Insert(System.Object,System.Action{System.Data.IDbCommand},System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.UntypedApi`1.UpdateAll(System.Collections.IEnumerable)">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.UntypedApi`1.UpdateAll(System.Collections.IEnumerable,System.Action{System.Data.IDbCommand})">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.UntypedApi`1.Update(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.UntypedApi`1.DeleteAll">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.UntypedApi`1.Delete(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.UntypedApi`1.DeleteNonDefaults(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.UntypedApi`1.DeleteById(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.UntypedApi`1.DeleteByIds(System.Collections.IEnumerable)">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.UntypedApi`1.Cast(System.Collections.IEnumerable)">
            <inheritdoc />
        </member>
        <member name="T:TheOne.OrmLite.Core.CaptureSqlFilter">
            <summary>
                Simple results filter
                which can be used to quickly found out what sql your db calls generate
                by surrounding db access in a using scope
            </summary>
        </member>
        <member name="F:TheOne.OrmLite.Core.Common.AutoMappingUtils.MaxRecursionLevelForDefaultValues">
            <summary>
                do not nest a single type more than this deep.
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.Common.AutoMappingUtils.RegisterConverter``2(System.Func{``0,``1})">
            <summary>
                Customize ServiceStack AutoMapping Behavior - Register Type to Type AutoMapping converter
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.Common.AutoMappingUtils.IgnoreMapping``2">
            <summary>
                Customize ServiceStack AutoMapping Behavior - Ignore Type to Type Mapping (including collections containing them)
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.Common.AutoMappingUtils.IgnoreMapping(System.Type,System.Type)">
            <summary>
                Customize ServiceStack AutoMapping Behavior - Ignore Type to Type Mapping (including collections containing them)
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.Common.AutoMappingUtils.PopulateWith(System.Object)">
            <summary>
                Populate an object with Example data.
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.Common.AutoMappingUtils.PopulateObjectInternal(System.Object,System.Collections.Generic.Dictionary{System.Type,System.Int32})">
            <summary>
                Populates the object with example data.
            </summary>
            <param name="obj" >obj</param>
            <param name="recursionInfo" >Tracks how deeply nested we are</param>
        </member>
        <member name="M:TheOne.OrmLite.Core.Common.ReflectionExtensions.CreateInstance(System.Type)">
            <summary>
                Creates a new instance from the default constructor of type
            </summary>
        </member>
        <member name="T:TheOne.OrmLite.Core.Common.StringBuilderCache">
            <summary>Provide a cached reusable instance of StringBuilder per thread.</summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.Common.StringBuilderCache.Acquire(System.Int32)">
            <summary>Get a StringBuilder for the specified capacity.</summary>
            <remarks>If a StringBuilder of an appropriate size is cached, it will be returned and the cache emptied.</remarks>
        </member>
        <member name="M:TheOne.OrmLite.Core.Common.StringBuilderCache.Release(System.Text.StringBuilder)">
            <summary>Place the specified builder in the cache if it is not too big.</summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.Common.StringBuilderCache.GetStringAndRelease(System.Text.StringBuilder)">
            <summary>ToString() the StringBuilder, Release it to the cache, and return the resulting string.</summary>
        </member>
        <member name="T:TheOne.OrmLite.Core.Common.StringBuilderCache2">
            <summary>Provide a cached reusable instance of StringBuilder per thread.</summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.Common.StringBuilderCache2.Acquire(System.Int32)">
            <summary>Get a StringBuilder for the specified capacity.</summary>
            <remarks>If a StringBuilder of an appropriate size is cached, it will be returned and the cache emptied.</remarks>
        </member>
        <member name="M:TheOne.OrmLite.Core.Common.StringBuilderCache2.Release(System.Text.StringBuilder)">
            <summary>Place the specified builder in the cache if it is not too big.</summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.Common.StringBuilderCache2.GetStringAndRelease(System.Text.StringBuilder)">
            <summary>ToString() the StringBuilder, Release it to the cache, and return the resulting string.</summary>
        </member>
        <member name="T:TheOne.OrmLite.Core.Common.StringBuilderCache3">
            <summary>Provide a cached reusable instance of StringBuilder per thread.</summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.Common.StringBuilderCache3.Acquire(System.Int32)">
            <summary>Get a StringBuilder for the specified capacity.</summary>
            <remarks>If a StringBuilder of an appropriate size is cached, it will be returned and the cache emptied.</remarks>
        </member>
        <member name="M:TheOne.OrmLite.Core.Common.StringBuilderCache3.Release(System.Text.StringBuilder)">
            <summary>Place the specified builder in the cache if it is not too big.</summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.Common.StringBuilderCache3.GetStringAndRelease(System.Text.StringBuilder)">
            <summary>ToString() the StringBuilder, Release it to the cache, and return the resulting string.</summary>
        </member>
        <member name="T:TheOne.OrmLite.Core.Converters.OrmLiteBoolAsIntConverter">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.Converters.OrmLiteBoolAsIntConverter.ToDbValue(System.Type,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.Converters.OrmLiteBoolAsIntConverter.ToQuotedString(System.Type,System.Object)">
            <inheritdoc />
        </member>
        <member name="T:TheOne.OrmLite.Core.Converters.OrmLiteBoolConverter">
            <inheritdoc />
        </member>
        <member name="P:TheOne.OrmLite.Core.Converters.OrmLiteBoolConverter.ColumnDefinition">
            <inheritdoc />
        </member>
        <member name="P:TheOne.OrmLite.Core.Converters.OrmLiteBoolConverter.DbType">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.Converters.OrmLiteBoolConverter.FromDbValue(System.Type,System.Object)">
            <inheritdoc />
            <remarks>
                Also support coercing 0 != int as Bool
            </remarks>
        </member>
        <member name="T:TheOne.OrmLite.Core.Converters.OrmLiteByteArrayConverter">
            <inheritdoc />
        </member>
        <member name="P:TheOne.OrmLite.Core.Converters.OrmLiteByteArrayConverter.ColumnDefinition">
            <inheritdoc />
        </member>
        <member name="P:TheOne.OrmLite.Core.Converters.OrmLiteByteArrayConverter.DbType">
            <inheritdoc />
        </member>
        <member name="T:TheOne.OrmLite.Core.Converters.OrmLiteCharArrayConverter">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.Converters.OrmLiteCharArrayConverter.#ctor">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.Converters.OrmLiteCharArrayConverter.#ctor(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.Converters.OrmLiteCharArrayConverter.ToDbValue(System.Type,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.Converters.OrmLiteCharArrayConverter.FromDbValue(System.Type,System.Object)">
            <inheritdoc />
        </member>
        <member name="T:TheOne.OrmLite.Core.Converters.OrmLiteCharConverter">
            <inheritdoc />
        </member>
        <member name="P:TheOne.OrmLite.Core.Converters.OrmLiteCharConverter.ColumnDefinition">
            <inheritdoc />
        </member>
        <member name="P:TheOne.OrmLite.Core.Converters.OrmLiteCharConverter.DbType">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.Converters.OrmLiteCharConverter.GetColumnDefinition(System.Nullable{System.Int32})">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.Converters.OrmLiteCharConverter.FromDbValue(System.Type,System.Object)">
            <inheritdoc />
        </member>
        <member name="T:TheOne.OrmLite.Core.Converters.OrmLiteConverter">
            <inheritdoc />
        </member>
        <member name="P:TheOne.OrmLite.Core.Converters.OrmLiteConverter.DialectProvider">
            <summary>
                RDBMS Dialect this Converter is for. Injected at registration.
            </summary>
        </member>
        <member name="P:TheOne.OrmLite.Core.Converters.OrmLiteConverter.ColumnDefinition">
            <summary>
                SQL Column definition used in CREATE Table.
            </summary>
        </member>
        <member name="P:TheOne.OrmLite.Core.Converters.OrmLiteConverter.DbType">
            <summary>
                Used in DB Params. Defaults to DbType.String
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.Converters.OrmLiteConverter.ToQuotedString(System.Type,System.Object)">
            <summary>
                Quoted Value in SQL Statement
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.Converters.OrmLiteConverter.InitDbParam(System.Data.IDbDataParameter,System.Type)">
            <summary>
                Customize how DB Param is initialized. Useful for supporting RDBMS-specific Types.
            </summary>
            <remarks>Value is not set at this moment</remarks>
        </member>
        <member name="M:TheOne.OrmLite.Core.Converters.OrmLiteConverter.ToDbValue(System.Type,System.Object)">
            <summary>
                Parameterized value in parameterized queries
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.Converters.OrmLiteConverter.FromDbValue(System.Type,System.Object)">
            <summary>
                Value from DB to Populate on POCO Data Model with
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.Converters.OrmLiteConverter.GetValue(System.Data.IDataReader,System.Int32,System.Object[])">
            <summary>
                Retrieve Value from ADO.NET IDataReader. Defaults to reader.GetValue()
            </summary>
        </member>
        <member name="T:TheOne.OrmLite.Core.Converters.OrmLiteDateTimeConverter">
            <inheritdoc />
        </member>
        <member name="P:TheOne.OrmLite.Core.Converters.OrmLiteDateTimeConverter.ColumnDefinition">
            <inheritdoc />
        </member>
        <member name="P:TheOne.OrmLite.Core.Converters.OrmLiteDateTimeConverter.DbType">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.Converters.OrmLiteDateTimeConverter.ToQuotedString(System.Type,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.Converters.OrmLiteDateTimeConverter.ToDbValue(System.Type,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.Converters.OrmLiteDateTimeConverter.FromDbValue(System.Type,System.Object)">
            <inheritdoc />
        </member>
        <member name="T:TheOne.OrmLite.Core.Converters.OrmLiteDecimalConverter">
            <inheritdoc cref="T:TheOne.OrmLite.Core.Converters.OrmLiteFloatConverter" />
        </member>
        <member name="M:TheOne.OrmLite.Core.Converters.OrmLiteDecimalConverter.#ctor">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.Converters.OrmLiteDecimalConverter.#ctor(System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="P:TheOne.OrmLite.Core.Converters.OrmLiteDecimalConverter.ColumnDefinition">
            <inheritdoc />
        </member>
        <member name="P:TheOne.OrmLite.Core.Converters.OrmLiteDecimalConverter.DbType">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.Converters.OrmLiteDecimalConverter.GetColumnDefinition(System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <inheritdoc />
        </member>
        <member name="T:TheOne.OrmLite.Core.Converters.OrmLiteDoubleConverter">
            <inheritdoc />
        </member>
        <member name="P:TheOne.OrmLite.Core.Converters.OrmLiteDoubleConverter.DbType">
            <inheritdoc />
        </member>
        <member name="F:TheOne.OrmLite.Core.Converters.OrmLiteEnumConverter._intEnumsCache">
            <summary>
                cache expensive to calculate operation
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.Converters.OrmLiteEnumConverter.ToQuotedString(System.Type,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.Converters.OrmLiteEnumConverter.ToDbValue(System.Type,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.Converters.OrmLiteEnumConverter.FromDbValue(System.Type,System.Object)">
            <inheritdoc />
        </member>
        <member name="T:TheOne.OrmLite.Core.Converters.OrmLiteFloatConverter">
            <inheritdoc />
        </member>
        <member name="P:TheOne.OrmLite.Core.Converters.OrmLiteFloatConverter.ColumnDefinition">
            <inheritdoc />
        </member>
        <member name="P:TheOne.OrmLite.Core.Converters.OrmLiteFloatConverter.DbType">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.Converters.OrmLiteFloatConverter.ToDbValue(System.Type,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.Converters.OrmLiteFloatConverter.FromDbValue(System.Type,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.Converters.OrmLiteFloatConverter.ToQuotedString(System.Type,System.Object)">
            <inheritdoc />
        </member>
        <member name="T:TheOne.OrmLite.Core.Converters.OrmLiteGuidConverter">
            <inheritdoc />
        </member>
        <member name="P:TheOne.OrmLite.Core.Converters.OrmLiteGuidConverter.ColumnDefinition">
            <inheritdoc />
        </member>
        <member name="P:TheOne.OrmLite.Core.Converters.OrmLiteGuidConverter.DbType">
            <inheritdoc />
        </member>
        <member name="T:TheOne.OrmLite.Core.Converters.OrmLiteIntegerConverter">
            <inheritdoc />
        </member>
        <member name="P:TheOne.OrmLite.Core.Converters.OrmLiteIntegerConverter.ColumnDefinition">
            <inheritdoc />
        </member>
        <member name="P:TheOne.OrmLite.Core.Converters.OrmLiteIntegerConverter.DbType">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.Converters.OrmLiteIntegerConverter.ToDbValue(System.Type,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.Converters.OrmLiteIntegerConverter.FromDbValue(System.Type,System.Object)">
            <inheritdoc />
        </member>
        <member name="T:TheOne.OrmLite.Core.Converters.OrmLiteByteConverter">
            <inheritdoc />
        </member>
        <member name="P:TheOne.OrmLite.Core.Converters.OrmLiteByteConverter.DbType">
            <inheritdoc />
        </member>
        <member name="T:TheOne.OrmLite.Core.Converters.OrmLiteSByteConverter">
            <inheritdoc />
        </member>
        <member name="P:TheOne.OrmLite.Core.Converters.OrmLiteSByteConverter.DbType">
            <inheritdoc />
        </member>
        <member name="T:TheOne.OrmLite.Core.Converters.OrmLiteInt16Converter">
            <inheritdoc />
        </member>
        <member name="P:TheOne.OrmLite.Core.Converters.OrmLiteInt16Converter.DbType">
            <inheritdoc />
        </member>
        <member name="T:TheOne.OrmLite.Core.Converters.OrmLiteUInt16Converter">
            <inheritdoc />
        </member>
        <member name="P:TheOne.OrmLite.Core.Converters.OrmLiteUInt16Converter.DbType">
            <inheritdoc />
        </member>
        <member name="T:TheOne.OrmLite.Core.Converters.OrmLiteInt32Converter">
            <inheritdoc />
        </member>
        <member name="T:TheOne.OrmLite.Core.Converters.OrmLiteUInt32Converter">
            <inheritdoc />
        </member>
        <member name="P:TheOne.OrmLite.Core.Converters.OrmLiteUInt32Converter.DbType">
            <inheritdoc />
        </member>
        <member name="T:TheOne.OrmLite.Core.Converters.OrmLiteInt64Converter">
            <inheritdoc />
        </member>
        <member name="P:TheOne.OrmLite.Core.Converters.OrmLiteInt64Converter.DbType">
            <inheritdoc />
        </member>
        <member name="P:TheOne.OrmLite.Core.Converters.OrmLiteInt64Converter.ColumnDefinition">
            <inheritdoc />
        </member>
        <member name="T:TheOne.OrmLite.Core.Converters.OrmLiteUInt64Converter">
            <inheritdoc />
        </member>
        <member name="P:TheOne.OrmLite.Core.Converters.OrmLiteUInt64Converter.DbType">
            <inheritdoc />
        </member>
        <member name="P:TheOne.OrmLite.Core.Converters.OrmLiteUInt64Converter.ColumnDefinition">
            <inheritdoc />
        </member>
        <member name="T:TheOne.OrmLite.Core.Converters.OrmLiteNativeValueConverter">
            <summary>
                For Types that are natively supported by RDBMS's and shouldn't be quoted
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.Converters.OrmLiteNativeValueConverter.ToQuotedString(System.Type,System.Object)">
            <inheritdoc />
        </member>
        <member name="T:TheOne.OrmLite.Core.Converters.OrmLiteReferenceTypeConverter">
            <inheritdoc />
        </member>
        <member name="P:TheOne.OrmLite.Core.Converters.OrmLiteReferenceTypeConverter.ColumnDefinition">
            <inheritdoc />
        </member>
        <member name="P:TheOne.OrmLite.Core.Converters.OrmLiteReferenceTypeConverter.MaxColumnDefinition">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.Converters.OrmLiteReferenceTypeConverter.GetColumnDefinition(System.Nullable{System.Int32})">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.Converters.OrmLiteReferenceTypeConverter.ToQuotedString(System.Type,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.Converters.OrmLiteReferenceTypeConverter.ToDbValue(System.Type,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.Converters.OrmLiteReferenceTypeConverter.FromDbValue(System.Type,System.Object)">
            <inheritdoc />
        </member>
        <member name="T:TheOne.OrmLite.Core.Converters.OrmLiteRowVersionConverter">
            <inheritdoc />
        </member>
        <member name="P:TheOne.OrmLite.Core.Converters.OrmLiteRowVersionConverter.ColumnDefinition">
            <inheritdoc />
        </member>
        <member name="P:TheOne.OrmLite.Core.Converters.OrmLiteRowVersionConverter.DbType">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.Converters.OrmLiteRowVersionConverter.FromDbValue(System.Type,System.Object)">
            <inheritdoc />
        </member>
        <member name="T:TheOne.OrmLite.Core.Converters.OrmLiteStringConverter">
            <inheritdoc cref="T:TheOne.OrmLite.Core.Converters.OrmLiteConverter" />
        </member>
        <member name="P:TheOne.OrmLite.Core.Converters.OrmLiteStringConverter.ColumnDefinition">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.Converters.OrmLiteStringConverter.GetColumnDefinition(System.Nullable{System.Int32})">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.Converters.OrmLiteStringConverter.InitDbParam(System.Data.IDbDataParameter,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.Converters.OrmLiteStringConverter.FromDbValue(System.Type,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.Converters.OrmLiteStringConverter.ToDbValue(System.Type,System.Object)">
            <inheritdoc />
        </member>
        <member name="T:TheOne.OrmLite.Core.Converters.OrmLiteTimeSpanAsIntConverter">
            <inheritdoc />
        </member>
        <member name="P:TheOne.OrmLite.Core.Converters.OrmLiteTimeSpanAsIntConverter.ColumnDefinition">
            <inheritdoc />
        </member>
        <member name="P:TheOne.OrmLite.Core.Converters.OrmLiteTimeSpanAsIntConverter.DbType">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.Converters.OrmLiteTimeSpanAsIntConverter.ToQuotedString(System.Type,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.Converters.OrmLiteTimeSpanAsIntConverter.ToDbValue(System.Type,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.Converters.OrmLiteTimeSpanAsIntConverter.FromDbValue(System.Type,System.Object)">
            <inheritdoc />
        </member>
        <member name="T:TheOne.OrmLite.Core.Converters.OrmLiteValueTypeConverter">
            <inheritdoc />
        </member>
        <member name="P:TheOne.OrmLite.Core.Converters.OrmLiteValueTypeConverter.ColumnDefinition">
            <inheritdoc />
        </member>
        <member name="P:TheOne.OrmLite.Core.Converters.OrmLiteValueTypeConverter.MaxColumnDefinition">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.Converters.OrmLiteValueTypeConverter.GetColumnDefinition(System.Nullable{System.Int32})">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.Converters.OrmLiteValueTypeConverter.ToQuotedString(System.Type,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.Converters.OrmLiteValueTypeConverter.ToDbValue(System.Type,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.Converters.OrmLiteValueTypeConverter.FromDbValue(System.Type,System.Object)">
            <inheritdoc />
        </member>
        <member name="T:TheOne.OrmLite.Core.DataAnnotations.OrmLiteAliasAttribute">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.DataAnnotations.OrmLiteAliasAttribute.#ctor(System.String)">
            <inheritdoc />
        </member>
        <member name="T:TheOne.OrmLite.Core.DataAnnotations.OrmLiteAutoIdAttribute">
            <remarks>
                PostgreSql on db run: CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
            </remarks>
        </member>
        <member name="T:TheOne.OrmLite.Core.DataAnnotations.OrmLiteAutoIncrementAttribute">
            <inheritdoc />
        </member>
        <member name="T:TheOne.OrmLite.Core.DataAnnotations.OrmLiteBelongToAttribute">
            <summary>
                Use to indicate that a join column belongs to another table.
                Specifying how Custom POCO results are mapped when the result set is ambiguous.
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.DataAnnotations.OrmLiteBelongToAttribute.#ctor(System.Type)">
            <inheritdoc />
        </member>
        <member name="T:TheOne.OrmLite.Core.DataAnnotations.OrmLiteCheckConstraintAttribute">
            <summary>
                SQL Check Constraints(https://en.wikipedia.org/wiki/Check_constraint)
                which will create your Table schema with the <see cref="T:TheOne.OrmLite.Core.DataAnnotations.OrmLiteCheckConstraintAttribute" /> specified
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.DataAnnotations.OrmLiteCheckConstraintAttribute.#ctor(System.String)">
            <inheritdoc />
        </member>
        <member name="T:TheOne.OrmLite.Core.DataAnnotations.OrmLiteCompositeIndexAttribute">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.DataAnnotations.OrmLiteCompositeIndexAttribute.#ctor">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.DataAnnotations.OrmLiteCompositeIndexAttribute.#ctor(System.String[])">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.DataAnnotations.OrmLiteCompositeIndexAttribute.#ctor(System.Boolean,System.String[])">
            <inheritdoc />
        </member>
        <member name="T:TheOne.OrmLite.Core.DataAnnotations.OrmLiteComputeAttribute">
            <summary>
                Compute attribute.
                Use to indicate that a property is a Calculated Field
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.DataAnnotations.OrmLiteComputeAttribute.#ctor">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.DataAnnotations.OrmLiteComputeAttribute.#ctor(System.String)">
            <inheritdoc />
        </member>
        <member name="T:TheOne.OrmLite.Core.DataAnnotations.OrmLiteComputedAttribute">
            <inheritdoc />
        </member>
        <member name="T:TheOne.OrmLite.Core.DataAnnotations.OrmLiteCustomFieldAttribute">
            <summary>
                Can be used for specifying custom field declarations in the generated create table DDL statements
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.DataAnnotations.OrmLiteCustomFieldAttribute.#ctor(System.String)">
            <inheritdoc />
        </member>
        <member name="T:TheOne.OrmLite.Core.DataAnnotations.OrmLiteCustomSelectAttribute">
            <summary>
                Can be used to define properties you want populated from a custom sql function or
                expression instead of a normal persisted column
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.DataAnnotations.OrmLiteCustomSelectAttribute.#ctor(System.String)">
            <inheritdoc />
        </member>
        <member name="T:TheOne.OrmLite.Core.DataAnnotations.OrmLiteDecimalLengthAttribute">
            <summary>
                Decimal length attribute.
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.DataAnnotations.OrmLiteDecimalLengthAttribute.#ctor">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.DataAnnotations.OrmLiteDecimalLengthAttribute.#ctor(System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="T:TheOne.OrmLite.Core.DataAnnotations.OrmLiteDefaultAttribute">
            <inheritdoc />
            <remarks>
                <see cref="T:TheOne.OrmLite.Core.OrmLiteVariables" />
            </remarks>
        </member>
        <member name="M:TheOne.OrmLite.Core.DataAnnotations.OrmLiteDefaultAttribute.#ctor(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.DataAnnotations.OrmLiteDefaultAttribute.#ctor(System.Double)">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.DataAnnotations.OrmLiteDefaultAttribute.#ctor(System.String)">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.DataAnnotations.OrmLiteDefaultAttribute.#ctor(System.Type,System.String)">
            <inheritdoc />
        </member>
        <member name="P:TheOne.OrmLite.Core.DataAnnotations.OrmLiteDefaultAttribute.OnUpdate">
            <summary>
                not used
            </summary>
        </member>
        <member name="T:TheOne.OrmLite.Core.DataAnnotations.OrmLiteEnumAsCharAttribute">
            <inheritdoc />
        </member>
        <member name="T:TheOne.OrmLite.Core.DataAnnotations.OrmLiteEnumAsIntAttribute">
            <inheritdoc />
        </member>
        <member name="T:TheOne.OrmLite.Core.DataAnnotations.OrmLiteForeignKeyAttribute">
            <inheritdoc />
        </member>
        <member name="P:TheOne.OrmLite.Core.DataAnnotations.OrmLiteForeignKeyAttribute.ForeignKeyName">
            <summary>
                Explicit foreign key name. If it's null, or empty, the FK name will be autogenerated as before.
            </summary>
        </member>
        <member name="T:TheOne.OrmLite.Core.DataAnnotations.OrmLiteIgnoreAttribute">
            <summary>
                IgnoreAttribute
                Use to indicate that a property is not a field  in the table
                properties with this attribute are ignored when building sql sentences
            </summary>
        </member>
        <member name="T:TheOne.OrmLite.Core.DataAnnotations.OrmLiteIgnoreOnSelectAttribute">
            <summary>
                Ignore this property in SELECT statements
            </summary>
        </member>
        <member name="T:TheOne.OrmLite.Core.DataAnnotations.OrmLiteIgnoreOnUpdateAttribute">
            <summary>
                Ignore this property in UPDATE statements
            </summary>
        </member>
        <member name="T:TheOne.OrmLite.Core.DataAnnotations.OrmLiteIgnoreOnInsertAttribute">
            <summary>
                Ignore this property in INSERT statements
            </summary>
        </member>
        <member name="T:TheOne.OrmLite.Core.DataAnnotations.OrmLiteIndexAttribute">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.DataAnnotations.OrmLiteIndexAttribute.#ctor">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.DataAnnotations.OrmLiteIndexAttribute.#ctor(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:TheOne.OrmLite.Core.DataAnnotations.OrmLitePostCreateTableAttribute">
            <summary>
                Inject custom sql after tables are created
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.DataAnnotations.OrmLitePostCreateTableAttribute.#ctor(System.String)">
            <inheritdoc />
        </member>
        <member name="T:TheOne.OrmLite.Core.DataAnnotations.OrmLitePostDropTableAttribute">
            <summary>
                Inject custom sql after tables are dropped
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.DataAnnotations.OrmLitePostDropTableAttribute.#ctor(System.String)">
            <inheritdoc />
        </member>
        <member name="T:TheOne.OrmLite.Core.DataAnnotations.OrmLitePreCreateTableAttribute">
            <summary>
                Inject custom sql before tables are created
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.DataAnnotations.OrmLitePreCreateTableAttribute.#ctor(System.String)">
            <inheritdoc />
        </member>
        <member name="T:TheOne.OrmLite.Core.DataAnnotations.OrmLitePreDropTableAttribute">
            <summary>
                Inject custom sql before tables are dropped
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.DataAnnotations.OrmLitePreDropTableAttribute.#ctor(System.String)">
            <inheritdoc />
        </member>
        <member name="T:TheOne.OrmLite.Core.DataAnnotations.OrmLitePrimaryKeyAttribute">
            <summary>
                Use to indicate that property is part of the pk
            </summary>
            <remarks>
                For simplicity, and to be able to have the same POCO class persisted,
                each model must have a single primary key, by convention OrmLite expects it to be `Id` ,
                although you use <see cref="T:TheOne.OrmLite.Core.DataAnnotations.OrmLiteAliasAttribute" /> attribute it map it to a column with a different name
                or use the <see cref="T:TheOne.OrmLite.Core.DataAnnotations.OrmLitePrimaryKeyAttribute" /> attribute to tell OrmLite to use a different property for the primary key.
                <para>
                    You can still `SELECT` from these tables, you will just be unable to make use of APIs that rely on it, e.g.
                    `Update` or `Delete` where the filter is implied (i.e. not specified), all the APIs that end with `ById`, etc.
                </para>
            </remarks>
        </member>
        <member name="T:TheOne.OrmLite.Core.DataAnnotations.OrmLiteReferenceAttribute">
            <summary>
                Store and load related entities in separate tables,
                use this in primary tables in conjunction with `{Parent}Id` property convention in child tables
            </summary>
        </member>
        <member name="T:TheOne.OrmLite.Core.DataAnnotations.OrmLiteReferencesAttribute">
            <summary>
                References that don't follow the naming conventions can be declared explicitly using
                the <see cref="T:TheOne.OrmLite.Core.DataAnnotations.OrmLiteReferencesAttribute" /> and <see cref="T:TheOne.OrmLite.Core.DataAnnotations.OrmLiteForeignKeyAttribute" /> attributes
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.DataAnnotations.OrmLiteReferencesAttribute.#ctor(System.Type)">
            <inheritdoc />
        </member>
        <member name="T:TheOne.OrmLite.Core.DataAnnotations.OrmLiteRequiredAttribute">
            <inheritdoc />
        </member>
        <member name="T:TheOne.OrmLite.Core.DataAnnotations.OrmLiteReturnOnInsertAttribute">
            <summary>
                Use to indicate that a property should be included in the
                returning/output clause of INSERT sql sentences
            </summary>
        </member>
        <member name="T:TheOne.OrmLite.Core.DataAnnotations.OrmLiteRowVersionAttribute">
            <summary>
                Use <see langword="long" /> or bytes type, indicate that property is a row version incremented automatically by the database
            </summary>
            <remarks>
                mysql - BLOB, TEXT, GEOMETRY or JSON column can't have a default value
            </remarks>
        </member>
        <member name="T:TheOne.OrmLite.Core.DataAnnotations.OrmLiteSchemaAttribute">
            <summary>
                Used to annotate an Entity with its DB schema
            </summary>
        </member>
        <member name="T:TheOne.OrmLite.Core.DataAnnotations.OrmLiteSequenceAttribute">
            <summary>
                Indicates name of generator for columns of type <see cref="T:TheOne.OrmLite.Core.DataAnnotations.OrmLiteAutoIncrementAttribute" />
                <para>You can override the automatically generated sequence name with a attribute on a field.</para>
                <para>The Sequence attribute implies <see cref="T:TheOne.OrmLite.Core.DataAnnotations.OrmLiteAutoIncrementAttribute" />, but you can use both on the same field.</para>
            </summary>
            <remarks>
                <para>
                    The Oracle provider uses Oracle sequences to implement <see cref="T:TheOne.OrmLite.Core.DataAnnotations.OrmLiteAutoIncrementAttribute" /> columns
                    and it queries the sequence to get a new value in a separate database call.
                </para>
                <para> SQL Server dialect greater than SQL Server 2012+</para>
            </remarks>
        </member>
        <member name="T:TheOne.OrmLite.Core.DataAnnotations.OrmLiteStringLengthAttribute">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.DataAnnotations.OrmLiteStringLengthAttribute.#ctor(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.DataAnnotations.OrmLiteStringLengthAttribute.#ctor(System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="T:TheOne.OrmLite.Core.DataAnnotations.OrmLiteUniqueAttribute">
            <inheritdoc />
        </member>
        <member name="T:TheOne.OrmLite.Core.DataAnnotations.OrmLiteUniqueConstraintAttribute">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.Definition.OrmLiteDbCommand.#ctor(TheOne.OrmLite.Core.Definition.OrmLiteDbConnection,System.Data.IDbCommand)">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.Definition.OrmLiteDbCommand.Dispose">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.Definition.OrmLiteDbCommand.Prepare">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.Definition.OrmLiteDbCommand.Cancel">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.Definition.OrmLiteDbCommand.CreateParameter">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.Definition.OrmLiteDbCommand.ExecuteNonQuery">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.Definition.OrmLiteDbCommand.ExecuteReader">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.Definition.OrmLiteDbCommand.ExecuteReader(System.Data.CommandBehavior)">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.Definition.OrmLiteDbCommand.ExecuteScalar">
            <inheritdoc />
        </member>
        <member name="P:TheOne.OrmLite.Core.Definition.OrmLiteDbCommand.Connection">
            <inheritdoc />
        </member>
        <member name="P:TheOne.OrmLite.Core.Definition.OrmLiteDbCommand.Transaction">
            <inheritdoc />
        </member>
        <member name="P:TheOne.OrmLite.Core.Definition.OrmLiteDbCommand.CommandText">
            <inheritdoc />
        </member>
        <member name="P:TheOne.OrmLite.Core.Definition.OrmLiteDbCommand.CommandTimeout">
            <inheritdoc />
        </member>
        <member name="P:TheOne.OrmLite.Core.Definition.OrmLiteDbCommand.CommandType">
            <inheritdoc />
        </member>
        <member name="P:TheOne.OrmLite.Core.Definition.OrmLiteDbCommand.Parameters">
            <inheritdoc />
        </member>
        <member name="P:TheOne.OrmLite.Core.Definition.OrmLiteDbCommand.UpdatedRowSource">
            <inheritdoc />
        </member>
        <member name="P:TheOne.OrmLite.Core.Definition.OrmLiteDbCommand.DbCommand">
            <inheritdoc />
        </member>
        <member name="T:TheOne.OrmLite.Core.Definition.OrmLiteDbConnection">
            <summary>
                Wrapper IDbConnection class to allow for connection sharing, mocking, etc.
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.Definition.OrmLiteDbConnection.Dispose">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.Definition.OrmLiteDbConnection.BeginTransaction">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.Definition.OrmLiteDbConnection.BeginTransaction(System.Data.IsolationLevel)">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.Definition.OrmLiteDbConnection.Close">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.Definition.OrmLiteDbConnection.ChangeDatabase(System.String)">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.Definition.OrmLiteDbConnection.CreateCommand">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.Definition.OrmLiteDbConnection.Open">
            <inheritdoc />
        </member>
        <member name="P:TheOne.OrmLite.Core.Definition.OrmLiteDbConnection.ConnectionString">
            <inheritdoc />
        </member>
        <member name="P:TheOne.OrmLite.Core.Definition.OrmLiteDbConnection.ConnectionTimeout">
            <inheritdoc />
        </member>
        <member name="P:TheOne.OrmLite.Core.Definition.OrmLiteDbConnection.Database">
            <inheritdoc />
        </member>
        <member name="P:TheOne.OrmLite.Core.Definition.OrmLiteDbConnection.State">
            <inheritdoc />
        </member>
        <member name="P:TheOne.OrmLite.Core.Definition.OrmLiteDbConnection.DbConnection">
            <inheritdoc />
        </member>
        <member name="P:TheOne.OrmLite.Core.Definition.OrmLiteDbConnection.DbTransaction">
            <inheritdoc />
        </member>
        <member name="P:TheOne.OrmLite.Core.Definition.OrmLiteDbConnection.Transaction">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.Definition.OrmLiteDbTransaction.#ctor(System.Data.IDbConnection,System.Data.IDbTransaction)">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.Definition.OrmLiteDbTransaction.Dispose">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.Definition.OrmLiteDbTransaction.Commit">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.Definition.OrmLiteDbTransaction.Rollback">
            <inheritdoc />
        </member>
        <member name="P:TheOne.OrmLite.Core.Definition.OrmLiteDbTransaction.Connection">
            <inheritdoc />
        </member>
        <member name="P:TheOne.OrmLite.Core.Definition.OrmLiteDbTransaction.IsolationLevel">
            <inheritdoc />
        </member>
        <member name="P:TheOne.OrmLite.Core.Definition.OrmLiteDbTransaction.DbTransaction">
            <inheritdoc />
        </member>
        <member name="P:TheOne.OrmLite.Core.Definition.OrmLiteFieldDefinition.FieldLength">
            <summary>
                Precision for Decimal Type
            </summary>
        </member>
        <member name="P:TheOne.OrmLite.Core.Definition.OrmLiteFieldDefinition.Scale">
            <summary>
                for decimal type
            </summary>
        </member>
        <member name="T:TheOne.OrmLite.Core.Expressions.OrmLiteParameterRebinder">
            <summary>
                http://blogs.msdn.com/b/meek/archive/2008/05/02/linq-to-entities-combining-predicates.aspx
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.Expressions.OrmLiteParameterRebinder.VisitParameter(System.Linq.Expressions.ParameterExpression)">
            <inheritdoc />
        </member>
        <member name="T:TheOne.OrmLite.Core.Expressions.OrmLitePredicateBuilder">
            <summary>
                Enables the efficient, dynamic composition of query predicates.
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.Expressions.OrmLitePredicateBuilder.True``1">
            <summary>
                Creates a predicate that evaluates to true.
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.Expressions.OrmLitePredicateBuilder.False``1">
            <summary>
                Creates a predicate that evaluates to false.
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.Expressions.OrmLitePredicateBuilder.Create``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
                Creates a predicate expression from the specified lambda expression.
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.Expressions.OrmLitePredicateBuilder.And``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
                Combines the first predicate with the second using the logical "and".
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.Expressions.OrmLitePredicateBuilder.Or``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
                Combines the first predicate with the second using the logical "or".
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.Expressions.OrmLitePredicateBuilder.Not``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
                Negates the predicate.
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.Expressions.OrmLitePredicateBuilder.Compose``1(System.Linq.Expressions.Expression{``0},System.Linq.Expressions.Expression{``0},System.Func{System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression})">
            <summary>
                Combines the first expression with the second using the specified merge function.
            </summary>
        </member>
        <member name="P:TheOne.OrmLite.Core.Expressions.OrmLiteSelectItem.Alias">
            <summary>
                Unquoted alias for the column or expression being selected.
            </summary>
        </member>
        <member name="T:TheOne.OrmLite.Core.Expressions.OrmLiteSelectItemColumn">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.Expressions.OrmLiteSelectItemColumn.#ctor(TheOne.OrmLite.Core.IOrmLiteDialectProvider,System.String,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="P:TheOne.OrmLite.Core.Expressions.OrmLiteSelectItemColumn.ColumnName">
            <summary>
                Unquoted column name being selected.
            </summary>
        </member>
        <member name="P:TheOne.OrmLite.Core.Expressions.OrmLiteSelectItemColumn.QuotedTableAlias">
            <summary>
                Table name or alias used to prefix the column name, if any. Already quoted.
            </summary>
        </member>
        <member name="P:TheOne.OrmLite.Core.Expressions.OrmLiteSelectItemExpression.SelectExpression">
            <summary>
                The SQL expression being selected, including any necessary quoting.
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.Expressions.OrmLiteSql.In``2(``0,``1[])">
            <summary>
                supports nesting and combining of multiple typed sql Expressions together in a single sql Query
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.Expressions.OrmLiteSql.In``2(``0,TheOne.OrmLite.Core.Expressions.OrmLiteSqlExpression{``1})">
            <summary>
                supports nesting and combining of multiple typed sql Expressions together in a single sql Query
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.Expressions.OrmLiteSql.JoinAlias(System.String,System.String)">
            <summary>
                tableAlias will be quoted with <see cref="M:TheOne.OrmLite.Core.IOrmLiteDialectProvider.GetQuotedTableName(System.String,System.String)" />
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.Expressions.OrmLiteSql.TableAlias(System.String,System.String)">
            <summary>
                tableAlias will be quoted with <see cref="M:TheOne.OrmLite.Core.IOrmLiteDialectProvider.GetQuotedTableName(System.String,System.String)" />
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.Expressions.OrmLiteSql.JoinAlias``1(``0,System.String)">
            <summary>
                tableAlias will be quoted with <see cref="M:TheOne.OrmLite.Core.IOrmLiteDialectProvider.GetQuotedTableName(System.String,System.String)" />
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.Expressions.OrmLiteSql.TableAlias``1(``0,System.String)">
            <summary>
                tableAlias will be quoted with <see cref="M:TheOne.OrmLite.Core.IOrmLiteDialectProvider.GetQuotedTableName(System.String,System.String)" />
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.Expressions.OrmLiteSql.Custom(System.String)">
            <summary>
                Use raw SQL Fragments
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.Expressions.OrmLiteSql.Cast(System.Object,System.String)">
            <summary>
                Provides a cross-database abstraction for casting columns or expressions in SQL queries
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.Expressions.OrmLiteSql.IsJson(System.String)">
            <summary>Tests whether a string contains valid JSON.</summary>
            <param name="expression" >The string to test.</param>
            <returns>Returns True if the string contains valid JSON; otherwise, returns False. Returns null if expression is null.</returns>
            <remarks>ISJSON does not check the uniqueness of keys at the same level.</remarks>
            <see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/isjson-transact-sql" />
        </member>
        <member name="M:TheOne.OrmLite.Core.Expressions.OrmLiteSql.JsonValue``1(System.String,System.String)">
            <summary>Extracts a scalar value from a JSON string.</summary>
            <param name="expression" >
                An expression. Typically the name of a variable or a column that contains JSON text.<br /><br />
                If <b>JSON_VALUE</b> finds JSON that is not valid in expression before it finds the value identified by <i>path</i>, the function
                returns an error. If <b>JSON_VALUE</b> doesn't find the value identified by <i>path</i>, it scans the entire text and returns an error
                if it finds JSON that is not valid anywhere in <i>expression</i>.
            </param>
            <param name="path" >
                A JSON path that specifies the property to extract. For more info, see
                <see href="https://docs.microsoft.com/en-us/sql/relational-databases/json/json-path-expressions-sql-server" >
                    JSON Path Expressions (SQL
                    Server)
                </see>
                .<br /><br />
                In SQL Server 2017 and in Azure SQL Database, you can provide a variable as the value of <i>path</i>.<br /><br />
                If the format of path isn't valid, <b>JSON_VALUE</b> returns an error.<br /><br />
            </param>
            <returns>
                Returns a single text value of type nvarchar(4000). The collation of the returned value is the same as the collation of the input
                expression.
                If the value is greater than 4000 characters: <br /><br />
                <ul>
                    <li>In lax mode, <b>JSON_VALUE</b> returns null.</li>
                    <li>In strict mode, <b>JSON_VALUE</b> returns an error.</li>
                </ul>
                <br />
                If you have to return scalar values greater than 4000 characters, use <b>OPENJSON</b> instead of <b>JSON_VALUE</b>. For more info, see
                <see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/openjson-transact-sql" >OPENJSON (Transact-SQL)</see>.
            </returns>
            <see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/json-value-transact-sql" />
        </member>
        <member name="M:TheOne.OrmLite.Core.Expressions.OrmLiteSql.JsonValue(System.String,System.String)">
            <summary>Extracts a scalar value from a JSON string.</summary>
            <param name="expression" >
                An expression. Typically the name of a variable or a column that contains JSON text.<br /><br />
                If <b>JSON_VALUE</b> finds JSON that is not valid in expression before it finds the value identified by <i>path</i>, the function
                returns an error. If <b>JSON_VALUE</b> doesn't find the value identified by <i>path</i>, it scans the entire text and returns an error
                if it finds JSON that is not valid anywhere in <i>expression</i>.
            </param>
            <param name="path" >
                A JSON path that specifies the property to extract. For more info, see
                <see href="https://docs.microsoft.com/en-us/sql/relational-databases/json/json-path-expressions-sql-server" >
                    JSON Path Expressions (SQL
                    Server)
                </see>
                .<br /><br />
                In SQL Server 2017 and in Azure SQL Database, you can provide a variable as the value of <i>path</i>.<br /><br />
                If the format of path isn't valid, <b>JSON_VALUE</b> returns an error.<br /><br />
            </param>
            <returns>
                Returns a single text value of type nvarchar(4000). The collation of the returned value is the same as the collation of the input
                expression.
                If the value is greater than 4000 characters: <br /><br />
                <ul>
                    <li>In lax mode, <b>JSON_VALUE</b> returns null.</li>
                    <li>In strict mode, <b>JSON_VALUE</b> returns an error.</li>
                </ul>
                <br />
                If you have to return scalar values greater than 4000 characters, use <b>OPENJSON</b> instead of <b>JSON_VALUE</b>. For more info, see
                <see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/openjson-transact-sql" >OPENJSON (Transact-SQL)</see>.
            </returns>
            <see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/json-value-transact-sql" />
        </member>
        <member name="M:TheOne.OrmLite.Core.Expressions.OrmLiteSql.JsonQuery(System.String)">
            <summary>
                Extracts an object or an array from a JSON string.<br /><br />
                To extract a scalar value from a JSON string instead of an object or an array, see
                <see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/json-value-transact-sql" >JSON_VALUE(Transact-SQL)</see>.
                For info about the differences between <b>JSON_VALUE</b> and <b>JSON_QUERY</b>, see
                <see href="https://docs.microsoft.com/en-us/sql/relational-databases/json/validate-query-and-change-json-data-with-built-in-functions-sql-server#JSONCompare" >
                    Compare
                    JSON_VALUE and JSON_QUERY
                </see>
                .
            </summary>
            <param name="expression" >
                An expression. Typically the name of a variable or a column that contains JSON text.<br /><br />
                If <b>JSON_QUERY</b> finds JSON that is not valid in <i>expression</i> before it finds the value identified by <i>path</i>, the
                function returns an error. If <b>JSON_QUERY</b> doesn't find the value identified by <i>path</i>, it scans the entire text and returns
                an error if it finds JSON that is not valid anywhere in <i>expression</i>.
            </param>
            <returns>
                Returns a JSON fragment of type T. The collation of the returned value is the same as the collation of the input expression.<br />
                <br />
                If the value is not an object or an array:
                <ul>
                    <li>In lax mode, <b>JSON_QUERY</b> returns null.</li>
                    <li>In strict mode, <b>JSON_QUERY</b> returns an error.</li>
                </ul>
            </returns>
        </member>
        <member name="P:TheOne.OrmLite.Core.Expressions.OrmLiteSqlExpression`1.SelectFilter">
            <summary>
                <see cref="P:TheOne.OrmLite.Core.OrmLiteConfig.SqlExpressionSelectFilter" />
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.Expressions.OrmLiteSqlExpression`1.Select">
            <summary>
                Clear select expression. All properties will be selected.
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.Expressions.OrmLiteSqlExpression`1.Select(System.String)">
            <summary>
                set the specified selectExpression.
            </summary>
            <param name='selectExpression' >
                raw Select expression: "SomeField1, SomeField2 from SomeTable"
            </param>
        </member>
        <member name="M:TheOne.OrmLite.Core.Expressions.OrmLiteSqlExpression`1.SelectDistinct(System.String)">
            <summary>
                set the specified DISTINCT selectExpression.
            </summary>
            <param name='selectExpression' >
                raw Select expression: "SomeField1, SomeField2 from SomeTable"
            </param>
        </member>
        <member name="M:TheOne.OrmLite.Core.Expressions.OrmLiteSqlExpression`1.Select(System.String[])">
            <summary>
                Set the specified selectExpression using matching fields.
            </summary>
            <param name='fields' >
                Matching Fields: "SomeField1, SomeField2"
            </param>
        </member>
        <member name="M:TheOne.OrmLite.Core.Expressions.OrmLiteSqlExpression`1.SelectDistinct(System.String[])">
            <summary>
                Set the specified DISTINCT selectExpression using matching fields.
            </summary>
            <param name='fields' >
                Matching Fields: "SomeField1, SomeField2"
            </param>
        </member>
        <member name="M:TheOne.OrmLite.Core.Expressions.OrmLiteSqlExpression`1.Where">
            <summary>
                clears the expression
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.Expressions.OrmLiteSqlExpression`1.OrderBy">
            <summary>
                clears orderBy Expression
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.Expressions.OrmLiteSqlExpression`1.Skip(System.Nullable{System.Int32})">
            <summary>
                Offset of the first row to return. The offset of the initial row is 0
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.Expressions.OrmLiteSqlExpression`1.Take(System.Nullable{System.Int32})">
            <summary>
                Number of rows returned by a SELECT statement
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.Expressions.OrmLiteSqlExpression`1.Limit(System.Int32,System.Int32)">
            <summary>
                Set the specified offset and rows for SQL Limit clause.
            </summary>
            <param name='skip' >
                Offset of the first row to return. The offset of the initial row is 0
            </param>
            <param name='rows' >
                Number of rows returned by a SELECT statement
            </param>
        </member>
        <member name="M:TheOne.OrmLite.Core.Expressions.OrmLiteSqlExpression`1.Limit(System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
                Set the specified offset and rows for SQL Limit clause where they exist.
            </summary>
            <param name='skip' >
                Offset of the first row to return. The offset of the initial row is 0
            </param>
            <param name='rows' >
                Number of rows returned by a SELECT statement
            </param>
        </member>
        <member name="M:TheOne.OrmLite.Core.Expressions.OrmLiteSqlExpression`1.Limit(System.Int32)">
            <summary>
                Set the specified rows for Sql Limit clause.
            </summary>
            <param name='rows' >
                Number of rows returned by a SELECT statement
            </param>
        </member>
        <member name="M:TheOne.OrmLite.Core.Expressions.OrmLiteSqlExpression`1.Limit">
            <summary>
                Clear Sql Limit clause
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.Expressions.OrmLiteSqlExpression`1.ClearLimits">
            <summary>
                Clear Offset and Limit clauses. Alias for Limit()
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.Expressions.OrmLiteSqlExpression`1.Update(System.Collections.Generic.List{System.String})">
            <summary>
                Fields to be updated.
            </summary>
            <param name='updateFields' >
                List&lt;string&gt; containing Names of properties to be updated
            </param>
        </member>
        <member name="M:TheOne.OrmLite.Core.Expressions.OrmLiteSqlExpression`1.Update(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
                Fields to be updated.
            </summary>
            <param name='updateFields' >
                IEnumerable&lt;string&gt; containing Names of properties to be updated
            </param>
        </member>
        <member name="M:TheOne.OrmLite.Core.Expressions.OrmLiteSqlExpression`1.Update(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
                Fields to be updated.
            </summary>
            <param name='fields' >
                x=> x.SomeProperty1 or x=> new { x.SomeProperty1, x.SomeProperty2 }
            </param>
        </member>
        <member name="M:TheOne.OrmLite.Core.Expressions.OrmLiteSqlExpression`1.Update">
            <summary>
                Clear UpdateFields list ( all fields will be updated)
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.Expressions.OrmLiteSqlExpression`1.Insert``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
                Fields to be inserted.
            </summary>
            <param name='fields' >
                x=> x.SomeProperty1 or x=> new{ x.SomeProperty1, x.SomeProperty2}
            </param>
            <typeparam name='TKey' >
                objectWithProperties
            </typeparam>
        </member>
        <member name="M:TheOne.OrmLite.Core.Expressions.OrmLiteSqlExpression`1.Insert(System.Collections.Generic.List{System.String})">
            <summary>
                fields to be inserted.
            </summary>
            <param name='insertFields' >
                IList&lt;string&gt; containing Names of properties to be inserted
            </param>
        </member>
        <member name="M:TheOne.OrmLite.Core.Expressions.OrmLiteSqlExpression`1.Insert">
            <summary>
                Clear InsertFields list ( all fields will be inserted)
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.Expressions.OrmLiteSqlExpression`1.ToMergedParamsSelectStatement">
            <summary>
                Merge params into an encapsulated SQL Statement with embedded param values
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.Expressions.OrmLiteSqlExpression`1.IsBooleanComparison(System.Linq.Expressions.Expression)">
            <summary>
                Determines whether the expression is the parameter inside MemberExpression which should be compared with TrueExpression.
            </summary>
            <returns>
                Returns true if the specified expression is the parameter inside MemberExpression which should be compared with TrueExpression;
                otherwise, false.
            </returns>
        </member>
        <member name="M:TheOne.OrmLite.Core.Expressions.OrmLiteSqlExpression`1.IsParameterAccess(System.Linq.Expressions.Expression)">
            <summary>
                Determines whether the expression is the parameter.
            </summary>
            <returns>
                Returns true if the specified expression is parameter;
                otherwise, false.
            </returns>
        </member>
        <member name="M:TheOne.OrmLite.Core.Expressions.OrmLiteSqlExpression`1.IsParameterOrConvertAccess(System.Linq.Expressions.Expression)">
            <summary>
                Determines whether the expression is a Parameter or Convert Expression.
            </summary>
            <returns>
                Returns true if the specified expression is parameter or convert;
                otherwise, false.
            </returns>
        </member>
        <member name="M:TheOne.OrmLite.Core.Expressions.OrmLiteSqlExpression`1.Select(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
                Fields to be selected.
            </summary>
            <param name='fields' >
                x=> x.SomeProperty1 or x=> new{ x.SomeProperty1, x.SomeProperty2}
            </param>
        </member>
        <member name="M:TheOne.OrmLite.Core.Expressions.OrmLiteSqlExpression`1.SelectInto``1">
            <inheritdoc />
        </member>
        <member name="T:TheOne.OrmLite.Core.Expressions.OrmLiteSqlExpressionVisitor">
            <summary>
                <see href="http://blogs.msdn.com/b/mattwar/archive/2007/07/31/linq-building-an-iqueryable-provider-part-ii.aspx" />
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.Expressions.UntypedOrmLiteSqlExpressionProxy`1.#ctor(TheOne.OrmLite.Core.Expressions.OrmLiteSqlExpression{`0})">
            <inheritdoc />
        </member>
        <member name="P:TheOne.OrmLite.Core.Expressions.UntypedOrmLiteSqlExpressionProxy`1.PrefixFieldWithTableName">
            <inheritdoc />
        </member>
        <member name="P:TheOne.OrmLite.Core.Expressions.UntypedOrmLiteSqlExpressionProxy`1.WhereStatementWithoutWhereString">
            <inheritdoc />
        </member>
        <member name="P:TheOne.OrmLite.Core.Expressions.UntypedOrmLiteSqlExpressionProxy`1.DialectProvider">
            <inheritdoc />
        </member>
        <member name="P:TheOne.OrmLite.Core.Expressions.UntypedOrmLiteSqlExpressionProxy`1.Params">
            <inheritdoc />
        </member>
        <member name="P:TheOne.OrmLite.Core.Expressions.UntypedOrmLiteSqlExpressionProxy`1.FromExpression">
            <inheritdoc />
        </member>
        <member name="P:TheOne.OrmLite.Core.Expressions.UntypedOrmLiteSqlExpressionProxy`1.BodyExpression">
            <inheritdoc />
        </member>
        <member name="P:TheOne.OrmLite.Core.Expressions.UntypedOrmLiteSqlExpressionProxy`1.WhereExpression">
            <inheritdoc />
        </member>
        <member name="P:TheOne.OrmLite.Core.Expressions.UntypedOrmLiteSqlExpressionProxy`1.GroupByExpression">
            <inheritdoc />
        </member>
        <member name="P:TheOne.OrmLite.Core.Expressions.UntypedOrmLiteSqlExpressionProxy`1.HavingExpression">
            <inheritdoc />
        </member>
        <member name="P:TheOne.OrmLite.Core.Expressions.UntypedOrmLiteSqlExpressionProxy`1.OrderByExpression">
            <inheritdoc />
        </member>
        <member name="P:TheOne.OrmLite.Core.Expressions.UntypedOrmLiteSqlExpressionProxy`1.TableAlias">
            <inheritdoc />
        </member>
        <member name="P:TheOne.OrmLite.Core.Expressions.UntypedOrmLiteSqlExpressionProxy`1.Rows">
            <inheritdoc />
        </member>
        <member name="P:TheOne.OrmLite.Core.Expressions.UntypedOrmLiteSqlExpressionProxy`1.Offset">
            <inheritdoc />
        </member>
        <member name="P:TheOne.OrmLite.Core.Expressions.UntypedOrmLiteSqlExpressionProxy`1.UpdateFields">
            <inheritdoc />
        </member>
        <member name="P:TheOne.OrmLite.Core.Expressions.UntypedOrmLiteSqlExpressionProxy`1.InsertFields">
            <inheritdoc />
        </member>
        <member name="P:TheOne.OrmLite.Core.Expressions.UntypedOrmLiteSqlExpressionProxy`1.ModelDef">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.Expressions.UntypedOrmLiteSqlExpressionProxy`1.Clone">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.Expressions.UntypedOrmLiteSqlExpressionProxy`1.Select">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.Expressions.UntypedOrmLiteSqlExpressionProxy`1.Select(System.String)">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.Expressions.UntypedOrmLiteSqlExpressionProxy`1.UnsafeSelect(System.String)">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.Expressions.UntypedOrmLiteSqlExpressionProxy`1.Select``2(System.Linq.Expressions.Expression{System.Func{``0,``1,System.Object}})">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.Expressions.UntypedOrmLiteSqlExpressionProxy`1.Select``3(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,System.Object}})">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.Expressions.UntypedOrmLiteSqlExpressionProxy`1.SelectDistinct``2(System.Linq.Expressions.Expression{System.Func{``0,``1,System.Object}})">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.Expressions.UntypedOrmLiteSqlExpressionProxy`1.SelectDistinct``3(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,System.Object}})">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.Expressions.UntypedOrmLiteSqlExpressionProxy`1.SelectDistinct">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.Expressions.UntypedOrmLiteSqlExpressionProxy`1.From(System.String)">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.Expressions.UntypedOrmLiteSqlExpressionProxy`1.UnsafeFrom(System.String)">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.Expressions.UntypedOrmLiteSqlExpressionProxy`1.Where">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.Expressions.UntypedOrmLiteSqlExpressionProxy`1.UnsafeWhere(System.String,System.Object[])">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.Expressions.UntypedOrmLiteSqlExpressionProxy`1.Where(System.String,System.Object[])">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.Expressions.UntypedOrmLiteSqlExpressionProxy`1.UnsafeAnd(System.String,System.Object[])">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.Expressions.UntypedOrmLiteSqlExpressionProxy`1.And(System.String,System.Object[])">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.Expressions.UntypedOrmLiteSqlExpressionProxy`1.UnsafeOr(System.String,System.Object[])">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.Expressions.UntypedOrmLiteSqlExpressionProxy`1.Or(System.String,System.Object[])">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.Expressions.UntypedOrmLiteSqlExpressionProxy`1.AddCondition(System.String,System.String,System.Object[])">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.Expressions.UntypedOrmLiteSqlExpressionProxy`1.GroupBy">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.Expressions.UntypedOrmLiteSqlExpressionProxy`1.GroupBy(System.String)">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.Expressions.UntypedOrmLiteSqlExpressionProxy`1.Having">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.Expressions.UntypedOrmLiteSqlExpressionProxy`1.Having(System.String,System.Object[])">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.Expressions.UntypedOrmLiteSqlExpressionProxy`1.OrderBy">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.Expressions.UntypedOrmLiteSqlExpressionProxy`1.OrderBy(System.String)">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.Expressions.UntypedOrmLiteSqlExpressionProxy`1.GetModelDefinition(TheOne.OrmLite.Core.Definition.OrmLiteFieldDefinition)">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.Expressions.UntypedOrmLiteSqlExpressionProxy`1.OrderByFields(TheOne.OrmLite.Core.Definition.OrmLiteFieldDefinition[])">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.Expressions.UntypedOrmLiteSqlExpressionProxy`1.OrderByFieldsDescending(TheOne.OrmLite.Core.Definition.OrmLiteFieldDefinition[])">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.Expressions.UntypedOrmLiteSqlExpressionProxy`1.OrderByFields(System.String[])">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.Expressions.UntypedOrmLiteSqlExpressionProxy`1.OrderByFieldsDescending(System.String[])">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.Expressions.UntypedOrmLiteSqlExpressionProxy`1.OrderBy``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.Expressions.UntypedOrmLiteSqlExpressionProxy`1.ThenBy(System.String)">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.Expressions.UntypedOrmLiteSqlExpressionProxy`1.ThenBy``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.Expressions.UntypedOrmLiteSqlExpressionProxy`1.OrderByDescending``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.Expressions.UntypedOrmLiteSqlExpressionProxy`1.OrderByDescending(System.String)">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.Expressions.UntypedOrmLiteSqlExpressionProxy`1.ThenByDescending(System.String)">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.Expressions.UntypedOrmLiteSqlExpressionProxy`1.ThenByDescending``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.Expressions.UntypedOrmLiteSqlExpressionProxy`1.Skip(System.Nullable{System.Int32})">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.Expressions.UntypedOrmLiteSqlExpressionProxy`1.Take(System.Nullable{System.Int32})">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.Expressions.UntypedOrmLiteSqlExpressionProxy`1.Limit(System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.Expressions.UntypedOrmLiteSqlExpressionProxy`1.Limit(System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.Expressions.UntypedOrmLiteSqlExpressionProxy`1.Limit(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.Expressions.UntypedOrmLiteSqlExpressionProxy`1.Limit">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.Expressions.UntypedOrmLiteSqlExpressionProxy`1.ClearLimits">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.Expressions.UntypedOrmLiteSqlExpressionProxy`1.Update(System.Collections.Generic.List{System.String})">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.Expressions.UntypedOrmLiteSqlExpressionProxy`1.Update">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.Expressions.UntypedOrmLiteSqlExpressionProxy`1.Insert(System.Collections.Generic.List{System.String})">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.Expressions.UntypedOrmLiteSqlExpressionProxy`1.Insert">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.Expressions.UntypedOrmLiteSqlExpressionProxy`1.CreateParam(System.String,System.Object,System.Data.ParameterDirection,System.Nullable{System.Data.DbType})">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.Expressions.UntypedOrmLiteSqlExpressionProxy`1.Join``2(System.Linq.Expressions.Expression{System.Func{``0,``1,System.Boolean}})">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.Expressions.UntypedOrmLiteSqlExpressionProxy`1.Join(System.Type,System.Type,System.Linq.Expressions.Expression)">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.Expressions.UntypedOrmLiteSqlExpressionProxy`1.LeftJoin``2(System.Linq.Expressions.Expression{System.Func{``0,``1,System.Boolean}})">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.Expressions.UntypedOrmLiteSqlExpressionProxy`1.LeftJoin(System.Type,System.Type,System.Linq.Expressions.Expression)">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.Expressions.UntypedOrmLiteSqlExpressionProxy`1.RightJoin``2(System.Linq.Expressions.Expression{System.Func{``0,``1,System.Boolean}})">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.Expressions.UntypedOrmLiteSqlExpressionProxy`1.FullJoin``2(System.Linq.Expressions.Expression{System.Func{``0,``1,System.Boolean}})">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.Expressions.UntypedOrmLiteSqlExpressionProxy`1.CrossJoin``2(System.Linq.Expressions.Expression{System.Func{``0,``1,System.Boolean}})">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.Expressions.UntypedOrmLiteSqlExpressionProxy`1.CustomJoin(System.String)">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.Expressions.UntypedOrmLiteSqlExpressionProxy`1.Where``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.Expressions.UntypedOrmLiteSqlExpressionProxy`1.Where``2(System.Linq.Expressions.Expression{System.Func{``0,``1,System.Boolean}})">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.Expressions.UntypedOrmLiteSqlExpressionProxy`1.And``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.Expressions.UntypedOrmLiteSqlExpressionProxy`1.And``2(System.Linq.Expressions.Expression{System.Func{``0,``1,System.Boolean}})">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.Expressions.UntypedOrmLiteSqlExpressionProxy`1.Or``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.Expressions.UntypedOrmLiteSqlExpressionProxy`1.Or``2(System.Linq.Expressions.Expression{System.Func{``0,``1,System.Boolean}})">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.Expressions.UntypedOrmLiteSqlExpressionProxy`1.SqlTable(TheOne.OrmLite.Core.Definition.OrmLiteModelDefinition)">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.Expressions.UntypedOrmLiteSqlExpressionProxy`1.SqlColumn(System.String)">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.Expressions.UntypedOrmLiteSqlExpressionProxy`1.ToDeleteRowStatement">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.Expressions.UntypedOrmLiteSqlExpressionProxy`1.ToSelectStatement">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.Expressions.UntypedOrmLiteSqlExpressionProxy`1.ToCountStatement">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.Expressions.UntypedOrmLiteSqlExpressionProxy`1.GetAllFields">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.Expressions.UntypedOrmLiteSqlExpressionProxy`1.FirstMatchingField(System.String)">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.Expressions.UntypedOrmLiteSqlExpressionProxy`1.SelectInto``1">
            <inheritdoc />
        </member>
        <member name="T:TheOne.OrmLite.Core.IEntityStore`1">
            <summary>
                For providers that want a cleaner API with a little more perf
            </summary>
        </member>
        <member name="T:TheOne.OrmLite.Core.ISoftDelete">
            <summary>
                See <see cref="P:TheOne.OrmLite.Core.OrmLiteConfig.SqlExpressionSelectFilter" /> and <see cref="P:TheOne.OrmLite.Core.Expressions.OrmLiteSqlExpression`1.SelectFilter" />
            </summary>
            <remarks>
                example 1:
                <code><![CDATA[
                OrmLiteConfig.SqlExpressionSelectFilter = q => {
                    if (q.ModelDef.ModelType.HasInterface(typeof(ISoftDelete))) {
                        q.Where<ISoftDelete>(x => !x.IsDeleted);
                    }
                };
            ]]></code>
                example 2:
                <code><![CDATA[
                OrmLiteSqlExpression<Table1>.SelectFilter = q => q.Where(x => x.IsDeleted != true);
                OrmLiteSqlExpression<Table2>.SelectFilter = q => q.Where(x => x.IsDeleted != true);
            ]]></code>
            </remarks>
        </member>
        <member name="T:TheOne.OrmLite.Core.IHasCreatedDateTime">
            <summary>
                <see cref="P:TheOne.OrmLite.Core.OrmLiteConfig.InsertFilter" />
            </summary>
        </member>
        <member name="T:TheOne.OrmLite.Core.IHasModifiedDateTime">
            <summary>
                <see cref="P:TheOne.OrmLite.Core.OrmLiteConfig.UpdateFilter" />
            </summary>
        </member>
        <member name="T:TheOne.OrmLite.Core.IHasGuidId">
            <inheritdoc />
        </member>
        <member name="T:TheOne.OrmLite.Core.IHasIntId">
            <inheritdoc />
        </member>
        <member name="T:TheOne.OrmLite.Core.IHasLongId">
            <inheritdoc />
        </member>
        <member name="T:TheOne.OrmLite.Core.IHasStringId">
            <inheritdoc />
        </member>
        <member name="P:TheOne.OrmLite.Core.IOrmLiteDialectProvider.OnOpenConnection">
            <summary>
                Invoked when a DB Connection is opened
            </summary>
        </member>
        <member name="P:TheOne.OrmLite.Core.IOrmLiteDialectProvider.Variables">
            <summary>
                See <see cref="T:TheOne.OrmLite.Core.OrmLiteVariables" />
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.IOrmLiteDialectProvider.GetConverter(System.Type)">
            <summary>
                Gets the explicit Converter registered for a specific type
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.IOrmLiteDialectProvider.GetConverterBestMatch(System.Type)">
            <summary>
                Return best matching converter, falling back to Enum, Value or Ref Type Converters
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.IOrmLiteDialectProvider.GetQuotedValue(System.String)">
            <summary>
                Quote the string so that it can be used inside an SQL-expression
                Escape quotes inside the string
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.IOrmLiteDialectProvider.InitQueryParam(System.Data.IDbDataParameter)">
            <summary>
                Customize DB Parameters in SELECT or WHERE queries
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.IOrmLiteDialectProvider.InitUpdateParam(System.Data.IDbDataParameter)">
            <summary>
                Customize UPDATE or INSERT DB Parameters
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.IOrmLiteDialectProvider.PrepareParameterizedUpdateStatement``1(System.Data.IDbCommand,System.Collections.Generic.ICollection{System.String})">
            <returns>If had RowVersion</returns>
        </member>
        <member name="M:TheOne.OrmLite.Core.IOrmLiteDialectProvider.PrepareParameterizedDeleteStatement``1(System.Data.IDbCommand,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <returns>If had RowVersion</returns>
        </member>
        <member name="M:TheOne.OrmLite.Core.IOrmLiteDialectProvider.ToTableNamesWithRowCountsStatement(System.Boolean,System.String)">
            <summary>
                Return table, row count SQL for listing all tables with their row counts
            </summary>
            <param name="live" >
                If true returns live current row counts of each table (slower), otherwise returns cached row counts from RDBMS table
                stats
            </param>
            <param name="schema" >The table schema if any</param>
        </member>
        <member name="T:TheOne.OrmLite.Core.IOrmLiteExecFilter">
            <summary>
                Inject your own behavior, tracing, profiling, etc.
            </summary>
        </member>
        <member name="T:TheOne.OrmLite.Core.OptimisticConcurrencyException">
            <inheritdoc />
        </member>
        <member name="T:TheOne.OrmLite.Core.DataException">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.DataException.#ctor">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.DataException.#ctor(System.String)">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.DataException.#ctor(System.String,System.Exception)">
            <inheritdoc />
        </member>
        <member name="T:TheOne.OrmLite.Core.Internal.LoadListAsync`2">
            <inheritdoc />
        </member>
        <member name="T:TheOne.OrmLite.Core.Internal.LoadListSync`2">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.Internal.LoadListSync`2.#ctor(System.Data.IDbCommand,TheOne.OrmLite.Core.Expressions.OrmLiteSqlExpression{`1})">
            <inheritdoc />
        </member>
        <member name="T:TheOne.OrmLite.Core.Internal.LoadReferencesAsync`1">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.Internal.LoadReferencesAsync`1.#ctor(System.Data.IDbCommand,`0)">
            <inheritdoc />
        </member>
        <member name="T:TheOne.OrmLite.Core.Internal.LoadReferencesSync`1">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.Internal.LoadReferencesSync`1.#ctor(System.Data.IDbCommand,`0)">
            <inheritdoc />
        </member>
        <member name="T:TheOne.OrmLite.Core.JsonStringSerializer">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.JsonStringSerializer.DeserializeFromString``1(System.String)">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.JsonStringSerializer.DeserializeFromString(System.String,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.JsonStringSerializer.SerializeToString``1(``0)">
            <inheritdoc />
        </member>
        <member name="T:TheOne.OrmLite.Core.AliasNamingStrategy">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.AliasNamingStrategy.GetTableName(System.String)">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.AliasNamingStrategy.GetColumnName(System.String)">
            <inheritdoc />
        </member>
        <member name="T:TheOne.OrmLite.Core.LowercaseUnderscoreNamingStrategy">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.LowercaseUnderscoreNamingStrategy.GetTableName(System.String)">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.LowercaseUnderscoreNamingStrategy.GetColumnName(System.String)">
            <inheritdoc />
        </member>
        <member name="T:TheOne.OrmLite.Core.UpperCaseNamingStrategy">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.UpperCaseNamingStrategy.GetTableName(System.String)">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.UpperCaseNamingStrategy.GetColumnName(System.String)">
            <inheritdoc />
        </member>
        <member name="P:TheOne.OrmLite.Core.OrmLiteConfig.StripUpperInLike">
            <summary>
                Use `UPPER()` in **LIKE** searches to enable case-insensitive **LIKE** queries across all RDBMS.
                The drawback of this is that LIKE Queries are not able to use any existing RDBMS indexes.
                Set True to disable this feature and return to the default RDBMS behavior
            </summary>
            <remarks>
                .NET Core defaults to <see langword="true" />
            </remarks>
        </member>
        <member name="P:TheOne.OrmLite.Core.OrmLiteConfig.InsertFilter">
            <summary>
                <code>
            OrmLiteConfig.InsertFilter = (command, o) => {
                if (o is IHasCreatedDateTime model) {
                    // mark Created with OrmLiteIgnoreOnUpdate
                    model.Created = DateTime.Now;
                }
            }; </code>
            </summary>
        </member>
        <member name="P:TheOne.OrmLite.Core.OrmLiteConfig.UpdateFilter">
            <summary>
                <code>
            OrmLiteConfig.UpdateFilter = (command, o) => {
                if (o is IHasModifiedDateTime model) {
                    // mark Modified with OrmLiteIgnoreOnInsert
                    model.Modified = DateTime.Now;
                }
            }; </code>
            </summary>
        </member>
        <member name="P:TheOne.OrmLite.Core.OrmLiteConfig.SqlExpressionSelectFilter">
            <summary>
                Modify queries that use <see cref="T:TheOne.OrmLite.Core.Expressions.OrmLiteSqlExpression`1" /> before they're executed.
                This could be used to make working with "Soft Deletes" Tables (<see cref="T:TheOne.OrmLite.Core.ISoftDelete" />) easier
                where it can be made to apply a custom `x.IsDeleted != true` condition on every <see cref="T:TheOne.OrmLite.Core.Expressions.OrmLiteSqlExpression`1" />.
            </summary>
        </member>
        <member name="P:TheOne.OrmLite.Core.OrmLiteConfig.LoadReferenceSelectFilter">
            <summary>
                Enable users access to the Ref Sql Statement
            </summary>
            <remarks>
                Filter/Adjust the Ref Sql Queries before being executed,
                a use case is being able to append a AND clause to the end allow for the filtration of "soft deleted" records
            </remarks>
        </member>
        <member name="P:TheOne.OrmLite.Core.OrmLiteConfig.StringFilter">
            <summary>
                Apply custom sanitization on string fields.
            </summary>
            <remarks>
                <code> OrmLiteConfig.StringFilter = s => s.TrimEnd(); </code>
            </remarks>
        </member>
        <member name="P:TheOne.OrmLite.Core.OrmLiteConfig.OnDbNullFilter">
            <summary>
                Replace DBNull values with a custom value, so you could convert all `null` strings to be populated with `"NULL"`.
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteConflictResolutions.OnConflict(System.Data.IDbCommand,System.String)">
            <summary>
                Ignore any conflicts that occurs and continue inserting the remaining rows in SQLite, MySql and PostgreSql,
                whilst in SQL Server it's a NOOP
            </summary>
            <remarks>
                Sqlite offers <see href="https://sqlite.org/lang_conflict.html" ></see>additional fine-grained behavior
                (ROLLBACK, ABORT, FAIL, IGNORE, REPLACE)
                that can be specified for when a conflict occurs
            </remarks>
        </member>
        <member name="T:TheOne.OrmLite.Core.OrmLiteConnectionFactory">
            <summary>
                Allow for mocking and unit testing by providing non-disposing
                connection factory with injectable IDbCommand and IDbTransaction proxies
            </summary>
        </member>
        <member name="P:TheOne.OrmLite.Core.OrmLiteConnectionFactory.AlwaysReturnCommand">
            <summary>
                Force the IDbConnection to always return this IDbCommand
            </summary>
        </member>
        <member name="P:TheOne.OrmLite.Core.OrmLiteConnectionFactory.AlwaysReturnTransaction">
            <summary>
                Force the IDbConnection to always return this IDbTransaction
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteConnectionFactory.CreateDbConnection">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteConnectionFactory.OpenDbConnection">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteConnectionFactory.OpenDbConnectionString(System.String)">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteConnectionFactory.OpenDbConnectionString(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteConnectionFactory.OpenDbConnection(System.String)">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteConnectionFactoryExtensions.Open(TheOne.OrmLite.Core.IDbConnectionFactory)">
            <summary>
                Alias for OpenDbConnection
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteConnectionFactoryExtensions.OpenAsync(TheOne.OrmLite.Core.IDbConnectionFactory,System.Threading.CancellationToken)">
            <summary>
                Alias for OpenDbConnectionAsync
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteConnectionFactoryExtensions.Open(TheOne.OrmLite.Core.IDbConnectionFactory,System.String)">
            <summary>
                Alias for OpenDbConnection
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteConnectionFactoryExtensions.OpenAsync(TheOne.OrmLite.Core.IDbConnectionFactory,System.String,System.Threading.CancellationToken)">
            <summary>
                Alias for OpenDbConnectionAsync
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteConnectionFactoryExtensions.OpenDbConnection(TheOne.OrmLite.Core.IDbConnectionFactory,System.String)">
            <summary>
                Alias for OpenDbConnection
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteConnectionFactoryExtensions.OpenDbConnectionString(TheOne.OrmLite.Core.IDbConnectionFactory,System.String)">
            <summary>
                Alias for OpenDbConnection
            </summary>
        </member>
        <member name="P:TheOne.OrmLite.Core.OrmLiteContext.Items">
            <summary>
                Gets a list of items for this context.
            </summary>
        </member>
        <member name="T:TheOne.OrmLite.Core.OrmLiteDialectProviderBase">
            <inheritdoc />
        </member>
        <member name="P:TheOne.OrmLite.Core.OrmLiteDialectProviderBase.CreateTableFieldsStrategy">
            <summary>
                change order of columns
            </summary>
        </member>
        <member name="P:TheOne.OrmLite.Core.OrmLiteDialectProviderBase.ParamString">
            <inheritdoc />
        </member>
        <member name="P:TheOne.OrmLite.Core.OrmLiteDialectProviderBase.Variables">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteDialectProviderBase.CreateParam">
            <inheritdoc />
        </member>
        <member name="P:TheOne.OrmLite.Core.OrmLiteDialectProviderBase.ExecFilter">
            <inheritdoc />
        </member>
        <member name="P:TheOne.OrmLite.Core.OrmLiteDialectProviderBase.NamingStrategy">
            <inheritdoc />
        </member>
        <member name="P:TheOne.OrmLite.Core.OrmLiteDialectProviderBase.StringSerializer">
            <inheritdoc />
        </member>
        <member name="P:TheOne.OrmLite.Core.OrmLiteDialectProviderBase.ParamNameFilter">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteDialectProviderBase.RegisterConverter``1(TheOne.OrmLite.Core.Converters.IOrmLiteConverter)">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteDialectProviderBase.GetConverter(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteDialectProviderBase.FromDbRowVersion(System.Type,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteDialectProviderBase.GetConverterBestMatch(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteDialectProviderBase.GetConverterBestMatch(TheOne.OrmLite.Core.Definition.OrmLiteFieldDefinition)">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteDialectProviderBase.ToDbValue(System.Object,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteDialectProviderBase.FromDbValue(System.Object,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteDialectProviderBase.GetValue(System.Data.IDataReader,System.Int32,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteDialectProviderBase.GetValues(System.Data.IDataReader,System.Object[])">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteDialectProviderBase.CreateConnection(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteDialectProviderBase.ToCreateSchemaStatement(System.String)">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteDialectProviderBase.DoesSchemaExist(System.Data.IDbCommand,System.String)">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteDialectProviderBase.GetQuotedValue(System.String)">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteDialectProviderBase.GetTableName(TheOne.OrmLite.Core.Definition.OrmLiteModelDefinition)">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteDialectProviderBase.GetTableName(TheOne.OrmLite.Core.Definition.OrmLiteModelDefinition,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteDialectProviderBase.GetTableName(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteDialectProviderBase.GetTableName(System.String,System.String,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteDialectProviderBase.GetQuotedTableName(TheOne.OrmLite.Core.Definition.OrmLiteModelDefinition)">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteDialectProviderBase.GetQuotedTableName(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteDialectProviderBase.GetQuotedColumnName(System.String)">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteDialectProviderBase.GetQuotedName(System.String)">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteDialectProviderBase.GetQuotedName(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteDialectProviderBase.SanitizeFieldNameForParamName(System.String)">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteDialectProviderBase.GetColumnDefinition(TheOne.OrmLite.Core.Definition.OrmLiteFieldDefinition)">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteDialectProviderBase.ToSelectStatement(System.Type,System.String,System.Object[])">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteDialectProviderBase.ToSelectStatement(TheOne.OrmLite.Core.Definition.OrmLiteModelDefinition,System.String,System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteDialectProviderBase.GetRowVersionSelectColumn(TheOne.OrmLite.Core.Definition.OrmLiteFieldDefinition,System.String)">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteDialectProviderBase.GetRowVersionColumn(TheOne.OrmLite.Core.Definition.OrmLiteFieldDefinition,System.String)">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteDialectProviderBase.GetColumnNames(TheOne.OrmLite.Core.Definition.OrmLiteModelDefinition)">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteDialectProviderBase.GetColumnNames(TheOne.OrmLite.Core.Definition.OrmLiteModelDefinition,System.String)">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteDialectProviderBase.ToInsertRowStatement(System.Data.IDbCommand,System.Object,System.Collections.Generic.ICollection{System.String})">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteDialectProviderBase.ToInsertStatement``1(System.Data.IDbCommand,``0,System.Collections.Generic.ICollection{System.String})">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteDialectProviderBase.PrepareParameterizedInsertStatement``1(System.Data.IDbCommand,System.Collections.Generic.ICollection{System.String})">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteDialectProviderBase.PrepareInsertRowStatement``1(System.Data.IDbCommand,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteDialectProviderBase.ToUpdateStatement``1(System.Data.IDbCommand,``0,System.Collections.Generic.ICollection{System.String})">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteDialectProviderBase.MergeParamsIntoSql(System.String,System.Collections.Generic.IEnumerable{System.Data.IDbDataParameter})">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteDialectProviderBase.PrepareParameterizedUpdateStatement``1(System.Data.IDbCommand,System.Collections.Generic.ICollection{System.String})">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteDialectProviderBase.PrepareParameterizedDeleteStatement``1(System.Data.IDbCommand,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteDialectProviderBase.PrepareStoredProcedureStatement``1(System.Data.IDbCommand,``0)">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteDialectProviderBase.SetParameter(TheOne.OrmLite.Core.Definition.OrmLiteFieldDefinition,System.Data.IDbDataParameter)">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteDialectProviderBase.SetParameterValues``1(System.Data.IDbCommand,System.Object,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteDialectProviderBase.GetFieldDefinitionMap(TheOne.OrmLite.Core.Definition.OrmLiteModelDefinition)">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteDialectProviderBase.GetFieldValue(TheOne.OrmLite.Core.Definition.OrmLiteFieldDefinition,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteDialectProviderBase.GetFieldValue(System.Type,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteDialectProviderBase.PrepareUpdateRowStatement(System.Data.IDbCommand,System.Object,System.Collections.Generic.ICollection{System.String})">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteDialectProviderBase.PrepareUpdateRowStatement``1(System.Data.IDbCommand,System.Collections.Generic.Dictionary{System.String,System.Object},System.String)">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteDialectProviderBase.PrepareUpdateRowAddStatement``1(System.Data.IDbCommand,System.Collections.Generic.Dictionary{System.String,System.Object},System.String)">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteDialectProviderBase.ToDeleteStatement(System.Type,System.String,System.Object[])">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteDialectProviderBase.HasInsertReturnValues(TheOne.OrmLite.Core.Definition.OrmLiteModelDefinition)">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteDialectProviderBase.GetDefaultValue(System.Type,System.String)">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteDialectProviderBase.GetDefaultValue(TheOne.OrmLite.Core.Definition.OrmLiteFieldDefinition)">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteDialectProviderBase.ToCreateTableStatement(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteDialectProviderBase.ToPostCreateTableStatement(TheOne.OrmLite.Core.Definition.OrmLiteModelDefinition)">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteDialectProviderBase.ToPostDropTableStatement(TheOne.OrmLite.Core.Definition.OrmLiteModelDefinition)">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteDialectProviderBase.ToCreateIndexStatements(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteDialectProviderBase.DoesTableExist(System.Data.IDbConnection,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteDialectProviderBase.DoesTableExist(System.Data.IDbCommand,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteDialectProviderBase.DoesSequenceExist(System.Data.IDbCommand,System.String)">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteDialectProviderBase.ToCreateSequenceStatements(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteDialectProviderBase.ToCreateSequenceStatement(System.Type,System.String)">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteDialectProviderBase.SequenceList(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteDialectProviderBase.ToSelectFromProcedureStatement(System.Object,System.Type,System.String,System.Object[])">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteDialectProviderBase.ToExecuteProcedureStatement(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteDialectProviderBase.SqlExpression``1">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteDialectProviderBase.GetDropForeignKeyConstraints(TheOne.OrmLite.Core.Definition.OrmLiteModelDefinition)">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteDialectProviderBase.GetQuotedValue(System.Object,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteDialectProviderBase.GetParamValue(System.Object,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteDialectProviderBase.InitQueryParam(System.Data.IDbDataParameter)">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteDialectProviderBase.InitUpdateParam(System.Data.IDbDataParameter)">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteDialectProviderBase.EscapeWildcards(System.String)">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteDialectProviderBase.GetLoadChildrenSubSelect``1(TheOne.OrmLite.Core.Expressions.OrmLiteSqlExpression{``0})">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteDialectProviderBase.ToRowCountStatement(System.String)">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteDialectProviderBase.ToTableNamesStatement(System.String)">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteDialectProviderBase.ToTableNamesWithRowCountsStatement(System.Boolean,System.String)">
            <inheritdoc />
            <remarks>
                returning null Fallback to slow UNION N+1 COUNT(*) op
            </remarks>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteDialectProviderBase.SqlConflict(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteDialectProviderBase.SqlConcat(System.Collections.Generic.IEnumerable{System.Object})">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteDialectProviderBase.SqlCurrency(System.String)">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteDialectProviderBase.SqlCurrency(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteDialectProviderBase.SqlBool(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteDialectProviderBase.SqlLimit(System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteDialectProviderBase.SqlCast(System.Object,System.String)">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteDialectProviderBase.OpenAsync(System.Data.IDbConnection,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteDialectProviderBase.ExecuteReaderAsync(System.Data.IDbCommand,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteDialectProviderBase.ExecuteNonQueryAsync(System.Data.IDbCommand,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteDialectProviderBase.ExecuteScalarAsync(System.Data.IDbCommand,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteDialectProviderBase.ReadAsync(System.Data.IDataReader,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteDialectProviderBase.ReaderEach``1(System.Data.IDataReader,System.Func{``0},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteDialectProviderBase.ReaderEach``1(System.Data.IDataReader,System.Action,``0,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteDialectProviderBase.ReaderRead``1(System.Data.IDataReader,System.Func{``0},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteDialectProviderBase.InsertAndGetLastInsertId``1(System.Data.IDbCommand)">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteDialectProviderBase.InsertAndGetLastInsertIdAsync``1(System.Data.IDbCommand,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteDialectProviderBase.AddParameter(System.Data.IDbCommand,TheOne.OrmLite.Core.Definition.OrmLiteFieldDefinition)">
            <summary>
                Used for adding updated DB params in INSERT and UPDATE statements
            </summary>
        </member>
        <member name="T:TheOne.OrmLite.Core.OrmLiteExecFilter">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteExecFilter.SqlExpression``1(System.Data.IDbConnection)">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteExecFilter.CreateCommand(System.Data.IDbConnection)">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteExecFilter.DisposeCommand(System.Data.IDbCommand,System.Data.IDbConnection)">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteExecFilter.Exec``1(System.Data.IDbConnection,System.Func{System.Data.IDbCommand,``0})">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteExecFilter.Exec(System.Data.IDbConnection,System.Func{System.Data.IDbCommand,System.Data.IDbCommand})">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteExecFilter.Exec(System.Data.IDbConnection,System.Action{System.Data.IDbCommand})">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteExecFilter.Exec``1(System.Data.IDbConnection,System.Func{System.Data.IDbCommand,System.Threading.Tasks.Task{``0}})">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteExecFilter.Exec(System.Data.IDbConnection,System.Func{System.Data.IDbCommand,System.Threading.Tasks.Task{System.Data.IDbCommand}})">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteExecFilter.Exec(System.Data.IDbConnection,System.Func{System.Data.IDbCommand,System.Threading.Tasks.Task})">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteExecFilter.ExecLazy``1(System.Data.IDbConnection,System.Func{System.Data.IDbCommand,System.Collections.Generic.IEnumerable{``0}})">
            <inheritdoc />
        </member>
        <member name="T:TheOne.OrmLite.Core.OrmLiteNamingStrategyBase">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteNamingStrategyBase.GetSchemaName(System.String)">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteNamingStrategyBase.GetSchemaName(TheOne.OrmLite.Core.Definition.OrmLiteModelDefinition)">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteNamingStrategyBase.GetTableName(System.String)">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteNamingStrategyBase.GetTableName(TheOne.OrmLite.Core.Definition.OrmLiteModelDefinition)">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteNamingStrategyBase.GetColumnName(System.String)">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteNamingStrategyBase.GetSequenceName(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteNamingStrategyBase.ApplyNameRestrictions(System.String)">
            <inheritdoc />
        </member>
        <member name="T:TheOne.OrmLite.Core.OrmLitePersistenceProvider">
            <summary>
                Allow for code-sharing between OrmLite, IPersistenceProvider and ICacheClient
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLitePersistenceProvider.GetById``1(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLitePersistenceProvider.GetByIds``1(System.Collections.ICollection)">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLitePersistenceProvider.Store``1(``0)">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLitePersistenceProvider.StoreAll``1(System.Collections.Generic.IEnumerable{``0})">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLitePersistenceProvider.Delete``1(``0)">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLitePersistenceProvider.DeleteById``1(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLitePersistenceProvider.DeleteByIds``1(System.Collections.ICollection)">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLitePersistenceProvider.DeleteAll``1">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLitePersistenceProvider.Dispose">
            <inheritdoc />
        </member>
        <member name="T:TheOne.OrmLite.Core.OrmLiteResultsFilter">
            <inheritdoc cref="T:TheOne.OrmLite.Core.IOrmLiteResultsFilter" />
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteResultsFilter.Dispose">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteResultsFilter.GetList``1(System.Data.IDbCommand)">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteResultsFilter.GetRefList(System.Data.IDbCommand,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteResultsFilter.GetSingle``1(System.Data.IDbCommand)">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteResultsFilter.GetRefSingle(System.Data.IDbCommand,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteResultsFilter.GetScalar``1(System.Data.IDbCommand)">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteResultsFilter.GetLongScalar(System.Data.IDbCommand)">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteResultsFilter.GetScalar(System.Data.IDbCommand)">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteResultsFilter.GetColumn``1(System.Data.IDbCommand)">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteResultsFilter.GetColumnDistinct``1(System.Data.IDbCommand)">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteResultsFilter.GetDictionary``2(System.Data.IDbCommand)">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteResultsFilter.GetKeyValuePairs``2(System.Data.IDbCommand)">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteResultsFilter.GetLookup``2(System.Data.IDbCommand)">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteResultsFilter.ExecuteSql(System.Data.IDbCommand)">
            <inheritdoc />
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteUtils.Merge``2(``0,System.Collections.Generic.List{``1})">
            <summary>
                Merge disconnected POCO result sets,
                stitch disconnected POCO collections together as per their relationships
                defined in OrmLite's POCO <see cref="T:TheOne.OrmLite.Core.DataAnnotations.OrmLiteReferencesAttribute" />.
            </summary>
            <example>
                For example you can select a collection of Customers who've made an order with quantities of 10 or more
                and in a separate query select their filtered Orders
                and then merge the results of these 2 distinct queries together.
            </example>
        </member>
        <member name="M:TheOne.OrmLite.Core.OrmLiteUtils.Merge``2(System.Collections.Generic.List{``0},System.Collections.Generic.List{``1})">
            <summary>
                <see cref="M:TheOne.OrmLite.Core.OrmLiteUtils.Merge``2(``0,System.Collections.Generic.List{``1})" />
            </summary>
        </member>
        <member name="T:TheOne.OrmLite.Core.OrmLiteVariables">
            <summary>
                <para>
                    To provide richer support for non-standard default values,
                    use <see cref="P:TheOne.OrmLite.Core.OrmLiteDialectProviderBase.Variables" /> placeholder dictionary for storing common,
                    but non-standard RDBMS functionality.
                </para>
                <para>
                    Declaratively define non-standard default values that works across all supported RDBMS's
                    like automatically populating a column with the RDBMS UTC Date when Inserted with a `default(T)` Value
                </para>
            </summary>
            <remarks>
                OrmLite variables need to be surrounded with `{}` braces to identify that it's a placeholder variable, e.g `{SYSTEM_UTC}`.
            </remarks>
        </member>
        <member name="T:TheOne.OrmLite.Core.Logging.ILog">
            <summary>
                Simple interface that represent a logger.
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.Logging.ILog.Log(TheOne.OrmLite.Core.Logging.LogLevel,System.Func{System.String},System.Exception,System.Object[])">
            <summary>
                Log a message the specified log level.
            </summary>
            <param name="logLevel">The log level.</param>
            <param name="messageFunc">The message function.</param>
            <param name="exception">An optional exception.</param>
            <param name="formatParameters">Optional format parameters for the message generated by the messagefunc. </param>
            <returns>true if the message was logged. Otherwise false.</returns>
            <remarks>
                Note to implementers: the message func should not be called if the loglevel is not enabled
                so as not to incur performance penalties.
                To check IsEnabled call Log with only LogLevel and check the return value, no event will be written.
            </remarks>
        </member>
        <member name="T:TheOne.OrmLite.Core.Logging.ILogProvider">
            <summary>
            Represents a way to get a <see cref="T:TheOne.OrmLite.Core.Logging.ILog"/>
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.Logging.ILogProvider.GetLogger(System.String)">
            <summary>
            Gets the specified named logger.
            </summary>
            <param name="name">Name of the logger.</param>
            <returns>The logger reference.</returns>
        </member>
        <member name="M:TheOne.OrmLite.Core.Logging.ILogProvider.OpenNestedContext(System.String)">
            <summary>
            Opens a nested diagnostics context. Not supported in EntLib logging.
            </summary>
            <param name="message">The message to add to the diagnostics context.</param>
            <returns>A disposable that when disposed removes the message from the context.</returns>
        </member>
        <member name="M:TheOne.OrmLite.Core.Logging.ILogProvider.OpenMappedContext(System.String,System.Object,System.Boolean)">
            <summary>
            Opens a mapped diagnostics context. Not supported in EntLib logging.
            </summary>
            <param name="key">A key.</param>
            <param name="value">A value.</param>
            <param name="destructure">Determines whether to call the destructor or not.</param>
            <returns>A disposable that when disposed removes the map from the context.</returns>
        </member>
        <member name="T:TheOne.OrmLite.Core.Logging.LogExtensions">
            <summary>
                Extension methods for the <see cref="T:TheOne.OrmLite.Core.Logging.ILog"/> interface.
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.Logging.LogExtensions.IsDebugEnabled(TheOne.OrmLite.Core.Logging.ILog)">
            <summary>
                Check if the <see cref="F:TheOne.OrmLite.Core.Logging.LogLevel.Debug"/> log level is enabled.
            </summary>
            <param name="logger">The <see cref="T:TheOne.OrmLite.Core.Logging.ILog"/> to check with.</param>
            <returns>True if the log level is enabled; false otherwise.</returns>
        </member>
        <member name="M:TheOne.OrmLite.Core.Logging.LogExtensions.IsErrorEnabled(TheOne.OrmLite.Core.Logging.ILog)">
            <summary>
                Check if the <see cref="F:TheOne.OrmLite.Core.Logging.LogLevel.Error"/> log level is enabled.
            </summary>
            <param name="logger">The <see cref="T:TheOne.OrmLite.Core.Logging.ILog"/> to check with.</param>
            <returns>True if the log level is enabled; false otherwise.</returns>
        </member>
        <member name="M:TheOne.OrmLite.Core.Logging.LogExtensions.IsFatalEnabled(TheOne.OrmLite.Core.Logging.ILog)">
            <summary>
                Check if the <see cref="F:TheOne.OrmLite.Core.Logging.LogLevel.Fatal"/> log level is enabled.
            </summary>
            <param name="logger">The <see cref="T:TheOne.OrmLite.Core.Logging.ILog"/> to check with.</param>
            <returns>True if the log level is enabled; false otherwise.</returns>
        </member>
        <member name="M:TheOne.OrmLite.Core.Logging.LogExtensions.IsInfoEnabled(TheOne.OrmLite.Core.Logging.ILog)">
            <summary>
                Check if the <see cref="F:TheOne.OrmLite.Core.Logging.LogLevel.Info"/> log level is enabled.
            </summary>
            <param name="logger">The <see cref="T:TheOne.OrmLite.Core.Logging.ILog"/> to check with.</param>
            <returns>True if the log level is enabled; false otherwise.</returns>
        </member>
        <member name="M:TheOne.OrmLite.Core.Logging.LogExtensions.IsTraceEnabled(TheOne.OrmLite.Core.Logging.ILog)">
            <summary>
                Check if the <see cref="F:TheOne.OrmLite.Core.Logging.LogLevel.Trace"/> log level is enabled.
            </summary>
            <param name="logger">The <see cref="T:TheOne.OrmLite.Core.Logging.ILog"/> to check with.</param>
            <returns>True if the log level is enabled; false otherwise.</returns>
        </member>
        <member name="M:TheOne.OrmLite.Core.Logging.LogExtensions.IsWarnEnabled(TheOne.OrmLite.Core.Logging.ILog)">
            <summary>
                Check if the <see cref="F:TheOne.OrmLite.Core.Logging.LogLevel.Warn"/> log level is enabled.
            </summary>
            <param name="logger">The <see cref="T:TheOne.OrmLite.Core.Logging.ILog"/> to check with.</param>
            <returns>True if the log level is enabled; false otherwise.</returns>
        </member>
        <member name="M:TheOne.OrmLite.Core.Logging.LogExtensions.Debug(TheOne.OrmLite.Core.Logging.ILog,System.Func{System.String})">
            <summary>
                Logs a message at the <see cref="F:TheOne.OrmLite.Core.Logging.LogLevel.Debug"/> log level, if enabled.
            </summary>
            <param name="logger">The <see cref="T:TheOne.OrmLite.Core.Logging.ILog"/> to use.</param>
            <param name="messageFunc">The message function.</param>
        </member>
        <member name="M:TheOne.OrmLite.Core.Logging.LogExtensions.Debug(TheOne.OrmLite.Core.Logging.ILog,System.String)">
            <summary>
                Logs a message at the <see cref="F:TheOne.OrmLite.Core.Logging.LogLevel.Debug"/> log level, if enabled.
            </summary>
            <param name="logger">The <see cref="T:TheOne.OrmLite.Core.Logging.ILog"/> to use.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:TheOne.OrmLite.Core.Logging.LogExtensions.Debug(TheOne.OrmLite.Core.Logging.ILog,System.String,System.Object[])">
            <summary>
                Logs a message at the <see cref="F:TheOne.OrmLite.Core.Logging.LogLevel.Debug"/> log level, if enabled.
            </summary>
            <param name="logger">The <see cref="T:TheOne.OrmLite.Core.Logging.ILog"/> to use.</param>
            <param name="message">The message.</param>
            <param name="args">Optional format parameters for the message.</param>
        </member>
        <member name="M:TheOne.OrmLite.Core.Logging.LogExtensions.Debug(TheOne.OrmLite.Core.Logging.ILog,System.Exception,System.String,System.Object[])">
            <summary>
                Logs an exception at the <see cref="F:TheOne.OrmLite.Core.Logging.LogLevel.Debug"/> log level, if enabled.
            </summary>
            <param name="logger">The <see cref="T:TheOne.OrmLite.Core.Logging.ILog"/> to use.</param>
            <param name="exception">The exception.</param>
            <param name="message">The message.</param>
            <param name="args">Optional format parameters for the message.</param>
        </member>
        <member name="M:TheOne.OrmLite.Core.Logging.LogExtensions.DebugFormat(TheOne.OrmLite.Core.Logging.ILog,System.String,System.Object[])">
            <summary>
                Logs a message at the <see cref="F:TheOne.OrmLite.Core.Logging.LogLevel.Debug"/> log level, if enabled.
            </summary>
            <param name="logger">The <see cref="T:TheOne.OrmLite.Core.Logging.ILog"/> to use.</param>
            <param name="message">The message.</param>
            <param name="args">Optional format parameters for the message.</param>
        </member>
        <member name="M:TheOne.OrmLite.Core.Logging.LogExtensions.DebugException(TheOne.OrmLite.Core.Logging.ILog,System.String,System.Exception)">
            <summary>
                Logs an exception at the <see cref="F:TheOne.OrmLite.Core.Logging.LogLevel.Debug"/> log level, if enabled.
            </summary>
            <param name="logger">The <see cref="T:TheOne.OrmLite.Core.Logging.ILog"/> to use.</param>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:TheOne.OrmLite.Core.Logging.LogExtensions.DebugException(TheOne.OrmLite.Core.Logging.ILog,System.String,System.Exception,System.Object[])">
            <summary>
                Logs an exception at the <see cref="F:TheOne.OrmLite.Core.Logging.LogLevel.Debug"/> log level, if enabled.
            </summary>
            <param name="logger">The <see cref="T:TheOne.OrmLite.Core.Logging.ILog"/> to use.</param>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
            <param name="args">Optional format parameters for the message.</param>
        </member>
        <member name="M:TheOne.OrmLite.Core.Logging.LogExtensions.Error(TheOne.OrmLite.Core.Logging.ILog,System.Func{System.String})">
            <summary>
                Logs a message at the <see cref="F:TheOne.OrmLite.Core.Logging.LogLevel.Error"/> log level, if enabled.
            </summary>
            <param name="logger">The <see cref="T:TheOne.OrmLite.Core.Logging.ILog"/> to use.</param>
            <param name="messageFunc">The message function.</param>
        </member>
        <member name="M:TheOne.OrmLite.Core.Logging.LogExtensions.Error(TheOne.OrmLite.Core.Logging.ILog,System.String)">
            <summary>
                Logs a message at the <see cref="F:TheOne.OrmLite.Core.Logging.LogLevel.Error"/> log level, if enabled.
            </summary>
            <param name="logger">The <see cref="T:TheOne.OrmLite.Core.Logging.ILog"/> to use.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:TheOne.OrmLite.Core.Logging.LogExtensions.Error(TheOne.OrmLite.Core.Logging.ILog,System.String,System.Object[])">
            <summary>
                Logs a message at the <see cref="F:TheOne.OrmLite.Core.Logging.LogLevel.Error"/> log level, if enabled.
            </summary>
            <param name="logger">The <see cref="T:TheOne.OrmLite.Core.Logging.ILog"/> to use.</param>
            <param name="message">The message.</param>
            <param name="args">Optional format parameters for the message.</param>
        </member>
        <member name="M:TheOne.OrmLite.Core.Logging.LogExtensions.Error(TheOne.OrmLite.Core.Logging.ILog,System.Exception,System.String,System.Object[])">
            <summary>
                Logs an exception at the <see cref="F:TheOne.OrmLite.Core.Logging.LogLevel.Error"/> log level, if enabled.
            </summary>
            <param name="logger">The <see cref="T:TheOne.OrmLite.Core.Logging.ILog"/> to use.</param>
            <param name="exception">The exception.</param>
            <param name="message">The message.</param>
            <param name="args">Optional format parameters for the message.</param>
        </member>
        <member name="M:TheOne.OrmLite.Core.Logging.LogExtensions.ErrorFormat(TheOne.OrmLite.Core.Logging.ILog,System.String,System.Object[])">
            <summary>
                Logs a message at the <see cref="F:TheOne.OrmLite.Core.Logging.LogLevel.Error"/> log level, if enabled.
            </summary>
            <param name="logger">The <see cref="T:TheOne.OrmLite.Core.Logging.ILog"/> to use.</param>
            <param name="message">The message.</param>
            <param name="args">Optional format parameters for the message.</param>
        </member>
        <member name="M:TheOne.OrmLite.Core.Logging.LogExtensions.ErrorException(TheOne.OrmLite.Core.Logging.ILog,System.String,System.Exception,System.Object[])">
            <summary>
                Logs an exception at the <see cref="F:TheOne.OrmLite.Core.Logging.LogLevel.Error"/> log level, if enabled.
            </summary>
            <param name="logger">The <see cref="T:TheOne.OrmLite.Core.Logging.ILog"/> to use.</param>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
            <param name="args">Optional format parameters for the message.</param>
        </member>
        <member name="M:TheOne.OrmLite.Core.Logging.LogExtensions.Fatal(TheOne.OrmLite.Core.Logging.ILog,System.Func{System.String})">
            <summary>
                Logs a message at the <see cref="F:TheOne.OrmLite.Core.Logging.LogLevel.Fatal"/> log level, if enabled.
            </summary>
            <param name="logger">The <see cref="T:TheOne.OrmLite.Core.Logging.ILog"/> to use.</param>
            <param name="messageFunc">The message function.</param>
        </member>
        <member name="M:TheOne.OrmLite.Core.Logging.LogExtensions.Fatal(TheOne.OrmLite.Core.Logging.ILog,System.String)">
            <summary>
                Logs a message at the <see cref="F:TheOne.OrmLite.Core.Logging.LogLevel.Fatal"/> log level, if enabled.
            </summary>
            <param name="logger">The <see cref="T:TheOne.OrmLite.Core.Logging.ILog"/> to use.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:TheOne.OrmLite.Core.Logging.LogExtensions.Fatal(TheOne.OrmLite.Core.Logging.ILog,System.String,System.Object[])">
            <summary>
                Logs a message at the <see cref="F:TheOne.OrmLite.Core.Logging.LogLevel.Fatal"/> log level, if enabled.
            </summary>
            <param name="logger">The <see cref="T:TheOne.OrmLite.Core.Logging.ILog"/> to use.</param>
            <param name="message">The message.</param>
            <param name="args">Optional format parameters for the message.</param>
        </member>
        <member name="M:TheOne.OrmLite.Core.Logging.LogExtensions.Fatal(TheOne.OrmLite.Core.Logging.ILog,System.Exception,System.String,System.Object[])">
            <summary>
                Logs an exception at the <see cref="F:TheOne.OrmLite.Core.Logging.LogLevel.Fatal"/> log level, if enabled.
            </summary>
            <param name="logger">The <see cref="T:TheOne.OrmLite.Core.Logging.ILog"/> to use.</param>
            <param name="exception">The exception.</param>
            <param name="message">The message.</param>
            <param name="args">Optional format parameters for the message.</param>
        </member>
        <member name="M:TheOne.OrmLite.Core.Logging.LogExtensions.FatalFormat(TheOne.OrmLite.Core.Logging.ILog,System.String,System.Object[])">
            <summary>
                Logs a message at the <see cref="F:TheOne.OrmLite.Core.Logging.LogLevel.Fatal"/> log level, if enabled.
            </summary>
            <param name="logger">The <see cref="T:TheOne.OrmLite.Core.Logging.ILog"/> to use.</param>
            <param name="message">The message.</param>
            <param name="args">Optional format parameters for the message.</param>
        </member>
        <member name="M:TheOne.OrmLite.Core.Logging.LogExtensions.FatalException(TheOne.OrmLite.Core.Logging.ILog,System.String,System.Exception,System.Object[])">
            <summary>
                Logs an exception at the <see cref="F:TheOne.OrmLite.Core.Logging.LogLevel.Fatal"/> log level, if enabled.
            </summary>
            <param name="logger">The <see cref="T:TheOne.OrmLite.Core.Logging.ILog"/> to use.</param>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
            <param name="args">Optional format parameters for the message.</param>
        </member>
        <member name="M:TheOne.OrmLite.Core.Logging.LogExtensions.Info(TheOne.OrmLite.Core.Logging.ILog,System.Func{System.String})">
            <summary>
                Logs a message at the <see cref="F:TheOne.OrmLite.Core.Logging.LogLevel.Info"/> log level, if enabled.
            </summary>
            <param name="logger">The <see cref="T:TheOne.OrmLite.Core.Logging.ILog"/> to use.</param>
            <param name="messageFunc">The message function.</param>
        </member>
        <member name="M:TheOne.OrmLite.Core.Logging.LogExtensions.Info(TheOne.OrmLite.Core.Logging.ILog,System.String)">
            <summary>
                Logs a message at the <see cref="F:TheOne.OrmLite.Core.Logging.LogLevel.Info"/> log level, if enabled.
            </summary>
            <param name="logger">The <see cref="T:TheOne.OrmLite.Core.Logging.ILog"/> to use.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:TheOne.OrmLite.Core.Logging.LogExtensions.Info(TheOne.OrmLite.Core.Logging.ILog,System.String,System.Object[])">
            <summary>
                Logs a message at the <see cref="F:TheOne.OrmLite.Core.Logging.LogLevel.Info"/> log level, if enabled.
            </summary>
            <param name="logger">The <see cref="T:TheOne.OrmLite.Core.Logging.ILog"/> to use.</param>
            <param name="message">The message.</param>
            <param name="args">Optional format parameters for the message.</param>
        </member>
        <member name="M:TheOne.OrmLite.Core.Logging.LogExtensions.Info(TheOne.OrmLite.Core.Logging.ILog,System.Exception,System.String,System.Object[])">
            <summary>
                Logs an exception at the <see cref="F:TheOne.OrmLite.Core.Logging.LogLevel.Info"/> log level, if enabled.
            </summary>
            <param name="logger">The <see cref="T:TheOne.OrmLite.Core.Logging.ILog"/> to use.</param>
            <param name="exception">The exception.</param>
            <param name="message">The message.</param>
            <param name="args">Optional format parameters for the message.</param>
        </member>
        <member name="M:TheOne.OrmLite.Core.Logging.LogExtensions.InfoFormat(TheOne.OrmLite.Core.Logging.ILog,System.String,System.Object[])">
            <summary>
                Logs a message at the <see cref="F:TheOne.OrmLite.Core.Logging.LogLevel.Info"/> log level, if enabled.
            </summary>
            <param name="logger">The <see cref="T:TheOne.OrmLite.Core.Logging.ILog"/> to use.</param>
            <param name="message">The message.</param>
            <param name="args">Optional format parameters for the message.</param>
        </member>
        <member name="M:TheOne.OrmLite.Core.Logging.LogExtensions.InfoException(TheOne.OrmLite.Core.Logging.ILog,System.String,System.Exception,System.Object[])">
            <summary>
                Logs an exception at the <see cref="F:TheOne.OrmLite.Core.Logging.LogLevel.Info"/> log level, if enabled.
            </summary>
            <param name="logger">The <see cref="T:TheOne.OrmLite.Core.Logging.ILog"/> to use.</param>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
            <param name="args">Optional format parameters for the message.</param>
        </member>
        <member name="M:TheOne.OrmLite.Core.Logging.LogExtensions.Trace(TheOne.OrmLite.Core.Logging.ILog,System.Func{System.String})">
            <summary>
                Logs a message at the <see cref="F:TheOne.OrmLite.Core.Logging.LogLevel.Trace"/> log level, if enabled.
            </summary>
            <param name="logger">The <see cref="T:TheOne.OrmLite.Core.Logging.ILog"/> to use.</param>
            <param name="messageFunc">The message function.</param>
        </member>
        <member name="M:TheOne.OrmLite.Core.Logging.LogExtensions.Trace(TheOne.OrmLite.Core.Logging.ILog,System.String)">
            <summary>
                Logs a message at the <see cref="F:TheOne.OrmLite.Core.Logging.LogLevel.Trace"/> log level, if enabled.
            </summary>
            <param name="logger">The <see cref="T:TheOne.OrmLite.Core.Logging.ILog"/> to use.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:TheOne.OrmLite.Core.Logging.LogExtensions.Trace(TheOne.OrmLite.Core.Logging.ILog,System.String,System.Object[])">
            <summary>
                Logs a message at the <see cref="F:TheOne.OrmLite.Core.Logging.LogLevel.Trace"/> log level, if enabled.
            </summary>
            <param name="logger">The <see cref="T:TheOne.OrmLite.Core.Logging.ILog"/> to use.</param>
            <param name="message">The message.</param>
            <param name="args">Optional format parameters for the message.</param>
        </member>
        <member name="M:TheOne.OrmLite.Core.Logging.LogExtensions.Trace(TheOne.OrmLite.Core.Logging.ILog,System.Exception,System.String,System.Object[])">
            <summary>
                Logs an exception at the <see cref="F:TheOne.OrmLite.Core.Logging.LogLevel.Trace"/> log level, if enabled.
            </summary>
            <param name="logger">The <see cref="T:TheOne.OrmLite.Core.Logging.ILog"/> to use.</param>
            <param name="exception">The exception.</param>
            <param name="message">The message.</param>
            <param name="args">Optional format parameters for the message.</param>
        </member>
        <member name="M:TheOne.OrmLite.Core.Logging.LogExtensions.TraceFormat(TheOne.OrmLite.Core.Logging.ILog,System.String,System.Object[])">
            <summary>
                Logs a message at the <see cref="F:TheOne.OrmLite.Core.Logging.LogLevel.Trace"/> log level, if enabled.
            </summary>
            <param name="logger">The <see cref="T:TheOne.OrmLite.Core.Logging.ILog"/> to use.</param>
            <param name="message">The message.</param>
            <param name="args">Optional format parameters for the message.</param>
        </member>
        <member name="M:TheOne.OrmLite.Core.Logging.LogExtensions.TraceException(TheOne.OrmLite.Core.Logging.ILog,System.String,System.Exception,System.Object[])">
            <summary>
                Logs an exception at the <see cref="F:TheOne.OrmLite.Core.Logging.LogLevel.Trace"/> log level, if enabled.
            </summary>
            <param name="logger">The <see cref="T:TheOne.OrmLite.Core.Logging.ILog"/> to use.</param>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
            <param name="args">Optional format parameters for the message.</param>
        </member>
        <member name="M:TheOne.OrmLite.Core.Logging.LogExtensions.Warn(TheOne.OrmLite.Core.Logging.ILog,System.Func{System.String})">
            <summary>
                Logs a message at the <see cref="F:TheOne.OrmLite.Core.Logging.LogLevel.Warn"/> log level, if enabled.
            </summary>
            <param name="logger">The <see cref="T:TheOne.OrmLite.Core.Logging.ILog"/> to use.</param>
            <param name="messageFunc">The message function.</param>
        </member>
        <member name="M:TheOne.OrmLite.Core.Logging.LogExtensions.Warn(TheOne.OrmLite.Core.Logging.ILog,System.String)">
            <summary>
                Logs a message at the <see cref="F:TheOne.OrmLite.Core.Logging.LogLevel.Warn"/> log level, if enabled.
            </summary>
            <param name="logger">The <see cref="T:TheOne.OrmLite.Core.Logging.ILog"/> to use.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:TheOne.OrmLite.Core.Logging.LogExtensions.Warn(TheOne.OrmLite.Core.Logging.ILog,System.String,System.Object[])">
            <summary>
                Logs a message at the <see cref="F:TheOne.OrmLite.Core.Logging.LogLevel.Warn"/> log level, if enabled.
            </summary>
            <param name="logger">The <see cref="T:TheOne.OrmLite.Core.Logging.ILog"/> to use.</param>
            <param name="message">The message.</param>
            <param name="args">Optional format parameters for the message.</param>
        </member>
        <member name="M:TheOne.OrmLite.Core.Logging.LogExtensions.Warn(TheOne.OrmLite.Core.Logging.ILog,System.Exception,System.String,System.Object[])">
            <summary>
                Logs an exception at the <see cref="F:TheOne.OrmLite.Core.Logging.LogLevel.Warn"/> log level, if enabled.
            </summary>
            <param name="logger">The <see cref="T:TheOne.OrmLite.Core.Logging.ILog"/> to use.</param>
            <param name="exception">The exception.</param>
            <param name="message">The message.</param>
            <param name="args">Optional format parameters for the message.</param>
        </member>
        <member name="M:TheOne.OrmLite.Core.Logging.LogExtensions.WarnFormat(TheOne.OrmLite.Core.Logging.ILog,System.String,System.Object[])">
            <summary>
                Logs a message at the <see cref="F:TheOne.OrmLite.Core.Logging.LogLevel.Warn"/> log level, if enabled.
            </summary>
            <param name="logger">The <see cref="T:TheOne.OrmLite.Core.Logging.ILog"/> to use.</param>
            <param name="message">The message.</param>
            <param name="args">Optional format parameters for the message.</param>
        </member>
        <member name="M:TheOne.OrmLite.Core.Logging.LogExtensions.WarnException(TheOne.OrmLite.Core.Logging.ILog,System.String,System.Exception,System.Object[])">
            <summary>
                Logs an exception at the <see cref="F:TheOne.OrmLite.Core.Logging.LogLevel.Warn"/> log level, if enabled.
            </summary>
            <param name="logger">The <see cref="T:TheOne.OrmLite.Core.Logging.ILog"/> to use.</param>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
            <param name="args">Optional format parameters for the message.</param>
        </member>
        <member name="T:TheOne.OrmLite.Core.Logging.Logger">
            <summary>
            Logger delegate.
            </summary>
            <param name="logLevel">The log level</param>
            <param name="messageFunc">The message function</param>
            <param name="exception">The exception</param>
            <param name="formatParameters">The format parameters</param>
            <returns>A boolean.</returns>
        </member>
        <member name="T:TheOne.OrmLite.Core.Logging.LogLevel">
            <summary>
                The log level.
            </summary>
        </member>
        <member name="F:TheOne.OrmLite.Core.Logging.LogLevel.Trace">
            <summary>
            Trace
            </summary>
        </member>
        <member name="F:TheOne.OrmLite.Core.Logging.LogLevel.Debug">
            <summary>
            Debug
            </summary>
        </member>
        <member name="F:TheOne.OrmLite.Core.Logging.LogLevel.Info">
            <summary>
            Info
            </summary>
        </member>
        <member name="F:TheOne.OrmLite.Core.Logging.LogLevel.Warn">
            <summary>
            Warn
            </summary>
        </member>
        <member name="F:TheOne.OrmLite.Core.Logging.LogLevel.Error">
            <summary>
            Error
            </summary>
        </member>
        <member name="F:TheOne.OrmLite.Core.Logging.LogLevel.Fatal">
            <summary>
            Fatal
            </summary>
        </member>
        <member name="T:TheOne.OrmLite.Core.Logging.LogProvider">
            <summary>
            Provides a mechanism to create instances of <see cref="T:TheOne.OrmLite.Core.Logging.ILog" /> objects.
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.Logging.LogProvider.SetCurrentLogProvider(TheOne.OrmLite.Core.Logging.ILogProvider)">
            <summary>
            Sets the current log provider.
            </summary>
            <param name="logProvider">The log provider.</param>
        </member>
        <member name="P:TheOne.OrmLite.Core.Logging.LogProvider.IsDisabled">
            <summary>
            Gets or sets a value indicating whether this is logging is disabled.
            </summary>
            <value>
            <c>true</c> if logging is disabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:TheOne.OrmLite.Core.Logging.LogProvider.OnCurrentLogProviderSet">
            <summary>
            Sets an action that is invoked when a consumer of your library has called SetCurrentLogProvider. It is 
            important that hook into this if you are using child libraries (especially ilmerged ones) that are using
            LibLog (or other logging abstraction) so you adapt and delegate to them.
            <see cref="M:TheOne.OrmLite.Core.Logging.LogProvider.SetCurrentLogProvider(TheOne.OrmLite.Core.Logging.ILogProvider)"/> 
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.Logging.LogProvider.For``1">
            <summary>
            Gets a logger for the specified type.
            </summary>
            <typeparam name="T">The type whose name will be used for the logger.</typeparam>
            <returns>An instance of <see cref="T:TheOne.OrmLite.Core.Logging.ILog"/></returns>
        </member>
        <member name="M:TheOne.OrmLite.Core.Logging.LogProvider.GetCurrentClassLogger">
            <summary>
            Gets a logger for the current class.
            </summary>
            <returns>An instance of <see cref="T:TheOne.OrmLite.Core.Logging.ILog"/></returns>
        </member>
        <member name="M:TheOne.OrmLite.Core.Logging.LogProvider.GetLogger(System.Type,System.String)">
            <summary>
            Gets a logger for the specified type.
            </summary>
            <param name="type">The type whose name will be used for the logger.</param>
            <param name="fallbackTypeName">If the type is null then this name will be used as the log name instead</param>
            <returns>An instance of <see cref="T:TheOne.OrmLite.Core.Logging.ILog"/></returns>
        </member>
        <member name="M:TheOne.OrmLite.Core.Logging.LogProvider.GetLogger(System.String)">
            <summary>
            Gets a logger with the specified name.
            </summary>
            <param name="name">The name.</param>
            <returns>An instance of <see cref="T:TheOne.OrmLite.Core.Logging.ILog"/></returns>
        </member>
        <member name="M:TheOne.OrmLite.Core.Logging.LogProvider.OpenNestedContext(System.String)">
            <summary>
            Opens a nested diagnostics context.
            </summary>
            <param name="message">A message.</param>
            <returns>An <see cref="T:System.IDisposable"/> that closes context when disposed.</returns>
        </member>
        <member name="M:TheOne.OrmLite.Core.Logging.LogProvider.OpenMappedContext(System.String,System.Object,System.Boolean)">
            <summary>
            Opens a mapped diagnostics context.
            </summary>
            <param name="key">A key.</param>
            <param name="value">A value.</param>
            <param name="destructure">A optional paramater to indicate message should be destructured.</param>
            <returns>An <see cref="T:System.IDisposable"/> that closes context when disposed.</returns>
        </member>
        <member name="T:TheOne.OrmLite.Core.Logging.LogProviders.LibLogException">
            <summary>
            Exception thrown by LibLog.
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.Logging.LogProviders.LibLogException.#ctor(System.String)">
            <summary>
            Initializes a new LibLogException with the specified message.
            </summary>
            <param name="message">The message</param>
        </member>
        <member name="M:TheOne.OrmLite.Core.Logging.LogProviders.LibLogException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new LibLogException with the specified message and inner exception.
            </summary>
            <param name="message">The message.</param>
            <param name="inner">The inner exception.</param>
        </member>
        <member name="M:TheOne.OrmLite.Core.Logging.LogProviders.LogMessageFormatter.SimulateStructuredLogging(System.Func{System.String},System.Object[])">
            <summary>
                Some logging frameworks support structured logging, such as serilog. This will allow you to add names to structured
                data in a format string:
                For example: Log("Log message to {user}", user). This only works with serilog, but as the user of LibLog, you don't
                know if serilog is actually
                used. So, this class simulates that. it will replace any text in {curly braces} with an index number.
                "Log {message} to {user}" would turn into => "Log {0} to {1}". Then the format parameters are handled using regular
                .net string.Format.
            </summary>
            <param name="messageBuilder">The message builder.</param>
            <param name="formatParameters">The format parameters.</param>
            <returns></returns>
        </member>
        <member name="T:TheOne.OrmLite.Core.Logging.LogProviders.LogProviderBase">
            <summary>
                Base class for specific log providers.
            </summary>
        </member>
        <member name="F:TheOne.OrmLite.Core.Logging.LogProviders.LogProviderBase.ErrorInitializingProvider">
            <summary>
                Error message should initializing the log provider fail.
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.Logging.LogProviders.LogProviderBase.#ctor">
            <summary>
                Initialize an instance of the <see cref="T:TheOne.OrmLite.Core.Logging.LogProviders.LogProviderBase"/> class by initializing the references
                to the nested and mapped diagnostics context-obtaining functions.
            </summary>
        </member>
        <member name="M:TheOne.OrmLite.Core.Logging.LogProviders.LogProviderBase.GetLogger(System.String)">
            <summary>
            Gets the specified named logger.
            </summary>
            <param name="name">Name of the logger.</param>
            <returns>The logger reference.</returns>
        </member>
        <member name="M:TheOne.OrmLite.Core.Logging.LogProviders.LogProviderBase.OpenNestedContext(System.String)">
            <summary>
            Opens a nested diagnostics context. Not supported in EntLib logging.
            </summary>
            <param name="message">The message to add to the diagnostics context.</param>
            <returns>A disposable that when disposed removes the message from the context.</returns>
        </member>
        <member name="M:TheOne.OrmLite.Core.Logging.LogProviders.LogProviderBase.OpenMappedContext(System.String,System.Object,System.Boolean)">
            <summary>
            Opens a mapped diagnostics context. Not supported in EntLib logging.
            </summary>
            <param name="key">A key.</param>
            <param name="value">A value.</param>
            <param name="destructure">Determines whether to call the destructor or not.</param>
            <returns>A disposable that when disposed removes the map from the context.</returns>
        </member>
        <member name="M:TheOne.OrmLite.Core.Logging.LogProviders.LogProviderBase.GetOpenNdcMethod">
            <summary>
                Returns the provider-specific method to open a nested diagnostics context.
            </summary>
            <returns>A provider-specific method to open a nested diagnostics context.</returns>
        </member>
        <member name="M:TheOne.OrmLite.Core.Logging.LogProviders.LogProviderBase.GetOpenMdcMethod">
            <summary>
                Returns the provider-specific method to open a mapped diagnostics context.
            </summary>
            <returns>A provider-specific method to open a mapped diagnostics context.</returns>
        </member>
        <member name="T:TheOne.OrmLite.Core.Logging.LogProviders.LogProviderBase.OpenNdc">
            <summary>
                Delegate defining the signature of the method opening a nested diagnostics context.
            </summary>
            <param name="message">The message to add to the diagnostics context.</param>
            <returns>A disposable that when disposed removes the message from the context.</returns>
        </member>
        <member name="T:TheOne.OrmLite.Core.Logging.LogProviders.LogProviderBase.OpenMdc">
            <summary>
                Delegate defining the signature of the method opening a mapped diagnostics context.
            </summary>
            <param name="key">A key.</param>
            <param name="value">A value.</param>
            <param name="destructure">Determines whether to call the destructor or not.</param>
            <returns>A disposable that when disposed removes the map from the context.</returns>
        </member>
        <member name="T:TheOne.OrmLite.Core.Logging.LogProviders.LoupeLogProvider.WriteDelegate">
            <summary>
                The form of the Loupe Log.Write method we're using
            </summary>
        </member>
        <member name="P:TheOne.OrmLite.Core.Logging.LogProviders.LoupeLogProvider.ProviderIsAvailableOverride">
            <summary>
                Gets or sets a value indicating whether [provider is available override]. Used in tests.
            </summary>
            <value>
                <c>true</c> if [provider is available override]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:JetBrains.Annotations.CanBeNullAttribute">
            <summary>
                Indicates that the value of the marked element could be <c>null</c> sometimes,
                so the check for <c>null</c> is necessary before its usage.
            </summary>
            <example>
                <code>
            [CanBeNull] object Test() => null;
            
            void UseTest() {
              var p = Test();
              var s = p.ToString(); // Warning: Possible 'System.NullReferenceException'
            }
            </code>
            </example>
        </member>
        <member name="T:JetBrains.Annotations.NotNullAttribute">
            <summary>
                Indicates that the value of the marked element could never be <c>null</c>.
            </summary>
            <example>
                <code>
            [NotNull] object Foo() {
              return null; // Warning: Possible 'null' assignment
            }
            </code>
            </example>
        </member>
        <member name="T:JetBrains.Annotations.ItemNotNullAttribute">
            <summary>
                Can be appplied to symbols of types derived from IEnumerable as well as to symbols of Task
                and Lazy classes to indicate that the value of a collection item, of the Task.Result property
                or of the Lazy.Value property can never be null.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.ItemCanBeNullAttribute">
            <summary>
                Can be appplied to symbols of types derived from IEnumerable as well as to symbols of Task
                and Lazy classes to indicate that the value of a collection item, of the Task.Result property
                or of the Lazy.Value property can be null.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.StringFormatMethodAttribute">
            <summary>
                Indicates that the marked method builds string by format pattern and (optional) arguments.
                Parameter, which contains format string, should be given in constructor. The format string
                should be in <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])" />-like form.
            </summary>
            <example>
                <code>
            [StringFormatMethod("message")]
            void ShowError(string message, params object[] args) { /* do something */ }
            
            void Foo() {
              ShowError("Failed: {0}"); // Warning: Non-existing argument in format string
            }
            </code>
            </example>
        </member>
        <member name="M:JetBrains.Annotations.StringFormatMethodAttribute.#ctor(System.String)">
            <param name="formatParameterName" >
                Specifies which parameter of an annotated method should be treated as format-string
            </param>
        </member>
        <member name="T:JetBrains.Annotations.ValueProviderAttribute">
            <summary>
                For a parameter that is expected to be one of the limited set of values.
                Specify fields of which type should be used as values for this parameter.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.InvokerParameterNameAttribute">
            <summary>
                Indicates that the function argument should be string literal and match one
                of the parameters of the caller function. For example, ReSharper annotates
                the parameter of <see cref="T:System.ArgumentNullException" />.
            </summary>
            <example>
                <code>
            void Foo(string param) {
              if (param == null)
                throw new ArgumentNullException("par"); // Warning: Cannot resolve symbol
            }
            </code>
            </example>
        </member>
        <member name="T:JetBrains.Annotations.NotifyPropertyChangedInvocatorAttribute">
            <summary>
                Indicates that the method is contained in a type that implements
                <c>System.ComponentModel.INotifyPropertyChanged</c> interface and this method
                is used to notify that some property value changed.
            </summary>
            <remarks>
                The method should be non-static and conform to one of the supported signatures:
                <list>
                    <item>
                        <c>NotifyChanged(string)</c>
                    </item>
                    <item>
                        <c>NotifyChanged(params string[])</c>
                    </item>
                    <item>
                        <c>NotifyChanged{T}(Expression{Func{T}})</c>
                    </item>
                    <item>
                        <c>NotifyChanged{T,U}(Expression{Func{T,U}})</c>
                    </item>
                    <item>
                        <c>SetProperty{T}(ref T, T, string)</c>
                    </item>
                </list>
            </remarks>
            <example>
                <code>
             public class Foo : INotifyPropertyChanged {
               public event PropertyChangedEventHandler PropertyChanged;
             
               [NotifyPropertyChangedInvocator]
               protected virtual void NotifyChanged(string propertyName) { ... }
            
               string _name;
             
               public string Name {
                 get { return _name; }
                 set { _name = value; NotifyChanged("LastName"); /* Warning */ }
               }
             }
             </code>
                Examples of generated notifications:
                <list>
                    <item>
                        <c>NotifyChanged("Property")</c>
                    </item>
                    <item>
                        <c>NotifyChanged(() =&gt; Property)</c>
                    </item>
                    <item>
                        <c>NotifyChanged((VM x) =&gt; x.Property)</c>
                    </item>
                    <item>
                        <c>SetProperty(ref myField, value, "Property")</c>
                    </item>
                </list>
            </example>
        </member>
        <member name="T:JetBrains.Annotations.ContractAnnotationAttribute">
            <summary>
                Describes dependency between method input and output.
            </summary>
            <syntax>
                <p>Function Definition Table syntax:</p>
                <list>
                    <item>FDT      ::= FDTRow [;FDTRow]*</item>
                    <item>FDTRow   ::= Input =&gt; Output | Output &lt;= Input</item>
                    <item>Input    ::= ParameterName: Value [, Input]*</item>
                    <item>Output   ::= [ParameterName: Value]* {halt|stop|void|nothing|Value}</item>
                    <item>Value    ::= true | false | null | notnull | canbenull</item>
                </list>
                If method has single input parameter, it's name could be omitted.<br />
                Using <c>halt</c> (or <c>void</c>/<c>nothing</c>, which is the same) for method output
                means that the methos doesn't return normally (throws or terminates the process).<br />
                Value <c>canbenull</c> is only applicable for output parameters.<br />
                You can use multiple <c>[ContractAnnotation]</c> for each FDT row, or use single attribute
                with rows separated by semicolon. There is no notion of order rows, all rows are checked
                for applicability and applied per each program state tracked by R# analysis.<br />
            </syntax>
            <examples>
                <list>
                    <item>
                        <code>
            [ContractAnnotation("=&gt; halt")]
            public void TerminationMethod()
            </code>
                    </item>
                    <item>
                        <code>
            [ContractAnnotation("halt &lt;= condition: false")]
            public void Assert(bool condition, string text) // regular assertion method
            </code>
                    </item>
                    <item>
                        <code>
            [ContractAnnotation("s:null =&gt; true")]
            public bool IsNullOrEmpty(string s) // string.IsNullOrEmpty()
            </code>
                    </item>
                    <item>
                        <code>
            // A method that returns null if the parameter is null,
            // and not null if the parameter is not null
            [ContractAnnotation("null =&gt; null; notnull =&gt; notnull")]
            public object Transform(object data) 
            </code>
                    </item>
                    <item>
                        <code>
            [ContractAnnotation("=&gt; true, result: notnull; =&gt; false, result: null")]
            public bool TryParse(string s, out Person result)
            </code>
                    </item>
                </list>
            </examples>
        </member>
        <member name="T:JetBrains.Annotations.LocalizationRequiredAttribute">
            <summary>
                Indicates that marked element should be localized or not.
            </summary>
            <example>
                <code>
            [LocalizationRequiredAttribute(true)]
            class Foo {
              string str = "my string"; // Warning: Localizable string
            }
            </code>
            </example>
        </member>
        <member name="T:JetBrains.Annotations.CannotApplyEqualityOperatorAttribute">
            <summary>
                Indicates that the value of the marked type (or its derivatives)
                cannot be compared using '==' or '!=' operators and <c>Equals()</c>
                should be used instead. However, using '==' or '!=' for comparison
                with <c>null</c> is always permitted.
            </summary>
            <example>
                <code>
            [CannotApplyEqualityOperator]
            class NoEquality { }
            
            class UsesNoEquality {
              void Test() {
                var ca1 = new NoEquality();
                var ca2 = new NoEquality();
                if (ca1 != null) { // OK
                  bool condition = ca1 == ca2; // Warning
                }
              }
            }
            </code>
            </example>
        </member>
        <member name="T:JetBrains.Annotations.BaseTypeRequiredAttribute">
            <summary>
                When applied to a target attribute, specifies a requirement for any type marked
                with the target attribute to implement or inherit specific type or types.
            </summary>
            <example>
                <code>
            [BaseTypeRequired(typeof(IComponent)] // Specify requirement
            class ComponentAttribute : Attribute { }
            
            [Component] // ComponentAttribute requires implementing IComponent interface
            class MyComponent : IComponent { }
            </code>
            </example>
        </member>
        <member name="T:JetBrains.Annotations.UsedImplicitlyAttribute">
            <summary>
                Indicates that the marked symbol is used implicitly (e.g. via reflection, in external library),
                so this symbol will not be marked as unused (as well as by other usage inspections).
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.MeansImplicitUseAttribute">
            <summary>
                Should be used on attributes and causes ReSharper to not mark symbols marked with such attributes
                as unused (as well as by other usage inspections)
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.Access">
            <summary>Only entity marked with attribute considered used.</summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.Assign">
            <summary>Indicates implicit assignment to a member.</summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.InstantiatedWithFixedConstructorSignature">
            <summary>
                Indicates implicit instantiation of a type with fixed constructor signature.
                That means any unused constructor parameters won't be reported as such.
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.InstantiatedNoFixedConstructorSignature">
            <summary>Indicates implicit instantiation of a type.</summary>
        </member>
        <member name="T:JetBrains.Annotations.ImplicitUseTargetFlags">
            <summary>
                Specify what is considered used implicitly when marked
                with <see cref="T:JetBrains.Annotations.MeansImplicitUseAttribute" /> or <see cref="T:JetBrains.Annotations.UsedImplicitlyAttribute" />.
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseTargetFlags.Members">
            <summary>Members of entity marked with attribute are considered used.</summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseTargetFlags.WithMembers">
            <summary>Entity marked with attribute and all its members considered used.</summary>
        </member>
        <member name="T:JetBrains.Annotations.PublicAPIAttribute">
            <summary>
                This attribute is intended to mark publicly available API
                which should not be removed and so is treated as used.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.InstantHandleAttribute">
            <summary>
                Tells code analysis engine if the parameter is completely handled when the invoked method is on stack.
                If the parameter is a delegate, indicates that delegate is executed while the method is executed.
                If the parameter is an enumerable, indicates that it is enumerated while the method is executed.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.PureAttribute">
            <summary>
                Indicates that a method does not make any observable state changes.
                The same as <c>System.Diagnostics.Contracts.PureAttribute</c>.
            </summary>
            <example>
                <code>
            [Pure] int Multiply(int x, int y) => x * y;
            
            void M() {
              Multiply(123, 42); // Waring: Return value of pure method is not used
            }
            </code>
            </example>
        </member>
        <member name="T:JetBrains.Annotations.MustUseReturnValueAttribute">
            <summary>
                Indicates that the return value of method invocation must be used.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.ProvidesContextAttribute">
            <summary>
                Indicates the type member or parameter of some type, that should be used instead of all other ways
                to get the value that type. This annotation is useful when you have some "context" value evaluated
                and stored somewhere, meaning that all other ways to get this value must be consolidated with existing one.
            </summary>
            <example>
                <code>
            class Foo {
              [ProvidesContext] IBarService _barService = ...;
            
              void ProcessNode(INode node) {
                DoSomething(node, node.GetGlobalServices().Bar);
                //              ^ Warning: use value of '_barService' field
              }
            }
            </code>
            </example>
        </member>
        <member name="T:JetBrains.Annotations.PathReferenceAttribute">
            <summary>
                Indicates that a parameter is a path to a file or a folder within a web project.
                Path can be relative or absolute, starting from web root (~).
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.SourceTemplateAttribute">
            <summary>
                An extension method marked with this attribute is processed by ReSharper code completion
                as a 'Source Template'. When extension method is completed over some expression, it's source code
                is automatically expanded like a template at call site.
            </summary>
            <remarks>
                Template method body can contain valid source code and/or special comments starting with '$'.
                Text inside these comments is added as source code when the template is applied. Template parameters
                can be used either as additional method parameters or as identifiers wrapped in two '$' signs.
                Use the <see cref="T:JetBrains.Annotations.MacroAttribute" /> attribute to specify macros for parameters.
            </remarks>
            <example>
                In this example, the 'forEach' method is a source template available over all values
                of enumerable types, producing ordinary C# 'foreach' statement and placing caret inside block:
                <code>
            [SourceTemplate]
            public static void forEach&lt;T&gt;(this IEnumerable&lt;T&gt; xs) {
              foreach (var x in xs) {
                 //$ $END$
              }
            }
            </code>
            </example>
        </member>
        <member name="T:JetBrains.Annotations.MacroAttribute">
            <summary>
                Allows specifying a macro for a parameter of a <see cref="T:JetBrains.Annotations.SourceTemplateAttribute" >source template</see>.
            </summary>
            <remarks>
                You can apply the attribute on the whole method or on any of its additional parameters. The macro expression
                is defined in the <see cref="P:JetBrains.Annotations.MacroAttribute.Expression" /> property. When applied on a method, the target
                template parameter is defined in the <see cref="P:JetBrains.Annotations.MacroAttribute.Target" /> property. To apply the macro silently
                for the parameter, set the <see cref="P:JetBrains.Annotations.MacroAttribute.Editable" /> property value = -1.
            </remarks>
            <example>
                Applying the attribute on a source template method:
                <code>
            [SourceTemplate, Macro(Target = "item", Expression = "suggestVariableName()")]
            public static void forEach&lt;T&gt;(this IEnumerable&lt;T&gt; collection) {
              foreach (var item in collection) {
                //$ $END$
              }
            }
            </code>
                Applying the attribute on a template method parameter:
                <code>
            [SourceTemplate]
            public static void something(this Entity x, [Macro(Expression = "guid()", Editable = -1)] string newguid) {
              /*$ var $x$Id = "$newguid$" + x.ToString();
              x.DoSomething($x$Id); */
            }
            </code>
            </example>
        </member>
        <member name="P:JetBrains.Annotations.MacroAttribute.Expression">
            <summary>
                Allows specifying a macro that will be executed for a <see cref="T:JetBrains.Annotations.SourceTemplateAttribute" >source template</see>
                parameter when the template is expanded.
            </summary>
        </member>
        <member name="P:JetBrains.Annotations.MacroAttribute.Editable">
            <summary>
                Allows specifying which occurrence of the target parameter becomes editable when the template is deployed.
            </summary>
            <remarks>
                If the target parameter is used several times in the template, only one occurrence becomes editable;
                other occurrences are changed synchronously. To specify the zero-based index of the editable occurrence,
                use values >= 0. To make the parameter non-editable when the template is expanded, use -1.
            </remarks>
            >
        </member>
        <member name="P:JetBrains.Annotations.MacroAttribute.Target">
            <summary>
                Identifies the target parameter of a <see cref="T:JetBrains.Annotations.SourceTemplateAttribute" >source template</see> if the
                <see cref="T:JetBrains.Annotations.MacroAttribute" /> is applied on a template method.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcActionAttribute">
            <summary>
                ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
                is an MVC action. If applied to a method, the MVC action name is calculated
                implicitly from the context. Use this attribute for custom wrappers similar to
                <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcAreaAttribute">
            <summary>
                ASP.NET MVC attribute. Indicates that a parameter is an MVC area.
                Use this attribute for custom wrappers similar to
                <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcControllerAttribute">
            <summary>
                ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter is
                an MVC controller. If applied to a method, the MVC controller name is calculated
                implicitly from the context. Use this attribute for custom wrappers similar to
                <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String, String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcMasterAttribute">
            <summary>
                ASP.NET MVC attribute. Indicates that a parameter is an MVC Master. Use this attribute
                for custom wrappers similar to <c>System.Web.Mvc.Controller.View(String, String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcModelTypeAttribute">
            <summary>
                ASP.NET MVC attribute. Indicates that a parameter is an MVC model type. Use this attribute
                for custom wrappers similar to <c>System.Web.Mvc.Controller.View(String, Object)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcPartialViewAttribute">
            <summary>
                ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter is an MVC
                partial view. If applied to a method, the MVC partial view name is calculated implicitly
                from the context. Use this attribute for custom wrappers similar to
                <c>System.Web.Mvc.Html.RenderPartialExtensions.RenderPartial(HtmlHelper, String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcSuppressViewErrorAttribute">
            <summary>
                ASP.NET MVC attribute. Allows disabling inspections for MVC views within a class or a method.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcDisplayTemplateAttribute">
            <summary>
                ASP.NET MVC attribute. Indicates that a parameter is an MVC display template.
                Use this attribute for custom wrappers similar to
                <c>System.Web.Mvc.Html.DisplayExtensions.DisplayForModel(HtmlHelper, String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcEditorTemplateAttribute">
            <summary>
                ASP.NET MVC attribute. Indicates that a parameter is an MVC editor template.
                Use this attribute for custom wrappers similar to
                <c>System.Web.Mvc.Html.EditorExtensions.EditorForModel(HtmlHelper, String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcTemplateAttribute">
            <summary>
                ASP.NET MVC attribute. Indicates that a parameter is an MVC template.
                Use this attribute for custom wrappers similar to
                <c>System.ComponentModel.DataAnnotations.UIHintAttribute(System.String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcViewAttribute">
            <summary>
                ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
                is an MVC view component. If applied to a method, the MVC view name is calculated implicitly
                from the context. Use this attribute for custom wrappers similar to
                <c>System.Web.Mvc.Controller.View(Object)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcViewComponentAttribute">
            <summary>
                ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
                is an MVC view component name.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcViewComponentViewAttribute">
            <summary>
                ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
                is an MVC view component view. If applied to a method, the MVC view component view name is default.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcActionSelectorAttribute">
            <summary>
                ASP.NET MVC attribute. When applied to a parameter of an attribute,
                indicates that this parameter is an MVC action name.
            </summary>
            <example>
                <code>
            [ActionName("Foo")]
            public ActionResult Login(string returnUrl) {
              ViewBag.ReturnUrl = Url.Action("Foo"); // OK
              return RedirectToAction("Bar"); // Error: Cannot resolve action
            }
            </code>
            </example>
        </member>
        <member name="T:JetBrains.Annotations.RazorSectionAttribute">
            <summary>
                Razor attribute. Indicates that a parameter or a method is a Razor section.
                Use this attribute for custom wrappers similar to
                <c>System.Web.WebPages.WebPageBase.RenderSection(String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.CollectionAccessAttribute">
            <summary>
                Indicates how method, constructor invocation or property access
                over collection type affects content of the collection.
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.CollectionAccessType.None">
            <summary>Method does not use or modify content of the collection.</summary>
        </member>
        <member name="F:JetBrains.Annotations.CollectionAccessType.Read">
            <summary>Method only reads content of the collection but does not modify it.</summary>
        </member>
        <member name="F:JetBrains.Annotations.CollectionAccessType.ModifyExistingContent">
            <summary>Method can change content of the collection but does not add new elements.</summary>
        </member>
        <member name="F:JetBrains.Annotations.CollectionAccessType.UpdatedContent">
            <summary>Method can add new elements to the collection.</summary>
        </member>
        <member name="T:JetBrains.Annotations.AssertionMethodAttribute">
            <summary>
                Indicates that the marked method is assertion method, i.e. it halts control flow if
                one of the conditions is satisfied. To set the condition, mark one of the parameters with
                <see cref="T:JetBrains.Annotations.AssertionConditionAttribute" /> attribute.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AssertionConditionAttribute">
            <summary>
                Indicates the condition parameter of the assertion method. The method itself should be
                marked by <see cref="T:JetBrains.Annotations.AssertionMethodAttribute" /> attribute. The mandatory argument of
                the attribute is the assertion type.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AssertionConditionType">
            <summary>
                Specifies assertion type. If the assertion method argument satisfies the condition,
                then the execution continues. Otherwise, execution is assumed to be halted.
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.AssertionConditionType.IS_TRUE">
            <summary>Marked parameter should be evaluated to true.</summary>
        </member>
        <member name="F:JetBrains.Annotations.AssertionConditionType.IS_FALSE">
            <summary>Marked parameter should be evaluated to false.</summary>
        </member>
        <member name="F:JetBrains.Annotations.AssertionConditionType.IS_NULL">
            <summary>Marked parameter should be evaluated to null value.</summary>
        </member>
        <member name="F:JetBrains.Annotations.AssertionConditionType.IS_NOT_NULL">
            <summary>Marked parameter should be evaluated to not null value.</summary>
        </member>
        <member name="T:JetBrains.Annotations.TerminatesProgramAttribute">
            <summary>
                Indicates that the marked method unconditionally terminates control flow execution.
                For example, it could unconditionally throw exception.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.LinqTunnelAttribute">
            <summary>
                Indicates that method is pure LINQ method, with postponed enumeration (like Enumerable.Select,
                .Where). This annotation allows inference of [InstantHandle] annotation for parameters
                of delegate type by analyzing LINQ method chains.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.NoEnumerationAttribute">
            <summary>
                Indicates that IEnumerable, passed as parameter, is not enumerated.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.RegexPatternAttribute">
            <summary>
                Indicates that parameter is regular expression pattern.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.NoReorderAttribute">
            <summary>
                Prevents the Member Reordering feature from tossing members of the marked class.
            </summary>
            <remarks>
                The attribute must be mentioned in your member reordering patterns
            </remarks>
        </member>
        <member name="T:JetBrains.Annotations.XamlItemsControlAttribute">
            <summary>
                XAML attribute. Indicates the type that has <c>ItemsSource</c> property and should be treated
                as <c>ItemsControl</c>-derived type, to enable inner items <c>DataContext</c> type resolve.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.XamlItemBindingOfItemsControlAttribute">
            <summary>
                XAML attribute. Indicates the property of some <c>BindingBase</c>-derived type, that
                is used to bind some item of <c>ItemsControl</c>-derived type. This annotation will
                enable the <c>DataContext</c> type resolve for XAML bindings for such properties.
            </summary>
            <remarks>
                Property should have the tree ancestor of the <c>ItemsControl</c> type or
                marked with the <see cref="T:JetBrains.Annotations.XamlItemsControlAttribute" /> attribute.
            </remarks>
        </member>
    </members>
</doc>
